/**
 * \mainpage C Libraries
 *
 * This library contains pre-defined data structures, random number generators, and file readers programmed
 * in the C language.  The libraries contain functions ang generic operators to simplify the user interface.
 * The generic operators do not increase memory usage or decrease execution time like traditional operators,
 * but instead feed the pre-compiler with the appropriate function definition based on data type.  This allows
 * a type generic interface.
 *
 * \section install_sec Installation
 *
 * This library has been tested on the clang 14.0.0, and the gcc 12.2.1 compilers.  Use the following
 * process to install this library
 * 1. Ensure that gcc 12.2.1 or clang 14.0.0 or later compilers are installed on your computer
 * 2. Clone the library with the following command clone `https://github.com/Jon-Webb-79/c_libs`  
 * 3. Install locally as a library with the command `xxx`
 *
 * \section files_sec Files
 *
 * This library contains the following header files and contents
 *
 * 1. swap.h
 * This header file contains functions and macros that can be used to swap data in memory.
 * This file contains the following functions.
 *
 * The library provides the following functions:
 * - `swap_char()`: Swaps two char values in memory.
 * - `swap_uchar()`: Swaps two unsinged char values in memory.
 * - `swap_short()`: Swaps two short integer values in memory.
 * - `swap_ushort()`: Swaps two unsigned short integer values in memory.
 * - `swap_int()`: Swaps two integer values in memory.
 * - `swap_uint()`: Swaps two unsigned integer values in memory.
 * - `swap_long()`: Swaps two long integer values in memory.
 * - `swap_ulong()`: Swaps two unsigned long integer values in memory.
 * - `swap_llong()`: Swaps two long long integer values in memory.
 * - `swap_ullong()`: Swaps two unsigned long long integer values in memory.
 * - `swap_float()`: Swaps two float values in memory.
 * - `swap_double()`: Swaps two double values in memory.
 * - `swap_ldouble()`: Swaps two long double values in memory.
 * - `swap_bool()`: Swaps two bool values in memory.
 *
 * This file also contains the following macros.
 * - `SWAP()`: Swaps data of any type listed aboved in a single macro.
 *
 * 2. vector.h
 * This header file contains functions and macros that can be used to instantiate and execute
 * a dynamically and statically allocated array.  \b NOTE: The contents of this file can also
 * be accessed via the data_structure.h file. The vector.h file contains the following functions.
 *
 * - `init_char_vector()`: Initializes a dynamically allocated vector of type char.
 * - `init_uchar_vector()`: Initializes a dynamically allocated vector of type unsigned char.
 * - `init_short_vector()`: Initializes a dynamically allocated vector of type short int.
 * - `init_ushort_vector()`: Initializes a dynamically allocated vector of type unsigned short int.
 * - `init_int_vector()`: Initializes a dynamically allocated vector of type int.
 * - `init_uint_vector()`: Initializes a dynamically allocated vector of type unsigned int.
 * - `init_long_vector()`: Initializes a dynamically allocated vector of type long int.
 * - `init_ulong_vector()`: Initializes a dynamically allocated vector of type unsigned long int.
 * - `init_llong_vector()`: Initializes a dynamically allocated vector of type long long int.
 * - `init_ullong_vector()`: Initializes a dynamically allocated vector of type unsigned long long int.
 * - `init_float_vector()`: Initializes a dynamically allocated vector of type float.
 * - `init_double_vector()`: Initializes a dynamically allocated vector of type double.
 * - `init_ldouble_vector()`: Initializes a dynamically allocated vector of type long double
 * - `init_bool_vector()`: Initializes a dynamically allocated vector of type bool.
 * - `init_string_vector()`: Initializes a dynamically allocated vector of type string.
 *
 * - `push_char_vector()`: Function to push a char variable to a vector or array.
 * - `push_uchar_vector()`: Function to push an unsigned char variable to a vector or array.
 * - `push_short_vector()`: Function to push a short integer to a vector or array.
 * - `push_ushort_vector()`: Function to push an unsigned short integer to a vector or array.
 * - `push_int_vector()`: Function to push an integer to a vector or array.
 * - `push_uint_vector()`: Function to push an unsigned integer to a vector or array.
 * - `push_long_vector()`: Function to push a long integer to a vector or array.
 * - `push_ulong_vector()`: Function to push an unsligned long integer to a vector or array.
 * - `push_llong_vector()': Function to push a long long integer to a vector or array.
 * - `push_ullong_vector()`: Function to push an unsigned long long integer to a vector or array.
 * - `push_float_vector()`: Function to push a float value to a vector or array.
 * - `push_double_vector()`: Function to push a double value to a vector or array.
 * - `push_ldouble_vector()`: Function to push a long double value to a vector or array.
 * - `push_bool_vector()`: Function to push a bool value to a vector or array.
 * - `push_string_vector()`: Function to push a string value to a vector or array.
 *
 * - `pop_char_vector()`: Function to delete a char value from a vector or array.
 * - `pop_uchar_vector()`: Function to delete an unsigned char value from a vector or array.
 * - `pop_short_vector()`: Function to delete a short value from a vector or array.
 * - `pop_ushort_vector()`: Function to delete an unsigned short value from a vector or array.
 * - `pop_int_vector()`: Function to delete an integer value from a vector or array.
 * - `pop_uint_vector()`: Function to delete an unsigned integer value from a vector or array.
 * - `pop_long_vector()`: Function to delete a long integer from a vector or array.
 * - `pop_ulong_vector()`: Function to delete an unsigned long integer from a vector or array.
 * - `pop_llong_vector()`: Function to delete a long long integer from a vector or array.
 * - `pop_ullong_vector()`: Function to delete an unsinged long long integer from a vector or array.
 * - `pop_float_vector()`: Function to delete a float value from a vector or array.
 * - `pop_double_vector()`: Function to delete a double value from a vector or array.
 * - `pop_ldouble_vector()`: Function to delete a long double value from a vector or array.
 * - `pop_bool_vector()`: Function to delete a bool value from a vector or array.
 * - `pop_string_vector()`: Function to delete a string value from a vector or array.
 *
 * - `replace_char_vector()`: Function to replace a char value with another in a vector or array.
 * - `replace_uchar_vector()`: Function to replace an unsigned char value with another in a vector or array.
 * - `replace_short_vector()`: Function to replace a short value with another in a vector or array.
 * - `replace_ushort_vector()`: Function to replace an unsigned short value with another in a vector or array.
 * - `replace_int_vector()`: Function to replace an integer value with another in a vector or array.
 * - `replace_uint_vector()`: Function to replace an unsigned integer value with another in a vector or array.
 * - `replace_long_vector()`: Function to replace a long integer value with another in a vector or array.
 * - `replace_ulong_vector()`: Function to replace an unsigned long long vector with another in a vector or array.
 * - `replace_llong_vector()`: Function to replace a long long integer value with another in a vector or array.
 * - `replace_ullong_vector()`: Function to replace an unsigned long long vector with another in a vector or array.
 * - `replace_float_vector()`: Function to replace a float value with another in a vector or array.
 * - `replace_double_vector()`: Function to replace a double value with another in a vector or array.
 * - `replace_ldouble_vector()`: Function to replace a long double value with another in a vector or array.
 * - `replace_bool_vector()`: Function to replace a bool value with another in a vector or array.
 * - `replace_string_vector()`: Function to replace a string value with another in a vector or array.
 *
 * - `reverse_char_vector()`: Function to reverse the order of a char vector or array.
 * - `reverse_uchar_vector()`: Function to reverse the order of an unsigned char vector or array.
 * - `reverse_short_vector()`: Function to reverse the order of a short integer vector or array.
 * - `reverse_ushort_vector()`: Function to reverse the order of an unsigned short integer vector or array.
 * - `reveree_int_vector()`: Function to reverse the order of an integer vector or array.
 * - `reverse_uint_vector()`: Functin to reverse the order of an unsigned integer vector or array.
 * - `reverse_long_vector()`: Function to reverse the order of a long integer vector or array.
 * - `reverse_ulong_vector()`: Function to reverse the order of an unsigned long interger vector or array.
 * - `reverse_llong_vector()`: Function to reverse the order of a long long integer vector or array.
 * - `reverse_ullong_vector()`: Function to reverse the order of an unsinged long long integer vector or array.
 * - `reverse_float_vector()`: Function to reverse the order of a float vector or array.
 * - `reverse_double_vector()`: Function to reverse the order of a double vector or array.
 * - `reverse_ldouble_vector()`: Function to reverse the order of a long double vector or array.
 * - `reverse_bool_vector()`: Function to reverse the order of a bool vector or array.
 * - `reverse_string_vector()`: Function to reverse the order of a string vector or array.
 *
 * - `sort_char_vector()`: Function to sort a char vector or array in forward or reverse direction.
 * - `sort_uchar_vector()`: Function to sort an unsigned char vector or array in forward or reverse direction.
 * - `sort_short_vector()`: Function to sort a short vector or array in forward or reverse direction.
 * - `sort_ushort_vector()`: Function to sort an unsigned short vector or array in forward or reverse direction.
 * - `sort_char_vector()`: Function to sort a char vector or array in forward or reverse direction.
 * - `sort_uchar_vector()`: Function to sort an unsigned char vector or array in forward or reverse direction.
 * - `sort_short_vector()`: Function to sort a short vector or array in forward or reverse direction.
 * - `sort_ushort_vector()`: Function to sort an unsigned short vector or array in forward or reverse direction.
 * - `sort_int_vector()`: Function to sort an integer vector or array in forward or reverse direction.
 * - `sort_uint_vector()`: Function to sort an integer vector or array in forward or reverse direction.
 * - `sort_long_vector()`: Function to sort a long integer vector or array in forward or reverse direction.
 * - `sort_ulong_vector()`: Function to sort an unsigned long integer vector or array in forward or reverse direction.
 * - `sort_llong_vector()`: Function to sort a long long integer vector or array in forward or reverse directions.
 * - `sort_ullong_vector()`: Function to sort an unsigned long long vector or array in forward or reverse direction.
 * - `sort_float_vector()`: Function to sort a float vector or array in forward or reverse direction.
 * - `sort_double_vector()`: Function to sort a double vector or array in forward or reverse direction.
 * - `sort_ldouble_vector()`: Function to sort a long double vector or array in forward or reverse direction.
 * - `sort_bool_vector()`: Function to sort a bool vector or array in forward or reverse direction.
 * - `sort_string_vector()`: Function to sort a string vector or array in forward or reverse direction.
 *
 * - `sum_char_vector()`: Function to determine the sum of char values in a vector or array.
 * - `sum_uchar_vector()`: Function to determine the sum of unsigned char values in a vector or array.
 * - `sum_short_vector()`: Function to determine the sum of short integer values in a short integer vector or array.
 * - `sum_ushort_vector()`: Function to determine the sum of unsigned short integer values in a short integer vector or array.
 * - `sum_int_vector()`: Function to determine the sum of integer values in a short integer vector or array.
 * - `sum_uint_vector()`: Function to determine the sum of unsigned integer values in a short integer vector or array.
 * - `sum_long_vector()`: Function to determine the sum of long integer values in a short integer vector or array.
 * - `sum_ulong_vector()`: Function to determine the sum of unsigned long integer values in a short integer vector or array.
 * - `sum_llong_vector()`: Function to determine the sum of long long integer values in a short integer vector or array.
 * - `sum_ullong_vector()`: Function to determine the sum of unsigned long long integer values in a short integer vector or array.
 * - `sum_float_vector()`: Function to determine the sum of float values in a vector or array.
 * - `sum_double_vector()`: Function to determine the sum of double values in a vector or array.
 * - `sum_ldouble_vector()`: Function to determine the sum of long double values in a vector or array.
 *
 * - `cumsum_char_vector()`: Function to determine the cumulative sum of a char vector or array.
 * - `cumsum_char_vector()`: Function to determine the cumulative sum of an unsigned char vector or array.
 * - `cumsum_short_vector()`: Function to determine the cumulative sum of a short integer vector or array.
 * - `cumsum_ushort_vector()`: Function to determine the cumulative sum of an unsigned short integer vector or array.
 * - `cumsum_int_vector()`: Function to determine the cumulative sum of an integer vector or array.
 * - `cumsum_uint_vector()`: Function to determine the cumulative sum of an unsigned integer vector or array.
 * - `cumsum_long_vector()`: Function to determine the cumulative sum of a long integer vector or array.
 * - `cumsum_ulong_vector()`: Function to determine the cumulative sum of an unsigned long integer vector or array.
 * - `cumsum_llong_vector()`: Function to determine the cumulative sum of a long long vector or array.
 * - `cumsum_ullong_vector()`: Function to determine the cumulative sum of an unsigned long long integer vector or array.
 * - `cumsum_float_vector()`: Function to determine the cumulative sum of a float vector or array.
 * - `cumsum_double_vector()`: Function to determine the cumulative sum of a double vector or array.
 * - `cumsum_ldouble_vetor()`: Function to determine the cumulative sum of a long double vector or array.
 *
 * - `average_char_vector()`: Function to determine the average value of a char vector or array.
 * - `average_uchar_vector()`: Function to determine the average value of an unsigned char vector or array.
 * - `average_short_vector()`: Function to determine the average value of a short integer vector or array.
 * - `average_ushort_vector()`: Function to determine the average value of an unsigned short vector or array.
 * - `average_int_vector()`: Function to determine the average value of an integer vector or array.
 * - `average_uint_vector()`: Function to determine the average value of an unsigned integer vector or array.
 * - `average_long_vector()`: Function to determine the average value of a long integer vector or array.
 * - `average_ulong_vector()`: Function to determine the average value of an unsigned long vector.
 * - `average_llong_vector()`: Function to determine the average value of a long long vector or array.
 * - `average_ullong_vector()`: Function to determine the average value of an unsigned long long vector or array.
 * - `average_float_vector()`: Function to determine the average value of a float vector or array.
 * - `average_double_vector()`: Function to determine the average value of a double vector or array.
 * - `average_ldouble_vector()`: Function to determine the average value of a long double vector or array.
 *
 * - `stdev_char_vector()`: Function to determine the standard deviation of a char vector or array.
 * - `stdev_uchar_vector()`: Function to determine the standard deviation of an unsigned char vector or array.
 * - `stdev_short_vector()`: Function to determine the standard deviation of a short integer vector or array.
 * - `stdev_ushort_vector()`: Function to determine the standard deviation of an unsigned short integer vector or array.
 * - `stdev_int_vector()`: Function to determine the standard deviation of an integer vector or array.
 * - `stdev_uint_vector()`: Function to determine the standard deviation of an unsigned interger array.
 * - `stdev_long_vector()`: Function to determine the standard deviation of a long integer vector or array.
 * - `stdev_ulong_vector()`: Function to determine the standard deviation of an unsigned long vector or array.
 * - `stdev_llong_vector()`: Function to determine the standard deviation of a long long integer vector or array.
 * - `stdev_ullong_vector()`: Function to determine the standard deviation of an unsigned long long integer vector or array.
 * - `stdev_float_vector()`: Function to determine the standard deviation of a float vector or array.
 * - `stdev_double_vector()`: Function to determine the standard deviation of a double vector or array.
 * - `stdev_ldouble_vector()`: Function to determine the standard deviation of a long double vector or array.
 *
 * - `max_char_vector()`: Function to determine the maximum value in a char vector or array.
 * - `max_uchar_vector()`: Function to determine the maximum value in an unsigned char vector or array.
 * - `max_short_vector()`: Function to determine the maximum value in a short vector or array.
 * - `max_ushort_vector()`: Function to determine the maximum value in an unsigned short vector or array.
 * - `max_int_vector()`: Function to determine the maximum value in an integer vector or array.
 * - `max_uint_vector()`: Function to determine the maximum value in an unsigned integer vector or array.
 * - `max_long_vector()`: Function to determine the maximum value in a long integer vector or array.
 * - `max_ulong_vector()`: Function to determine the maximum value in an unsigned long integer vector or array.
 * - `max_llong_vector()`: Function to determine the maximum value in a long long integer vector or array.
 * - `max_ullong_vector()`: Function to determine the maximum value in an unsigned long long integer vector or array.
 * - `max_float_vector()`: Function to determine the maximum value in a float vector or array.
 * - `max_double_vector()`: Function to determine the maximum value in an double vector or array.
 * - `max_ldouble_vector()`: Function to determine the maximum value in an long double vector or array.
 *
 * - `min_char_vector()`: Function to determine the minimum value in a char vector or array.
 * - `min_uchar_vector()`: Function to determine the minimum value in an unsigned char vector or array.
 * - `min_short_vector()`: Function to determine the minimum value in a short vector or array.
 * - `min_ushort_vector()`: Function to determine the minimum value in an unsigned short vector or array.
 * - `min_int_vector()`: Function to determine the minumum value in an integer vector or array.
 * - `min_uint_vector()`: Function to determine the minimum value in an unsigned integer vector or array.
 * - `min_long_vector()`: Function to determine the minimum value in a long integer vector or array.
 * - `min_ulong_vector()`: Function to determine the minimum value in an unsigned long integer vector or array.
 * - `min_llong_vector()`: Function to determine the minimum value in a long long integer vector or array.
 * - `min_ullong_vector()`: Function to determine the minimum value in an unsigned long long integer vector or array.
 * - `min_float_vector()`: Function to determine the minimum value in a float vector or array.
 * - `min_double_vector()`: Function to determine the minimum value in an double vector or array.
 * - `min_ldouble_vector()`: Function to determine the minimum value in an long double vector or array.
 *
 * - `range_char_vector()`: Function to produce a range of char values as a vector.
 * - `range_uchar_vector()`: Function to produce a range of unsigned char values as a vector.
 * - `range_short_vector()`: Function to produce a range of short integer values as a vector.
 * - `range_ushort_vector()`: Function to produce a range of unsigned short integer values as a vector.
 * - `range_int_vector()`: Function to produce a range of integer values as a vector.
 * - `range_uint_vector()`: Function to produce a range of unsigned integer values as a vector.
 * - `range_long_vector()`: Function to produce a range of long integer values as a vector.
 * - `range_ulong_vector()`: Function to produce a range of unsigned long short integer values as a vector.
 * - `range_llong_vector()`: Function to produce a range of long long integer values as a vector.
 * - `range_ullong_vector()`: Function to produce a range of unsigned long long short integer values as a vector.
 * - `range_float_vector()`: Function to produce a range of float values as a vector.
 * - `range_double_vector()`: Function to produce a range of double values as a vector.
 * - `range_ldouble_vector()`: Function to produce a range of long double values as a vector.
 *
 * - `char_vector_data()`: Function to retrieve data from a user specified index in a char array or vector.
 * - `uchar_vector_data()`: Function to retrieve data from a user specified index in a unsigned char array or vector.
 * - `short_vector_data()`: Function to retrieve data from a user specified index in a short array or vector.
 * - `ushort_vector_data()`: Function to retrieve data from a user specified index in a unsigned short array or vector.
 * - `int_vector_data()`: Function to retrieve data from a user specified index in an integer array or vector.
 * - `uint_vector_data()`: Function to retrieve data from a user specified index in a unsigned integer char array or vector.
 * - `long_vector_data()`: Function to retrieve data from a user specified index in a long integer array or vector.
 * - `ulong_vector_data()`: Function to retrieve data from a user specified index in a unsigned long integer array or vector.
 * - `llong_vector_data()`: Function to retrieve data from a user specified index in a long long integer array or vector.
 * - `ullong_vector_data()`: Function to retrieve data from a user specified index in a unsigned long long integer array or vector.
 * - `float_vector_data()`: Function to retrieve data from a user specified index in a float array or vector.
 * - `double_vector_data()`: Function to retrieve data from a user specified index in a double integer array or vector.
 * - `ldouble_vector_data()`: Function to retrieve data from a user specified index in a long double array or vector.
 * - `bool_vector_data()`: Function to retrieve data from a user specified index in a bool integer array or vector.
 * - `string_vector_data()`: Function to retrieve data from a user specified index in a string integer array or vector.
 *
 * - `trim_char_vector()`: Function to minimize allocated memory to minimum necessary value.
 * - `trim_uchar_vector()`: Function to minimize allocated memory to minimum necessary value.
 * - `trim_short_vector()`: Function to minimize allocated memory to minimum necessary value.
 * - `trim_ushort_vector()`: Function to minimize allocated memory to minimum necessary value.
 * - `trim_int_vector()`: Function to minimize allocated memory to minimum necessary value.
 * - `trim_uint_vector()`: Function to minimize allocated memory to minimum necessary value.
 * - `trim_long_vector()`: Function to minimize allocated memory to minimum necessary value.
 * - `trim_ulong_vector()`: Function to minimize allocated memory to minimum necessary value.
 * - `trim_llong_vector()`: Function to minimize allocated memory to minimum necessary value.
 * - `trim_ullong_vector()`: Function to minimize allocated memory to minimum necessary value.
 * - `trim_float_vector()`: Function to minimize allocated memory to minimum necessary value.
 * - `trim_double_vector()`: Function to minimize allocated memory to minimum necessary value.
 * - `trim_ldouble_vector()`: Function to minimize allocated memory to minimum necessary value.
 * - `trim_bool_vector()`: Function to minimize allocated memory to minimum necessary value.
 * - `trim_string_vector()`: Function to minimize allocated memory to minimum necessary value.
 * - `TRIM()`: A Macro to minimize the allocated memory to the minimum necessary value for any data type listed above.
 *
 * - `replace_char_vector_index()`: Function to replace a char value at a specific vector index with another.
 * - `replace_uchar_vector_index()`: Function to replace an unsigned char value at a specific vector index with another.
 * - `replace_short_vector_index()`: Function to replace a short integer value at a specific vector index with another.
 * - `replace_ushort_vector_index()`: Function to replace an unsigned short integer value at a specific vector index with another.
 * - `replace_int_vector_index()`: Function to replace a int value at a specific vector index with another.
 * - `replace_uint_vector_index()`: Function to replace an unsigned integer value at a specific vector index with another.
 * - `replace_long_vector_index()`: Function to replace a long int value at a specific vector index with another.
 * - `replace_ulong_vector_index()`: Function to replace an unsigned long integer value at a specific vector index with another.
 * - `replace_llong_vector_index()`: Function to replace a long long int value at a specific vector index with another.
 * - `replace_ullong_vector_index()`: Function to replace an unsigned long long integer value at a specific vector index with another.
 * - `replace_float_vector_index()`: Function to replace a float value at a specific vector index with another.
 * - `replace_double_vector_index()`: Function to replace an double value at a specific vector index with another.
 * - `replace_ldouble_vector_index()`: Function to replace a long double value at a specific vector index with another.
 * - `replace_bool_vector_index()`: Function to replace an bool value at a specific vector index with another.
 * - `replace_string_vector_index()`: Function to replace a string value at a specific vector index with another.
 *
 * \section license_sec License
 *
 * This library is released under the MIT License.
 */

