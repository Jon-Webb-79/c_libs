<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="print_8c" kind="file" language="C++">
    <compoundname>print.c</compoundname>
    <includes refid="print_8h" local="yes">print.h</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c</label>
        <link refid="print_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>print.h</label>
        <link refid="print_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>swap.h</label>
        <link refid="swap_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>vector.h</label>
        <link refid="vector_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
      <node id="6">
        <label>stdlib.h</label>
      </node>
      <node id="7">
        <label>string.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="print_8c_1a97ec9dc33067858546ad853dc0cbd8fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_short</definition>
        <argsstring>(short x)</argsstring>
        <name>print_short</name>
        <param>
          <type>short</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" line="18" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" bodystart="18" bodyend="18"/>
        <referencedby refid="print_8c_1a2a0d52224624824540d0990005b5e4d9" compoundref="print_8c" startline="37" endline="56">print_vshort</referencedby>
      </memberdef>
      <memberdef kind="function" id="print_8c_1ab118e99637388dfae3ccf27c654628d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_ushort</definition>
        <argsstring>(unsigned short x)</argsstring>
        <name>print_ushort</name>
        <param>
          <type>unsigned short</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" line="19" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" bodystart="19" bodyend="19"/>
        <referencedby refid="print_8c_1af34cc1667a589100d6c609f9387cbe2a" compoundref="print_8c" startline="59" endline="78">print_vushort</referencedby>
      </memberdef>
      <memberdef kind="function" id="print_8c_1a1fd303ab55a5d1e49ac9ae3c3ce10321" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_int</definition>
        <argsstring>(int x)</argsstring>
        <name>print_int</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" line="20" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" bodystart="20" bodyend="20"/>
        <referencedby refid="print_8c_1a9a41c83694e3b241942d8970fd6745ff" compoundref="print_8c" startline="81" endline="100">print_vint</referencedby>
      </memberdef>
      <memberdef kind="function" id="print_8c_1a574c5bc64e4638eb13d9ad7c88c6fbcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_uint</definition>
        <argsstring>(unsigned int x)</argsstring>
        <name>print_uint</name>
        <param>
          <type>unsigned int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" line="21" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" bodystart="21" bodyend="21"/>
        <referencedby refid="print_8c_1af0a82c6bf6c3d184686915db6a7f29b3" compoundref="print_8c" startline="103" endline="118">print_vuint</referencedby>
      </memberdef>
      <memberdef kind="function" id="print_8c_1a6f89221b13ec0882c700f88c623113a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_long</definition>
        <argsstring>(long int x)</argsstring>
        <name>print_long</name>
        <param>
          <type>long int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" line="22" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" bodystart="22" bodyend="22"/>
        <referencedby refid="print_8c_1ae911ee475c83d5068afc57a6a5c1411a" compoundref="print_8c" startline="121" endline="140">print_vlint</referencedby>
      </memberdef>
      <memberdef kind="function" id="print_8c_1ad2bfa6bf3fb70b1015bac866fdad267b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_ulong</definition>
        <argsstring>(unsigned long int x)</argsstring>
        <name>print_ulong</name>
        <param>
          <type>unsigned long int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" line="23" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" bodystart="23" bodyend="23"/>
        <referencedby refid="print_8c_1ad7e952d652fc3101cb3e6da0b97bf3bd" compoundref="print_8c" startline="143" endline="162">print_vulint</referencedby>
      </memberdef>
      <memberdef kind="function" id="print_8c_1afb26dd7a6cb52b95ecd16aa445fc9239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_llong</definition>
        <argsstring>(long long int x)</argsstring>
        <name>print_llong</name>
        <param>
          <type>long long int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" line="24" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" bodystart="24" bodyend="24"/>
        <referencedby refid="print_8c_1aaf6b0ca85e9949e33b1fe7032013737f" compoundref="print_8c" startline="165" endline="184">print_vllint</referencedby>
      </memberdef>
      <memberdef kind="function" id="print_8c_1ab5a44eddd18370fb6ef9aaf3e8d359d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_ullong</definition>
        <argsstring>(unsigned long long int x)</argsstring>
        <name>print_ullong</name>
        <param>
          <type>unsigned long long int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" line="25" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" bodystart="25" bodyend="25"/>
        <referencedby refid="print_8c_1a4669814d3bc34ea00aeb82d518de638c" compoundref="print_8c" startline="187" endline="206">print_vullint</referencedby>
      </memberdef>
      <memberdef kind="function" id="print_8c_1ae263043922f2154fed0757f8c9af61bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_float</definition>
        <argsstring>(float x)</argsstring>
        <name>print_float</name>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" line="26" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" bodystart="26" bodyend="26"/>
        <referencedby refid="print_8c_1a1b802bc15c06ceedbd94e033cad224ef" compoundref="print_8c" startline="209" endline="228">print_vfloat</referencedby>
      </memberdef>
      <memberdef kind="function" id="print_8c_1ac5ed0163987cb3330a169f59080685ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_double</definition>
        <argsstring>(double x)</argsstring>
        <name>print_double</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" line="27" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" bodystart="27" bodyend="27"/>
        <referencedby refid="print_8c_1ace9eeb8267215fd743662d3dcd5e9214" compoundref="print_8c" startline="231" endline="250">print_vdble</referencedby>
      </memberdef>
      <memberdef kind="function" id="print_8c_1a54070cc5f0b3732b440b5ef02373376f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_longdouble</definition>
        <argsstring>(long double x)</argsstring>
        <name>print_longdouble</name>
        <param>
          <type>long double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" line="28" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" bodystart="28" bodyend="28"/>
        <referencedby refid="print_8c_1a9225ee1244d3fb8bbd2f8a187374c970" compoundref="print_8c" startline="253" endline="272">print_vldble</referencedby>
      </memberdef>
      <memberdef kind="function" id="print_8c_1ac678a2f116551899cfc1a5e8cf648c14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_char</definition>
        <argsstring>(char x)</argsstring>
        <name>print_char</name>
        <param>
          <type>char</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" line="29" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" bodystart="29" bodyend="29"/>
        <referencedby refid="print_8c_1a6b984360c08f810691957e80aef53706" compoundref="print_8c" startline="275" endline="294">print_achar</referencedby>
      </memberdef>
      <memberdef kind="function" id="print_8c_1ab95583f0586df0ae6cf38986debe821c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_uchar</definition>
        <argsstring>(unsigned char x)</argsstring>
        <name>print_uchar</name>
        <param>
          <type>unsigned char</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" line="30" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" bodystart="30" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="print_8c_1aebfb9d4b007ae9d63b0f794881005c85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_bool</definition>
        <argsstring>(bool x)</argsstring>
        <name>print_bool</name>
        <param>
          <type>bool</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" line="31" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" bodystart="31" bodyend="31"/>
        <referencedby refid="print_8c_1aa03507dd0302ea7b35a3214359834e07" compoundref="print_8c" startline="297" endline="316">print_vbool</referencedby>
      </memberdef>
      <memberdef kind="function" id="print_8c_1a860a00528dade9ef415370817eabf5ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_string</definition>
        <argsstring>(char *x)</argsstring>
        <name>print_string</name>
        <param>
          <type>char *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" line="32" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" bodystart="32" bodyend="32"/>
        <referencedby refid="print_8c_1a3da5a00b1052067cae81971c1ee7d7e3" compoundref="print_8c" startline="319" endline="338">print_vstring</referencedby>
      </memberdef>
      <memberdef kind="function" id="print_8c_1a2a0d52224624824540d0990005b5e4d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_vshort</definition>
        <argsstring>(Short x)</argsstring>
        <name>print_vshort</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" line="37" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" bodystart="37" bodyend="56"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
        <references refid="print_8c_1a97ec9dc33067858546ad853dc0cbd8fa" compoundref="print_8c" startline="18" endline="18">print_short</references>
        <references refid="print_8h_1aef9c5ff01ca8d0b5e6979b8ec61034f5" compoundref="print_8h" startline="23">PRNT_LENGTH</references>
      </memberdef>
      <memberdef kind="function" id="print_8c_1af34cc1667a589100d6c609f9387cbe2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_vushort</definition>
        <argsstring>(UShort x)</argsstring>
        <name>print_vushort</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" line="59" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" bodystart="59" bodyend="78"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
        <references refid="print_8c_1ab118e99637388dfae3ccf27c654628d3" compoundref="print_8c" startline="19" endline="19">print_ushort</references>
        <references refid="print_8h_1aef9c5ff01ca8d0b5e6979b8ec61034f5" compoundref="print_8h" startline="23">PRNT_LENGTH</references>
      </memberdef>
      <memberdef kind="function" id="print_8c_1a9a41c83694e3b241942d8970fd6745ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_vint</definition>
        <argsstring>(Int x)</argsstring>
        <name>print_vint</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" line="81" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" bodystart="81" bodyend="100"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
        <references refid="print_8c_1a1fd303ab55a5d1e49ac9ae3c3ce10321" compoundref="print_8c" startline="20" endline="20">print_int</references>
        <references refid="print_8h_1aef9c5ff01ca8d0b5e6979b8ec61034f5" compoundref="print_8h" startline="23">PRNT_LENGTH</references>
      </memberdef>
      <memberdef kind="function" id="print_8c_1af0a82c6bf6c3d184686915db6a7f29b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_vuint</definition>
        <argsstring>(UInt x)</argsstring>
        <name>print_vuint</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" line="103" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" bodystart="103" bodyend="118"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
        <references refid="print_8c_1a574c5bc64e4638eb13d9ad7c88c6fbcb" compoundref="print_8c" startline="21" endline="21">print_uint</references>
        <references refid="print_8h_1aef9c5ff01ca8d0b5e6979b8ec61034f5" compoundref="print_8h" startline="23">PRNT_LENGTH</references>
      </memberdef>
      <memberdef kind="function" id="print_8c_1ae911ee475c83d5068afc57a6a5c1411a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_vlint</definition>
        <argsstring>(LInt x)</argsstring>
        <name>print_vlint</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" line="121" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" bodystart="121" bodyend="140"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
        <references refid="print_8c_1a6f89221b13ec0882c700f88c623113a3" compoundref="print_8c" startline="22" endline="22">print_long</references>
        <references refid="print_8h_1aef9c5ff01ca8d0b5e6979b8ec61034f5" compoundref="print_8h" startline="23">PRNT_LENGTH</references>
      </memberdef>
      <memberdef kind="function" id="print_8c_1ad7e952d652fc3101cb3e6da0b97bf3bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_vulint</definition>
        <argsstring>(ULInt x)</argsstring>
        <name>print_vulint</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" line="143" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" bodystart="143" bodyend="162"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
        <references refid="print_8c_1ad2bfa6bf3fb70b1015bac866fdad267b" compoundref="print_8c" startline="23" endline="23">print_ulong</references>
        <references refid="print_8h_1aef9c5ff01ca8d0b5e6979b8ec61034f5" compoundref="print_8h" startline="23">PRNT_LENGTH</references>
      </memberdef>
      <memberdef kind="function" id="print_8c_1aaf6b0ca85e9949e33b1fe7032013737f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_vllint</definition>
        <argsstring>(LLInt x)</argsstring>
        <name>print_vllint</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" line="165" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" bodystart="165" bodyend="184"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
        <references refid="print_8c_1afb26dd7a6cb52b95ecd16aa445fc9239" compoundref="print_8c" startline="24" endline="24">print_llong</references>
        <references refid="print_8h_1aef9c5ff01ca8d0b5e6979b8ec61034f5" compoundref="print_8h" startline="23">PRNT_LENGTH</references>
      </memberdef>
      <memberdef kind="function" id="print_8c_1a4669814d3bc34ea00aeb82d518de638c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_vullint</definition>
        <argsstring>(ULLInt x)</argsstring>
        <name>print_vullint</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" line="187" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" bodystart="187" bodyend="206"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
        <references refid="print_8c_1ab5a44eddd18370fb6ef9aaf3e8d359d9" compoundref="print_8c" startline="25" endline="25">print_ullong</references>
        <references refid="print_8h_1aef9c5ff01ca8d0b5e6979b8ec61034f5" compoundref="print_8h" startline="23">PRNT_LENGTH</references>
      </memberdef>
      <memberdef kind="function" id="print_8c_1a1b802bc15c06ceedbd94e033cad224ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_vfloat</definition>
        <argsstring>(Flt x)</argsstring>
        <name>print_vfloat</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" line="209" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" bodystart="209" bodyend="228"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
        <references refid="print_8c_1ae263043922f2154fed0757f8c9af61bb" compoundref="print_8c" startline="26" endline="26">print_float</references>
        <references refid="print_8h_1aef9c5ff01ca8d0b5e6979b8ec61034f5" compoundref="print_8h" startline="23">PRNT_LENGTH</references>
      </memberdef>
      <memberdef kind="function" id="print_8c_1ace9eeb8267215fd743662d3dcd5e9214" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_vdble</definition>
        <argsstring>(Dble x)</argsstring>
        <name>print_vdble</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" line="231" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" bodystart="231" bodyend="250"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
        <references refid="print_8c_1ac5ed0163987cb3330a169f59080685ca" compoundref="print_8c" startline="27" endline="27">print_double</references>
        <references refid="print_8h_1aef9c5ff01ca8d0b5e6979b8ec61034f5" compoundref="print_8h" startline="23">PRNT_LENGTH</references>
      </memberdef>
      <memberdef kind="function" id="print_8c_1a9225ee1244d3fb8bbd2f8a187374c970" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_vldble</definition>
        <argsstring>(LDble x)</argsstring>
        <name>print_vldble</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" line="253" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" bodystart="253" bodyend="272"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
        <references refid="print_8c_1a54070cc5f0b3732b440b5ef02373376f" compoundref="print_8c" startline="28" endline="28">print_longdouble</references>
        <references refid="print_8h_1aef9c5ff01ca8d0b5e6979b8ec61034f5" compoundref="print_8h" startline="23">PRNT_LENGTH</references>
      </memberdef>
      <memberdef kind="function" id="print_8c_1a6b984360c08f810691957e80aef53706" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_achar</definition>
        <argsstring>(Char x)</argsstring>
        <name>print_achar</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" line="275" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" bodystart="275" bodyend="294"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
        <references refid="print_8c_1ac678a2f116551899cfc1a5e8cf648c14" compoundref="print_8c" startline="29" endline="29">print_char</references>
        <references refid="print_8h_1aef9c5ff01ca8d0b5e6979b8ec61034f5" compoundref="print_8h" startline="23">PRNT_LENGTH</references>
      </memberdef>
      <memberdef kind="function" id="print_8c_1aa03507dd0302ea7b35a3214359834e07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_vbool</definition>
        <argsstring>(Bool x)</argsstring>
        <name>print_vbool</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" line="297" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" bodystart="297" bodyend="316"/>
        <references refid="structBool_1a5445f6ef94d239208dc797c289fded75" compoundref="vector_8h" startline="90">Bool::active_length</references>
        <references refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" compoundref="vector_8h" startline="90">Bool::array</references>
        <references refid="print_8c_1aebfb9d4b007ae9d63b0f794881005c85" compoundref="print_8c" startline="31" endline="31">print_bool</references>
        <references refid="print_8h_1aef9c5ff01ca8d0b5e6979b8ec61034f5" compoundref="print_8h" startline="23">PRNT_LENGTH</references>
      </memberdef>
      <memberdef kind="function" id="print_8c_1a3da5a00b1052067cae81971c1ee7d7e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_vstring</definition>
        <argsstring>(String x)</argsstring>
        <name>print_vstring</name>
        <param>
          <type><ref refid="structString" kindref="compound">String</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" line="319" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c" bodystart="319" bodyend="338"/>
        <references refid="structString_1a706ffaf2f520d46074dd99e7896d6673" compoundref="vector_8h" startline="97">String::active_length</references>
        <references refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" compoundref="vector_8h" startline="96">String::array</references>
        <references refid="print_8c_1a860a00528dade9ef415370817eabf5ff" compoundref="print_8c" startline="32" endline="32">print_string</references>
        <references refid="print_8h_1aef9c5ff01ca8d0b5e6979b8ec61034f5" compoundref="print_8h" startline="23">PRNT_LENGTH</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>File:<sp/><sp/><sp/><sp/>print.c</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>Purpose:<sp/>Describe<sp/>the<sp/>file<sp/>purpose<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Source<sp/>Metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>Author:<sp/><sp/>Jonathan<sp/>A.<sp/>Webb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>Date:<sp/><sp/><sp/><sp/>April<sp/>08,<sp/>2023</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>Version:<sp/>1.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>Copyright:<sp/>Copyright<sp/>2022,<sp/>Jon<sp/>Webb<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Include<sp/>modules<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="print_8h" kindref="compound">print.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Scalar<sp/>print<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="print_8c_1a97ec9dc33067858546ad853dc0cbd8fa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="print_8c_1a97ec9dc33067858546ad853dc0cbd8fa" kindref="member">print_short</ref>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/>printf(</highlight><highlight class="stringliteral">&quot;%hd&quot;</highlight><highlight class="normal">,<sp/>x);<sp/>}</highlight></codeline>
<codeline lineno="19" refid="print_8c_1ab118e99637388dfae3ccf27c654628d3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="print_8c_1ab118e99637388dfae3ccf27c654628d3" kindref="member">print_ushort</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/>printf(</highlight><highlight class="stringliteral">&quot;%hu&quot;</highlight><highlight class="normal">,<sp/>x);<sp/>}</highlight></codeline>
<codeline lineno="20" refid="print_8c_1a1fd303ab55a5d1e49ac9ae3c3ce10321" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="print_8c_1a1fd303ab55a5d1e49ac9ae3c3ce10321" kindref="member">print_int</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/>printf(</highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>x);<sp/>}</highlight></codeline>
<codeline lineno="21" refid="print_8c_1a574c5bc64e4638eb13d9ad7c88c6fbcb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="print_8c_1a574c5bc64e4638eb13d9ad7c88c6fbcb" kindref="member">print_uint</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/>printf(</highlight><highlight class="stringliteral">&quot;%u&quot;</highlight><highlight class="normal">,<sp/>x);<sp/>}</highlight></codeline>
<codeline lineno="22" refid="print_8c_1a6f89221b13ec0882c700f88c623113a3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="print_8c_1a6f89221b13ec0882c700f88c623113a3" kindref="member">print_long</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/>printf(</highlight><highlight class="stringliteral">&quot;%ld&quot;</highlight><highlight class="normal">,<sp/>x);<sp/>}</highlight></codeline>
<codeline lineno="23" refid="print_8c_1ad2bfa6bf3fb70b1015bac866fdad267b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="print_8c_1ad2bfa6bf3fb70b1015bac866fdad267b" kindref="member">print_ulong</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/>printf(</highlight><highlight class="stringliteral">&quot;%lu&quot;</highlight><highlight class="normal">,<sp/>x);<sp/>}</highlight></codeline>
<codeline lineno="24" refid="print_8c_1afb26dd7a6cb52b95ecd16aa445fc9239" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="print_8c_1afb26dd7a6cb52b95ecd16aa445fc9239" kindref="member">print_llong</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/>printf(</highlight><highlight class="stringliteral">&quot;%lld&quot;</highlight><highlight class="normal">,<sp/>x);<sp/>}</highlight></codeline>
<codeline lineno="25" refid="print_8c_1ab5a44eddd18370fb6ef9aaf3e8d359d9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="print_8c_1ab5a44eddd18370fb6ef9aaf3e8d359d9" kindref="member">print_ullong</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/>printf(</highlight><highlight class="stringliteral">&quot;%llu&quot;</highlight><highlight class="normal">,<sp/>x);<sp/>}</highlight></codeline>
<codeline lineno="26" refid="print_8c_1ae263043922f2154fed0757f8c9af61bb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="print_8c_1ae263043922f2154fed0757f8c9af61bb" kindref="member">print_float</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/>printf(</highlight><highlight class="stringliteral">&quot;%f&quot;</highlight><highlight class="normal">,<sp/>x);<sp/>}</highlight></codeline>
<codeline lineno="27" refid="print_8c_1ac5ed0163987cb3330a169f59080685ca" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="print_8c_1ac5ed0163987cb3330a169f59080685ca" kindref="member">print_double</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/>printf(</highlight><highlight class="stringliteral">&quot;%lf&quot;</highlight><highlight class="normal">,<sp/>x);<sp/>}</highlight></codeline>
<codeline lineno="28" refid="print_8c_1a54070cc5f0b3732b440b5ef02373376f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="print_8c_1a54070cc5f0b3732b440b5ef02373376f" kindref="member">print_longdouble</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/>printf(</highlight><highlight class="stringliteral">&quot;%Lf&quot;</highlight><highlight class="normal">,<sp/>x);<sp/>}</highlight></codeline>
<codeline lineno="29" refid="print_8c_1ac678a2f116551899cfc1a5e8cf648c14" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="print_8c_1ac678a2f116551899cfc1a5e8cf648c14" kindref="member">print_char</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/>printf(</highlight><highlight class="stringliteral">&quot;%c&quot;</highlight><highlight class="normal">,<sp/>x);<sp/>}</highlight></codeline>
<codeline lineno="30" refid="print_8c_1ab95583f0586df0ae6cf38986debe821c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="print_8c_1ab95583f0586df0ae6cf38986debe821c" kindref="member">print_uchar</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/>printf(</highlight><highlight class="stringliteral">&quot;%hhu&quot;</highlight><highlight class="normal">,<sp/>x);<sp/>}</highlight></codeline>
<codeline lineno="31" refid="print_8c_1aebfb9d4b007ae9d63b0f794881005c85" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="print_8c_1aebfb9d4b007ae9d63b0f794881005c85" kindref="member">print_bool</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/>printf(x<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="32" refid="print_8c_1a860a00528dade9ef415370817eabf5ff" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="print_8c_1a860a00528dade9ef415370817eabf5ff" kindref="member">print_string</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x)<sp/>{<sp/>printf(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>x);<sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Stack<sp/>data<sp/>structure<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="print_8c_1a2a0d52224624824540d0990005b5e4d9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="print_8c_1a2a0d52224624824540d0990005b5e4d9" kindref="member">print_vshort</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x.<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[<sp/>NULL<sp/>]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>x.<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref><sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8c_1a97ec9dc33067858546ad853dc0cbd8fa" kindref="member">print_short</ref>(x.<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref>[i]);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/><ref refid="print_8h_1aef9c5ff01ca8d0b5e6979b8ec61034f5" kindref="member">PRNT_LENGTH</ref>)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8c_1a97ec9dc33067858546ad853dc0cbd8fa" kindref="member">print_short</ref>(x.<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref>[x.<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref><sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="print_8c_1af34cc1667a589100d6c609f9387cbe2a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="print_8c_1af34cc1667a589100d6c609f9387cbe2a" kindref="member">print_vushort</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x.<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[<sp/>NULL<sp/>]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>x.<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref><sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8c_1ab118e99637388dfae3ccf27c654628d3" kindref="member">print_ushort</ref>(x.<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref>[i]);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/><ref refid="print_8h_1aef9c5ff01ca8d0b5e6979b8ec61034f5" kindref="member">PRNT_LENGTH</ref>)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8c_1ab118e99637388dfae3ccf27c654628d3" kindref="member">print_ushort</ref>(x.<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref>[x.<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref><sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="print_8c_1a9a41c83694e3b241942d8970fd6745ff" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="print_8c_1a9a41c83694e3b241942d8970fd6745ff" kindref="member">print_vint</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x.<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[<sp/>NULL<sp/>]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>x.<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref><sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8c_1a1fd303ab55a5d1e49ac9ae3c3ce10321" kindref="member">print_int</ref>(x.<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref>[i]);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/><ref refid="print_8h_1aef9c5ff01ca8d0b5e6979b8ec61034f5" kindref="member">PRNT_LENGTH</ref>)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8c_1a1fd303ab55a5d1e49ac9ae3c3ce10321" kindref="member">print_int</ref>(x.<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref>[x.<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref><sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="print_8c_1af0a82c6bf6c3d184686915db6a7f29b3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="print_8c_1af0a82c6bf6c3d184686915db6a7f29b3" kindref="member">print_vuint</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>x.<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref><sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8c_1a574c5bc64e4638eb13d9ad7c88c6fbcb" kindref="member">print_uint</ref>(x.<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref>[i]);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/><ref refid="print_8h_1aef9c5ff01ca8d0b5e6979b8ec61034f5" kindref="member">PRNT_LENGTH</ref>)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8c_1a574c5bc64e4638eb13d9ad7c88c6fbcb" kindref="member">print_uint</ref>(x.<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref>[x.<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref><sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="print_8c_1ae911ee475c83d5068afc57a6a5c1411a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="print_8c_1ae911ee475c83d5068afc57a6a5c1411a" kindref="member">print_vlint</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x.<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[<sp/>NULL<sp/>]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>x.<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref><sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8c_1a6f89221b13ec0882c700f88c623113a3" kindref="member">print_long</ref>(x.<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref>[i]);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/><ref refid="print_8h_1aef9c5ff01ca8d0b5e6979b8ec61034f5" kindref="member">PRNT_LENGTH</ref>)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8c_1a6f89221b13ec0882c700f88c623113a3" kindref="member">print_long</ref>(x.<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref>[x.<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref><sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="print_8c_1ad7e952d652fc3101cb3e6da0b97bf3bd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="print_8c_1ad7e952d652fc3101cb3e6da0b97bf3bd" kindref="member">print_vulint</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x.<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[<sp/>NULL<sp/>]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>x.<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref><sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8c_1ad2bfa6bf3fb70b1015bac866fdad267b" kindref="member">print_ulong</ref>(x.<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref>[i]);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/><ref refid="print_8h_1aef9c5ff01ca8d0b5e6979b8ec61034f5" kindref="member">PRNT_LENGTH</ref>)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8c_1ad2bfa6bf3fb70b1015bac866fdad267b" kindref="member">print_ulong</ref>(x.<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref>[x.<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref><sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="print_8c_1aaf6b0ca85e9949e33b1fe7032013737f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="print_8c_1aaf6b0ca85e9949e33b1fe7032013737f" kindref="member">print_vllint</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x.<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[<sp/>NULL<sp/>]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>x.<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref><sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8c_1afb26dd7a6cb52b95ecd16aa445fc9239" kindref="member">print_llong</ref>(x.<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref>[i]);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/><ref refid="print_8h_1aef9c5ff01ca8d0b5e6979b8ec61034f5" kindref="member">PRNT_LENGTH</ref>)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8c_1afb26dd7a6cb52b95ecd16aa445fc9239" kindref="member">print_llong</ref>(x.<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref>[x.<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref><sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="print_8c_1a4669814d3bc34ea00aeb82d518de638c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="print_8c_1a4669814d3bc34ea00aeb82d518de638c" kindref="member">print_vullint</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x.<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[<sp/>NULL<sp/>]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>x.<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref><sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8c_1ab5a44eddd18370fb6ef9aaf3e8d359d9" kindref="member">print_ullong</ref>(x.<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref>[i]);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/><ref refid="print_8h_1aef9c5ff01ca8d0b5e6979b8ec61034f5" kindref="member">PRNT_LENGTH</ref>)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8c_1ab5a44eddd18370fb6ef9aaf3e8d359d9" kindref="member">print_ullong</ref>(x.<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref>[x.<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref><sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209" refid="print_8c_1a1b802bc15c06ceedbd94e033cad224ef" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="print_8c_1a1b802bc15c06ceedbd94e033cad224ef" kindref="member">print_vfloat</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x.<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[<sp/>NULL<sp/>]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>x.<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref><sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8c_1ae263043922f2154fed0757f8c9af61bb" kindref="member">print_float</ref>(x.<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref>[i]);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/><ref refid="print_8h_1aef9c5ff01ca8d0b5e6979b8ec61034f5" kindref="member">PRNT_LENGTH</ref>)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8c_1ae263043922f2154fed0757f8c9af61bb" kindref="member">print_float</ref>(x.<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref>[x.<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref><sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231" refid="print_8c_1ace9eeb8267215fd743662d3dcd5e9214" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="print_8c_1ace9eeb8267215fd743662d3dcd5e9214" kindref="member">print_vdble</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x.<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[<sp/>NULL<sp/>]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>x.<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref><sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8c_1ac5ed0163987cb3330a169f59080685ca" kindref="member">print_double</ref>(x.<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref>[i]);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/><ref refid="print_8h_1aef9c5ff01ca8d0b5e6979b8ec61034f5" kindref="member">PRNT_LENGTH</ref>)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8c_1ac5ed0163987cb3330a169f59080685ca" kindref="member">print_double</ref>(x.<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref>[x.<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref><sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253" refid="print_8c_1a9225ee1244d3fb8bbd2f8a187374c970" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="print_8c_1a9225ee1244d3fb8bbd2f8a187374c970" kindref="member">print_vldble</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x.<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[<sp/>NULL<sp/>]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>x.<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref><sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8c_1a54070cc5f0b3732b440b5ef02373376f" kindref="member">print_longdouble</ref>(x.<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref>[i]);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/><ref refid="print_8h_1aef9c5ff01ca8d0b5e6979b8ec61034f5" kindref="member">PRNT_LENGTH</ref>)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8c_1a54070cc5f0b3732b440b5ef02373376f" kindref="member">print_longdouble</ref>(x.<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref>[x.<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref><sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275" refid="print_8c_1a6b984360c08f810691957e80aef53706" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="print_8c_1a6b984360c08f810691957e80aef53706" kindref="member">print_achar</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x.<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[<sp/>NULL<sp/>]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>x.<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref><sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8c_1ac678a2f116551899cfc1a5e8cf648c14" kindref="member">print_char</ref>(x.<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref>[i]);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/><ref refid="print_8h_1aef9c5ff01ca8d0b5e6979b8ec61034f5" kindref="member">PRNT_LENGTH</ref>)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8c_1ac678a2f116551899cfc1a5e8cf648c14" kindref="member">print_char</ref>(x.<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref>[x.<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref><sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297" refid="print_8c_1aa03507dd0302ea7b35a3214359834e07" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="print_8c_1aa03507dd0302ea7b35a3214359834e07" kindref="member">print_vbool</ref>(<ref refid="structBool" kindref="compound">Bool</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x.<ref refid="structBool_1a5445f6ef94d239208dc797c289fded75" kindref="member">active_length</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[<sp/>NULL<sp/>]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>x.<ref refid="structBool_1a5445f6ef94d239208dc797c289fded75" kindref="member">active_length</ref><sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8c_1aebfb9d4b007ae9d63b0f794881005c85" kindref="member">print_bool</ref>(x.<ref refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" kindref="member">array</ref>[i]);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/><ref refid="print_8h_1aef9c5ff01ca8d0b5e6979b8ec61034f5" kindref="member">PRNT_LENGTH</ref>)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8c_1aebfb9d4b007ae9d63b0f794881005c85" kindref="member">print_bool</ref>(x.<ref refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" kindref="member">array</ref>[x.<ref refid="structBool_1a5445f6ef94d239208dc797c289fded75" kindref="member">active_length</ref><sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319" refid="print_8c_1a3da5a00b1052067cae81971c1ee7d7e3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="print_8c_1a3da5a00b1052067cae81971c1ee7d7e3" kindref="member">print_vstring</ref>(<ref refid="structString" kindref="compound">String</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x.<ref refid="structString_1a706ffaf2f520d46074dd99e7896d6673" kindref="member">active_length</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[<sp/>NULL<sp/>]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>x.<ref refid="structString_1a706ffaf2f520d46074dd99e7896d6673" kindref="member">active_length</ref><sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print_8c_1a860a00528dade9ef415370817eabf5ff" kindref="member">print_string</ref>(x.<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref>[i]);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/><ref refid="print_8h_1aef9c5ff01ca8d0b5e6979b8ec61034f5" kindref="member">PRNT_LENGTH</ref>)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="print_8c_1a860a00528dade9ef415370817eabf5ff" kindref="member">print_string</ref>(x.<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref>[x.<ref refid="structString_1a706ffaf2f520d46074dd99e7896d6673" kindref="member">active_length</ref><sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="comment">//<sp/>================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment">//<sp/>================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="comment">//<sp/>eof</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c"/>
  </compounddef>
</doxygen>
