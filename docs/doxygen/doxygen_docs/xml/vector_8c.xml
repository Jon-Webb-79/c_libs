<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="vector_8c" kind="file" language="C++">
    <compoundname>vector.c</compoundname>
    <includes refid="vector_8h" local="yes">vector.h</includes>
    <incdepgraph>
      <node id="7">
        <label>swap.h</label>
        <link refid="swap_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c</label>
        <link refid="vector_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>vector.h</label>
        <link refid="vector_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
      <node id="5">
        <label>stdlib.h</label>
      </node>
      <node id="6">
        <label>string.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="vector_8c_1a749211e8a46a8b2297b3c6ebb78aed0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int init_short_vector</definition>
        <argsstring>(Short *vec, size_t length)</argsstring>
        <name>init_short_vector</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>A function used to initialize a short integer vector struct. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>A Vector struct of type <ref refid="structShort" kindref="compound">Short</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The initial guess for the number of indices in the dynamically allocated array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the struct is sucesfully initialized, -1 otherwise, with a stderr message </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="18" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="18" bodyend="30"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1af0b6f4e61e69b8a2f74d42b09b421d88" compoundref="vector_8h" startline="77">Short::allocated_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
        <references refid="structShort_1a20b9c526866b593e8e1ecdc49515e642" compoundref="vector_8h" startline="77">Short::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <referencedby refid="vector_8c_1ab88c9075f7ac94dd8656a8eec4a14a94" compoundref="vector_8c" startline="4477" endline="4482">copy_short_vector</referencedby>
        <referencedby refid="vector_8c_1a588f2bea0a2ac3d8bf87184d873a2804" compoundref="vector_8c" startline="3020" endline="3029">cumsum_short_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1aa63398bdb55f97b891b93404a89de14d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int init_ushort_vector</definition>
        <argsstring>(UShort *vec, size_t length)</argsstring>
        <name>init_ushort_vector</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>A function to initiaize an unsigned short vector struct. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>A Vector struct of type <ref refid="structUShort" kindref="compound">UShort</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The initial guess for the number of indices in the dynamically allocated array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the struct is sucesfully initialized, -1 otherwise, with a stderr message </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="33" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="33" bodyend="45"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a0ef4541f3fd3fcee1c0f5809341c84d6" compoundref="vector_8h" startline="78">UShort::allocated_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
        <references refid="structUShort_1a4c5d40034bbd1e9ee0de773d6be0c31e" compoundref="vector_8h" startline="78">UShort::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <referencedby refid="vector_8c_1af70602cee86af9597513bc67b2878244" compoundref="vector_8c" startline="4485" endline="4490">copy_ushort_vector</referencedby>
        <referencedby refid="vector_8c_1a94f7fe260f499b1a18150332e1a0e427" compoundref="vector_8c" startline="3032" endline="3041">cumsum_ushort_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a9fdb6c5fdd9f0d5a3bfb751f9e82968e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int init_int_vector</definition>
        <argsstring>(Int *vec, size_t length)</argsstring>
        <name>init_int_vector</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>A function to initiaize an unsigned short vector struct. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>A Vector struct of type <ref refid="structInt" kindref="compound">Int</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The initial guess for the number of indices in the dynamically allocated array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the struct is sucesfully initialized, -1 otherwise, with a stderr message </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="48" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="48" bodyend="60"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a63bea8755b3ce6be7e83970b9ea3bd68" compoundref="vector_8h" startline="79">Int::allocated_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
        <references refid="structInt_1ae124ac3392878072e49fe64e0d07beff" compoundref="vector_8h" startline="79">Int::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <referencedby refid="vector_8c_1a5fd73621c9da27949814495f00a3296f" compoundref="vector_8c" startline="4493" endline="4498">copy_int_vector</referencedby>
        <referencedby refid="vector_8c_1acaf8f7f369483e4dcb9a7af53e79492c" compoundref="vector_8c" startline="3044" endline="3053">cumsum_int_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a9d8eb1d9ce65365d7b044fe684387a3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int init_uint_vector</definition>
        <argsstring>(UInt *vec, size_t length)</argsstring>
        <name>init_uint_vector</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="63" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="63" bodyend="75"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a05b28efaec93c388e8685403f57a07ce" compoundref="vector_8h" startline="80">UInt::allocated_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
        <references refid="structUInt_1ab87c8b62b4178bf9bcf59d03b066da1c" compoundref="vector_8h" startline="80">UInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <referencedby refid="vector_8c_1a6bf7c67135858a07103fff23436b7d77" compoundref="vector_8c" startline="4501" endline="4506">copy_uint_vector</referencedby>
        <referencedby refid="vector_8c_1abe44138d94c38f7d65d62f63dddf668b" compoundref="vector_8c" startline="3056" endline="3065">cumsum_uint_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ac59c5fed0f4cd6b9aaf4c87b7a997bd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int init_long_vector</definition>
        <argsstring>(LInt *vec, size_t length)</argsstring>
        <name>init_long_vector</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="78" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="78" bodyend="90"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a21eec79c847025348ad0082aab6dee52" compoundref="vector_8h" startline="81">LInt::allocated_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
        <references refid="structLInt_1a7255bafd2fb6310140aebe36d68b9629" compoundref="vector_8h" startline="81">LInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <referencedby refid="vector_8c_1abc614587816c37e5dfd70c2a832da165" compoundref="vector_8c" startline="4509" endline="4514">copy_long_vector</referencedby>
        <referencedby refid="vector_8c_1aacdbfadbd42e44ba909b315b43152012" compoundref="vector_8c" startline="3068" endline="3077">cumsum_long_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1af08098b392c0ff01db799bff9c83a521" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int init_ulong_vector</definition>
        <argsstring>(ULInt *vec, size_t length)</argsstring>
        <name>init_ulong_vector</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="93" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="93" bodyend="105"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1acf325510e03976f12c116ad68c4998ec" compoundref="vector_8h" startline="82">ULInt::allocated_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
        <references refid="structULInt_1abbab1a9c205c4d86fcc53c55174d1515" compoundref="vector_8h" startline="82">ULInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <referencedby refid="vector_8c_1a31f85f1454385a608eebc7d150417b7c" compoundref="vector_8c" startline="4517" endline="4522">copy_ulong_vector</referencedby>
        <referencedby refid="vector_8c_1ae856339059aa7e6f5db1d5bd7de43306" compoundref="vector_8c" startline="3080" endline="3089">cumsum_ulong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a65eda538d3c07a8beb1475c1a214ff67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int init_llong_vector</definition>
        <argsstring>(LLInt *vec, size_t length)</argsstring>
        <name>init_llong_vector</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="107" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="107" bodyend="119"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1a967c631e7b8192f0016845623ae04759" compoundref="vector_8h" startline="83">LLInt::allocated_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
        <references refid="structLLInt_1a2cf879f2b771d70de2ae15401190b50e" compoundref="vector_8h" startline="83">LLInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <referencedby refid="vector_8c_1a2a8c6a77d383c5251686fc600c829005" compoundref="vector_8c" startline="4525" endline="4530">copy_llong_vector</referencedby>
        <referencedby refid="vector_8c_1a531b30e8b67bc20cad9865cc3d8afe50" compoundref="vector_8c" startline="3092" endline="3101">cumsum_llong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ab05d31d34c87d8d6cd76f48539bf367f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int init_ullong_vector</definition>
        <argsstring>(ULLInt *vec, size_t length)</argsstring>
        <name>init_ullong_vector</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="122" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="122" bodyend="134"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1ac6210c003919694e4fccfc5885c8fcb4" compoundref="vector_8h" startline="84">ULLInt::allocated_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
        <references refid="structULLInt_1acb153b18423bf9465c6a52aa74745df3" compoundref="vector_8h" startline="84">ULLInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <referencedby refid="vector_8c_1abe7076983c8f386b305b615137dcd249" compoundref="vector_8c" startline="4533" endline="4538">copy_ullong_vector</referencedby>
        <referencedby refid="vector_8c_1a07bde722230b2f57f1b14304054d1d6a" compoundref="vector_8c" startline="3104" endline="3113">cumsum_ullong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a92bba70874a1570bd9c87a2a7385af35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int init_float_vector</definition>
        <argsstring>(Flt *vec, size_t length)</argsstring>
        <name>init_float_vector</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="137" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="137" bodyend="149"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a917603eeaae1fb22accbfc8d9252a389" compoundref="vector_8h" startline="85">Flt::allocated_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
        <references refid="structFlt_1ad98ce16bf2fff8b16351042bd4135629" compoundref="vector_8h" startline="85">Flt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <referencedby refid="vector_8c_1a440353dc4ac989fb88b34e7f5649dd05" compoundref="vector_8c" startline="4541" endline="4546">copy_float_vector</referencedby>
        <referencedby refid="vector_8c_1a9ddb912a129b46a9a2f2d147b4a1ddc8" compoundref="vector_8c" startline="3116" endline="3125">cumsum_float_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a2c0735f69da8e40535b5ecceace1a399" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int init_double_vector</definition>
        <argsstring>(Dble *vec, size_t length)</argsstring>
        <name>init_double_vector</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="152" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="152" bodyend="164"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a83cb29dfe09183032473cc7ffe005f5d" compoundref="vector_8h" startline="86">Dble::allocated_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
        <references refid="structDble_1a593e6de4412f110b4ffe6fd87a62aa56" compoundref="vector_8h" startline="86">Dble::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <referencedby refid="vector_8c_1a2d51a8a92a5c0e73345ade59b126ff35" compoundref="vector_8c" startline="4549" endline="4554">copy_double_vector</referencedby>
        <referencedby refid="vector_8c_1ae8512eab3bf15409bda6bce1d6ec0380" compoundref="vector_8c" startline="3128" endline="3137">cumsum_double_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a79d9f9d1d1cb31d09620bc5cdc73e94e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int init_ldouble_vector</definition>
        <argsstring>(LDble *vec, size_t length)</argsstring>
        <name>init_ldouble_vector</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="167" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="167" bodyend="179"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a1f0f3fd968cab1acdebf0d43f632633f" compoundref="vector_8h" startline="87">LDble::allocated_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
        <references refid="structLDble_1a25a9e54828403acb6e1e565d00a24582" compoundref="vector_8h" startline="87">LDble::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <referencedby refid="vector_8c_1a3fa3120b9c06e25fc840f90c7e10c5a6" compoundref="vector_8c" startline="4557" endline="4562">copy_ldouble_vector</referencedby>
        <referencedby refid="vector_8c_1ae0f64fd00879ff39b5ffbca0e80c197b" compoundref="vector_8c" startline="3140" endline="3149">cumsum_ldouble_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1aecde718777430d31ec254f8a4f40cce0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int init_char_vector</definition>
        <argsstring>(Char *vec, size_t length)</argsstring>
        <name>init_char_vector</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="182" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="182" bodyend="194"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1ab59977640c7539e5ae251af86d445257" compoundref="vector_8h" startline="88">Char::allocated_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
        <references refid="structChar_1a7231211c3eec109684271510fb25ffe8" compoundref="vector_8h" startline="88">Char::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <referencedby refid="vector_8c_1a430a540aea6caac8002281b9a2ddbf7a" compoundref="vector_8c" startline="4565" endline="4570">copy_char_vector</referencedby>
        <referencedby refid="vector_8c_1a877296aab1e625bc7b103322f6b93b14" compoundref="vector_8c" startline="2996" endline="3005">cumsum_char_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a9289ec52674f95ebf45ac81b70dfdc67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int init_uchar_vector</definition>
        <argsstring>(UChar *vec, size_t length)</argsstring>
        <name>init_uchar_vector</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="197" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="197" bodyend="209"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="structUChar_1a69ec79fc44d9f3b1455705e24a819f4b" compoundref="vector_8h" startline="89">UChar::allocated_length</references>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
        <references refid="structUChar_1aa1ea52fa832c84586784bb36c1617e44" compoundref="vector_8h" startline="89">UChar::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <referencedby refid="vector_8c_1ac3e7f4298d195586bfc0cf8b0fc1a053" compoundref="vector_8c" startline="4573" endline="4578">copy_uchar_vector</referencedby>
        <referencedby refid="vector_8c_1a2850df1b78d17fd2e45847e8bf1e51c2" compoundref="vector_8c" startline="3008" endline="3017">cumsum_uchar_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a2e1ea608c0b9b0768ba61facb8df913f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int init_bool_vector</definition>
        <argsstring>(Bool *vec, size_t length)</argsstring>
        <name>init_bool_vector</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="212" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="212" bodyend="224"/>
        <references refid="structBool_1a5445f6ef94d239208dc797c289fded75" compoundref="vector_8h" startline="90">Bool::active_length</references>
        <references refid="structBool_1a4a353f55a013f72befc666e8d0708212" compoundref="vector_8h" startline="90">Bool::allocated_length</references>
        <references refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" compoundref="vector_8h" startline="90">Bool::array</references>
        <references refid="structBool_1ad781cb2cecf2b060c6337a73ed89def9" compoundref="vector_8h" startline="90">Bool::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <referencedby refid="vector_8c_1a2e6c2d82128d66d5fe6800ee6ad9d277" compoundref="vector_8c" startline="4581" endline="4586">copy_bool_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ad5c4c9d8676c13f1f381b0b6c1119c4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int init_string_vector</definition>
        <argsstring>(String *vec)</argsstring>
        <name>init_string_vector</name>
        <param>
          <type><ref refid="structString" kindref="compound">String</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function initializes a vector struct of type <ref refid="structString" kindref="compound">String</ref> to contain a dynamically allocated array of strings.</para>
<para>/param vec A Vector struct of type <ref refid="structString" kindref="compound">String</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="227" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="227" bodyend="231"/>
        <references refid="structString_1a706ffaf2f520d46074dd99e7896d6673" compoundref="vector_8h" startline="97">String::active_length</references>
        <references refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" compoundref="vector_8h" startline="96">String::array</references>
        <referencedby refid="vector_8c_1a2cb84d3851679202a04f76066bc80a6e" compoundref="vector_8c" startline="4589" endline="4596">copy_string_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1acb7b3bcd9252ad84ea9d05436f57bd6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_short_array</definition>
        <argsstring>(Short *vec, short int *arr, size_t allocated_length, size_t active_length)</argsstring>
        <name>init_short_array</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>short int *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>allocated_length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>active_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This funciton will initialize an array struct container of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para>/param vec A vector struct container of type <ref refid="structShort" kindref="compound">Short</ref> /param arr An array of type short int /param allocated_length The allocated length of the array /param active_length The number of acticaly populated indices in the array arr</para>
<para><programlisting><codeline><highlight class="normal">Short<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">short<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2};</highlight></codeline>
<codeline><highlight class="normal">init_short_array(&amp;arr,<sp/>a,<sp/>5,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Since<sp/>the<sp/>array<sp/>is<sp/>statically<sp/>allocated<sp/>it<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>freed</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="236" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="236" bodyend="241"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1af0b6f4e61e69b8a2f74d42b09b421d88" compoundref="vector_8h" startline="77">Short::allocated_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
        <references refid="structShort_1a20b9c526866b593e8e1ecdc49515e642" compoundref="vector_8h" startline="77">Short::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1abbac579a20b2655deda9ec8a915fcfb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_ushort_array</definition>
        <argsstring>(UShort *vec, unsigned short int *arr, size_t allocated_length, size_t active_length)</argsstring>
        <name>init_ushort_array</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned short int *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>allocated_length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>active_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This funciton will initialize an array struct container of type <ref refid="structUShort" kindref="compound">UShort</ref></para>
<para>/param vec A vector struct container of type <ref refid="structUShort" kindref="compound">UShort</ref> /param arr An array of type unsigned short int /param allocated_length The allocated length of the array /param active_length The number of acticaly populated indices in the array arr</para>
<para><programlisting><codeline><highlight class="normal">UShort<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>short<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2};</highlight></codeline>
<codeline><highlight class="normal">init_ushort_array(&amp;arr,<sp/>a,<sp/>5,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Since<sp/>the<sp/>array<sp/>is<sp/>statically<sp/>allocated<sp/>it<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>freed</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="244" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="244" bodyend="249"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a0ef4541f3fd3fcee1c0f5809341c84d6" compoundref="vector_8h" startline="78">UShort::allocated_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
        <references refid="structUShort_1a4c5d40034bbd1e9ee0de773d6be0c31e" compoundref="vector_8h" startline="78">UShort::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a29734ea7a6541b75cd3824bc05e3e589" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_int_array</definition>
        <argsstring>(Int *vec, int *arr, size_t allocated_length, size_t active_length)</argsstring>
        <name>init_int_array</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>allocated_length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>active_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This funciton will initialize an array struct container of type <ref refid="structInt" kindref="compound">Int</ref></para>
<para>/param vec A vector struct container of type <ref refid="structInt" kindref="compound">Int</ref> /param arr An array of type int /param allocated_length The allocated length of the array /param active_length The number of acticaly populated indices in the array arr</para>
<para><programlisting><codeline><highlight class="normal">Int<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2};</highlight></codeline>
<codeline><highlight class="normal">init_int_array(&amp;arr,<sp/>a,<sp/>5,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Since<sp/>the<sp/>array<sp/>is<sp/>statically<sp/>allocated<sp/>it<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>freed</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="252" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="252" bodyend="257"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a63bea8755b3ce6be7e83970b9ea3bd68" compoundref="vector_8h" startline="79">Int::allocated_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
        <references refid="structInt_1ae124ac3392878072e49fe64e0d07beff" compoundref="vector_8h" startline="79">Int::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a2739fb21bf4216de09c51c393b89ece7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_uint_array</definition>
        <argsstring>(UInt *vec, unsigned int *arr, size_t allocated_length, size_t active_length)</argsstring>
        <name>init_uint_array</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>allocated_length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>active_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This funciton will initialize an array struct container of type <ref refid="structUInt" kindref="compound">UInt</ref></para>
<para>/param vec A vector struct container of type <ref refid="structUInt" kindref="compound">UInt</ref> /param arr An array of type unsigned unsigned int /param allocated_length The allocated length of the array /param active_length The number of acticaly populated indices in the array arr</para>
<para><programlisting><codeline><highlight class="normal">UInt<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2};</highlight></codeline>
<codeline><highlight class="normal">init_uint_array(&amp;arr,<sp/>a,<sp/>5,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Since<sp/>the<sp/>array<sp/>is<sp/>statically<sp/>allocated<sp/>it<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>freed</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="260" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="260" bodyend="265"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a05b28efaec93c388e8685403f57a07ce" compoundref="vector_8h" startline="80">UInt::allocated_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
        <references refid="structUInt_1ab87c8b62b4178bf9bcf59d03b066da1c" compoundref="vector_8h" startline="80">UInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1acbddef55e279d25613203d2f14957597" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_long_array</definition>
        <argsstring>(LInt *vec, long int *arr, size_t allocated_length, size_t active_length)</argsstring>
        <name>init_long_array</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long int *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>allocated_length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>active_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This funciton will initialize an array struct container of type <ref refid="structLInt" kindref="compound">LInt</ref></para>
<para>/param vec A vector struct container of type <ref refid="structLInt" kindref="compound">LInt</ref> /param arr An array of type long int /param allocated_length The allocated length of the array /param active_length The number of acticaly populated indices in the array arr</para>
<para><programlisting><codeline><highlight class="normal">LInt<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2};</highlight></codeline>
<codeline><highlight class="normal">init_long_array(&amp;arr,<sp/>a,<sp/>5,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Since<sp/>the<sp/>array<sp/>is<sp/>statically<sp/>allocated<sp/>it<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>freed</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="268" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="268" bodyend="273"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a21eec79c847025348ad0082aab6dee52" compoundref="vector_8h" startline="81">LInt::allocated_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
        <references refid="structLInt_1a7255bafd2fb6310140aebe36d68b9629" compoundref="vector_8h" startline="81">LInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1acdf31865e9c36adc693dd7fa7fadcacc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_ulong_array</definition>
        <argsstring>(ULInt *vec, unsigned long int *arr, size_t allocated_length, size_t active_length)</argsstring>
        <name>init_ulong_array</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned long int *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>allocated_length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>active_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This funciton will initialize an array struct container of type <ref refid="structULInt" kindref="compound">ULInt</ref></para>
<para>/param vec A vector struct container of type <ref refid="structULInt" kindref="compound">ULInt</ref> /param arr An array of type unsigned unsigned long int /param allocated_length The allocated length of the array /param active_length The number of acticaly populated indices in the array arr</para>
<para><programlisting><codeline><highlight class="normal">ULInt<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2};</highlight></codeline>
<codeline><highlight class="normal">init_ulong_array(&amp;arr,<sp/>a,<sp/>5,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Since<sp/>the<sp/>array<sp/>is<sp/>statically<sp/>allocated<sp/>it<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>freed</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="276" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="276" bodyend="281"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1acf325510e03976f12c116ad68c4998ec" compoundref="vector_8h" startline="82">ULInt::allocated_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
        <references refid="structULInt_1abbab1a9c205c4d86fcc53c55174d1515" compoundref="vector_8h" startline="82">ULInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a65e3799f14e154e10bd3ce7a4d4fe184" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_llong_array</definition>
        <argsstring>(LLInt *vec, long long int *arr, size_t allocated_length, size_t active_length)</argsstring>
        <name>init_llong_array</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long long int *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>allocated_length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>active_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This funciton will initialize an array struct container of type <ref refid="structLLInt" kindref="compound">LLInt</ref></para>
<para>/param vec A vector struct container of type <ref refid="structLLInt" kindref="compound">LLInt</ref> /param arr An array of type long long int /param allocated_length The allocated length of the array /param active_length The number of acticaly populated indices in the array arr</para>
<para><programlisting><codeline><highlight class="normal">LLInt<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2};</highlight></codeline>
<codeline><highlight class="normal">init_llong_array(&amp;arr,<sp/>a,<sp/>5,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Since<sp/>the<sp/>array<sp/>is<sp/>statically<sp/>allocated<sp/>it<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>freed</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="284" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="284" bodyend="289"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1a967c631e7b8192f0016845623ae04759" compoundref="vector_8h" startline="83">LLInt::allocated_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
        <references refid="structLLInt_1a2cf879f2b771d70de2ae15401190b50e" compoundref="vector_8h" startline="83">LLInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a39d896e588ac932b9958b4f2e32d97c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_ullong_array</definition>
        <argsstring>(ULLInt *vec, unsigned long long int *arr, size_t allocated_length, size_t active_length)</argsstring>
        <name>init_ullong_array</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned long long int *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>allocated_length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>active_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This funciton will initialize an array struct container of type <ref refid="structULLInt" kindref="compound">ULLInt</ref></para>
<para>/param vec A vector struct container of type <ref refid="structULLInt" kindref="compound">ULLInt</ref> /param arr An array of type unsigned unsigned long long int /param allocated_length The allocated length of the array /param active_length The number of acticaly populated indices in the array arr</para>
<para><programlisting><codeline><highlight class="normal">ULLInt<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2};</highlight></codeline>
<codeline><highlight class="normal">init_ullong_array(&amp;arr,<sp/>a,<sp/>5,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Since<sp/>the<sp/>array<sp/>is<sp/>statically<sp/>allocated<sp/>it<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>freed</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="292" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="292" bodyend="297"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1ac6210c003919694e4fccfc5885c8fcb4" compoundref="vector_8h" startline="84">ULLInt::allocated_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
        <references refid="structULLInt_1acb153b18423bf9465c6a52aa74745df3" compoundref="vector_8h" startline="84">ULLInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a5fcc9ae29ce6bd76060856b388992240" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_float_array</definition>
        <argsstring>(Flt *vec, float *arr, size_t allocated_length, size_t active_length)</argsstring>
        <name>init_float_array</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>allocated_length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>active_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This funciton will initialize an array struct container of type <ref refid="structFlt" kindref="compound">Flt</ref></para>
<para>/param vec A vector struct container of type <ref refid="structFlt" kindref="compound">Flt</ref> /param arr An array of type float /param allocated_length The allocated length of the array /param active_length The number of acticaly populated indices in the array arr</para>
<para><programlisting><codeline><highlight class="normal">Flt<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">float<sp/>a[5]<sp/>=<sp/>{1.1,<sp/>2.2};</highlight></codeline>
<codeline><highlight class="normal">init_float_array(&amp;arr,<sp/>a,<sp/>5,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Since<sp/>the<sp/>array<sp/>is<sp/>statically<sp/>allocated<sp/>it<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>freed</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="300" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="300" bodyend="305"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a917603eeaae1fb22accbfc8d9252a389" compoundref="vector_8h" startline="85">Flt::allocated_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
        <references refid="structFlt_1ad98ce16bf2fff8b16351042bd4135629" compoundref="vector_8h" startline="85">Flt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1af1f590cad5f66c4caded12d7cd92675b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_double_array</definition>
        <argsstring>(Dble *vec, double *arr, size_t allocated_length, size_t active_length)</argsstring>
        <name>init_double_array</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>allocated_length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>active_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This funciton will initialize an array struct container of type <ref refid="structDble" kindref="compound">Dble</ref></para>
<para>/param vec A vector struct container of type <ref refid="structDble" kindref="compound">Dble</ref> /param arr An array of type unsigned double /param allocated_length The allocated length of the array /param active_length The number of acticaly populated indices in the array arr</para>
<para><programlisting><codeline><highlight class="normal">Dble<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">double<sp/>a[5]<sp/>=<sp/>{1.1,<sp/>2.2};</highlight></codeline>
<codeline><highlight class="normal">init_double_array(&amp;arr,<sp/>a,<sp/>5,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Since<sp/>the<sp/>array<sp/>is<sp/>statically<sp/>allocated<sp/>it<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>freed</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="308" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="308" bodyend="313"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a83cb29dfe09183032473cc7ffe005f5d" compoundref="vector_8h" startline="86">Dble::allocated_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
        <references refid="structDble_1a593e6de4412f110b4ffe6fd87a62aa56" compoundref="vector_8h" startline="86">Dble::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ae670278f7c9522a0fdc6b261cb76e5e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_ldouble_array</definition>
        <argsstring>(LDble *vec, long double *arr, size_t allocated_length, size_t active_length)</argsstring>
        <name>init_ldouble_array</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long double *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>allocated_length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>active_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This funciton will initialize an array struct container of type <ref refid="structLDble" kindref="compound">LDble</ref></para>
<para>/param vec A vector struct container of type <ref refid="structLDble" kindref="compound">LDble</ref> /param arr An array of type long double /param allocated_length The allocated length of the array /param active_length The number of acticaly populated indices in the array arr</para>
<para><programlisting><codeline><highlight class="normal">LDble<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">long<sp/>doub;e<sp/>a[5]<sp/>=<sp/>{1.1,<sp/>2.2};</highlight></codeline>
<codeline><highlight class="normal">init_ldouble_array(&amp;arr,<sp/>a,<sp/>5,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Since<sp/>the<sp/>array<sp/>is<sp/>statically<sp/>allocated<sp/>it<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>freed</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="316" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="316" bodyend="321"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a1f0f3fd968cab1acdebf0d43f632633f" compoundref="vector_8h" startline="87">LDble::allocated_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
        <references refid="structLDble_1a25a9e54828403acb6e1e565d00a24582" compoundref="vector_8h" startline="87">LDble::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a85ef363e6bfd0897ffc5ccb10c5eb721" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_char_array</definition>
        <argsstring>(Char *vec, char *arr, size_t allocated_length, size_t active_length)</argsstring>
        <name>init_char_array</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>allocated_length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>active_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This funciton will initialize an array struct container of type <ref refid="structChar" kindref="compound">Char</ref></para>
<para>/param vec A vector struct container of type <ref refid="structChar" kindref="compound">Char</ref> /param arr An array of type unsigned char /param allocated_length The allocated length of the array /param active_length The number of acticaly populated indices in the array arr</para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">char<sp/>a[5]<sp/>=<sp/>{&apos;a&apos;,<sp/>&apos;b&apos;};</highlight></codeline>
<codeline><highlight class="normal">init_char_array(&amp;arr,<sp/>a,<sp/>5,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Since<sp/>the<sp/>array<sp/>is<sp/>statically<sp/>allocated<sp/>it<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>freed</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="324" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="324" bodyend="329"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1ab59977640c7539e5ae251af86d445257" compoundref="vector_8h" startline="88">Char::allocated_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
        <references refid="structChar_1a7231211c3eec109684271510fb25ffe8" compoundref="vector_8h" startline="88">Char::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a2f22fc4866a5c4e5ba5cc10fbf73bb5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_uchar_array</definition>
        <argsstring>(UChar *vec, unsigned char *arr, size_t allocated_length, size_t active_length)</argsstring>
        <name>init_uchar_array</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>allocated_length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>active_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This funciton will initialize an array struct container of type <ref refid="structUChar" kindref="compound">UChar</ref></para>
<para>/param vec A vector struct container of type <ref refid="structUChar" kindref="compound">UChar</ref> /param arr An array of type unsigned unsigned char /param allocated_length The allocated length of the array /param active_length The number of acticaly populated indices in the array arr</para>
<para><programlisting><codeline><highlight class="normal">UChar<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>char<sp/>a[5]<sp/>=<sp/>{&apos;a&apos;,<sp/>&apos;b&apos;};</highlight></codeline>
<codeline><highlight class="normal">init_uchar_array(&amp;arr,<sp/>a,<sp/>5,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Since<sp/>the<sp/>array<sp/>is<sp/>statically<sp/>allocated<sp/>it<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>freed</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="332" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="332" bodyend="337"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="structUChar_1a69ec79fc44d9f3b1455705e24a819f4b" compoundref="vector_8h" startline="89">UChar::allocated_length</references>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
        <references refid="structUChar_1aa1ea52fa832c84586784bb36c1617e44" compoundref="vector_8h" startline="89">UChar::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ad2512ad5d79463921401fee2bf996b10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_bool_array</definition>
        <argsstring>(Bool *vec, bool *arr, size_t allocated_length, size_t active_length)</argsstring>
        <name>init_bool_array</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>allocated_length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>active_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This funciton will initialize an array struct container of type <ref refid="structBool" kindref="compound">Bool</ref></para>
<para>/param vec A vector struct container of type <ref refid="structBool" kindref="compound">Bool</ref> /param arr An array of type unsigned bool /param allocated_length The allocated length of the array /param active_length The number of acticaly populated indices in the array arr</para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">char<sp/>a[5]<sp/>=<sp/>{trye,<sp/>true};</highlight></codeline>
<codeline><highlight class="normal">init_bool_array(&amp;arr,<sp/>a,<sp/>5,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Since<sp/>the<sp/>array<sp/>is<sp/>statically<sp/>allocated<sp/>it<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>freed</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="340" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="340" bodyend="345"/>
        <references refid="structBool_1a5445f6ef94d239208dc797c289fded75" compoundref="vector_8h" startline="90">Bool::active_length</references>
        <references refid="structBool_1a4a353f55a013f72befc666e8d0708212" compoundref="vector_8h" startline="90">Bool::allocated_length</references>
        <references refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" compoundref="vector_8h" startline="90">Bool::array</references>
        <references refid="structBool_1ad781cb2cecf2b060c6337a73ed89def9" compoundref="vector_8h" startline="90">Bool::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a38068c17aa5cf7286175572d43219b8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int push_short_vector</definition>
        <argsstring>(Short *vec, short int value, size_t index)</argsstring>
        <name>push_short_vector</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>short int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="349" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="349" bodyend="379"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1af0b6f4e61e69b8a2f74d42b09b421d88" compoundref="vector_8h" startline="77">Short::allocated_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
        <references refid="structShort_1a20b9c526866b593e8e1ecdc49515e642" compoundref="vector_8h" startline="77">Short::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1a588f2bea0a2ac3d8bf87184d873a2804" compoundref="vector_8c" startline="3020" endline="3029">cumsum_short_vector</referencedby>
        <referencedby refid="vector_8c_1adb305706da4585539cd057cfa0ec0e2c" compoundref="vector_8c" startline="4312" endline="4319">range_short_vector</referencedby>
        <referencedby refid="vector_8c_1a1fbfbfeed7892cd604ac2175048a1ff3" compoundref="vector_8c" startline="4923" endline="4930">repeat_short_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a97670c026df2a05dda5b0c85ebeb4d69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int push_ushort_vector</definition>
        <argsstring>(UShort *vec, unsigned short int value, size_t index)</argsstring>
        <name>push_ushort_vector</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned short int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="382" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="382" bodyend="412"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a0ef4541f3fd3fcee1c0f5809341c84d6" compoundref="vector_8h" startline="78">UShort::allocated_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
        <references refid="structUShort_1a4c5d40034bbd1e9ee0de773d6be0c31e" compoundref="vector_8h" startline="78">UShort::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1a94f7fe260f499b1a18150332e1a0e427" compoundref="vector_8c" startline="3032" endline="3041">cumsum_ushort_vector</referencedby>
        <referencedby refid="vector_8c_1a062892c86bd6a4934d91c804684cf755" compoundref="vector_8c" startline="4322" endline="4330">range_ushort_vector</referencedby>
        <referencedby refid="vector_8c_1a87921615a6088f8e15e74f796abd294e" compoundref="vector_8c" startline="4933" endline="4940">repeat_ushort_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a6baf75dc56de293f3dbdc8ac40934980" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int push_int_vector</definition>
        <argsstring>(Int *vec, int value, size_t index)</argsstring>
        <name>push_int_vector</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="415" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="415" bodyend="445"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a63bea8755b3ce6be7e83970b9ea3bd68" compoundref="vector_8h" startline="79">Int::allocated_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
        <references refid="structInt_1ae124ac3392878072e49fe64e0d07beff" compoundref="vector_8h" startline="79">Int::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1acaf8f7f369483e4dcb9a7af53e79492c" compoundref="vector_8c" startline="3044" endline="3053">cumsum_int_vector</referencedby>
        <referencedby refid="vector_8c_1a184898353e0603cd18372448c8a842e4" compoundref="vector_8c" startline="4333" endline="4340">range_int_vector</referencedby>
        <referencedby refid="vector_8c_1aeb26b3546bef2bb8e5afc6a8c93d23a1" compoundref="vector_8c" startline="4943" endline="4950">repeat_int_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a787fc2bba6112c4ede10d0ec14ab3825" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int push_uint_vector</definition>
        <argsstring>(UInt *vec, unsigned int value, size_t index)</argsstring>
        <name>push_uint_vector</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="448" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="448" bodyend="478"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a05b28efaec93c388e8685403f57a07ce" compoundref="vector_8h" startline="80">UInt::allocated_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
        <references refid="structUInt_1ab87c8b62b4178bf9bcf59d03b066da1c" compoundref="vector_8h" startline="80">UInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1abe44138d94c38f7d65d62f63dddf668b" compoundref="vector_8c" startline="3056" endline="3065">cumsum_uint_vector</referencedby>
        <referencedby refid="vector_8c_1adce9ffbf72bc5678dbd702bf9840f363" compoundref="vector_8c" startline="4343" endline="4351">range_uint_vector</referencedby>
        <referencedby refid="vector_8c_1a1aa1df7f7e77404e77862ca75666165c" compoundref="vector_8c" startline="4953" endline="4960">repeat_uint_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a6135368684b7d740482cfc775417f255" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int push_long_vector</definition>
        <argsstring>(LInt *vec, long int value, size_t index)</argsstring>
        <name>push_long_vector</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="481" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="481" bodyend="511"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a21eec79c847025348ad0082aab6dee52" compoundref="vector_8h" startline="81">LInt::allocated_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
        <references refid="structLInt_1a7255bafd2fb6310140aebe36d68b9629" compoundref="vector_8h" startline="81">LInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1aacdbfadbd42e44ba909b315b43152012" compoundref="vector_8c" startline="3068" endline="3077">cumsum_long_vector</referencedby>
        <referencedby refid="vector_8c_1aed9932998976a7d3ce615075dd5af09b" compoundref="vector_8c" startline="4354" endline="4361">range_long_vector</referencedby>
        <referencedby refid="vector_8c_1a1f0914c2c37de3b81b706c77be31e57a" compoundref="vector_8c" startline="4963" endline="4970">repeat_long_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1aea5f95b56df2836ee553face60351e61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int push_ulong_vector</definition>
        <argsstring>(ULInt *vec, unsigned long int value, size_t index)</argsstring>
        <name>push_ulong_vector</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned long int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="514" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="514" bodyend="544"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1acf325510e03976f12c116ad68c4998ec" compoundref="vector_8h" startline="82">ULInt::allocated_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
        <references refid="structULInt_1abbab1a9c205c4d86fcc53c55174d1515" compoundref="vector_8h" startline="82">ULInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1ae856339059aa7e6f5db1d5bd7de43306" compoundref="vector_8c" startline="3080" endline="3089">cumsum_ulong_vector</referencedby>
        <referencedby refid="vector_8c_1a4fe9caa2febfe85a1107394d8b42c348" compoundref="vector_8c" startline="4364" endline="4372">range_ulong_vector</referencedby>
        <referencedby refid="vector_8c_1a8c9c95f3e41bcaa00e99db959130c509" compoundref="vector_8c" startline="4973" endline="4980">repeat_ulong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a93f7e28f97718d9d7c5c84df61c1466c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int push_llong_vector</definition>
        <argsstring>(LLInt *vec, long long int value, size_t index)</argsstring>
        <name>push_llong_vector</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long long int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="547" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="547" bodyend="577"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1a967c631e7b8192f0016845623ae04759" compoundref="vector_8h" startline="83">LLInt::allocated_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
        <references refid="structLLInt_1a2cf879f2b771d70de2ae15401190b50e" compoundref="vector_8h" startline="83">LLInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1a531b30e8b67bc20cad9865cc3d8afe50" compoundref="vector_8c" startline="3092" endline="3101">cumsum_llong_vector</referencedby>
        <referencedby refid="vector_8c_1afa81d739815cef7056167d48361e0891" compoundref="vector_8c" startline="4375" endline="4382">range_llong_vector</referencedby>
        <referencedby refid="vector_8c_1a7c24fd593c9332ba1779b780b85cc893" compoundref="vector_8c" startline="4983" endline="4990">repeat_llong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a3478a298e62d85cb93f11a78f64d6f80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int push_ullong_vector</definition>
        <argsstring>(ULLInt *vec, unsigned long long int value, size_t index)</argsstring>
        <name>push_ullong_vector</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned long long int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="580" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="580" bodyend="610"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1ac6210c003919694e4fccfc5885c8fcb4" compoundref="vector_8h" startline="84">ULLInt::allocated_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
        <references refid="structULLInt_1acb153b18423bf9465c6a52aa74745df3" compoundref="vector_8h" startline="84">ULLInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1a07bde722230b2f57f1b14304054d1d6a" compoundref="vector_8c" startline="3104" endline="3113">cumsum_ullong_vector</referencedby>
        <referencedby refid="vector_8c_1a6b8d5f1723a1e5e9a0d03da80e93b68e" compoundref="vector_8c" startline="4385" endline="4393">range_ullong_vector</referencedby>
        <referencedby refid="vector_8c_1a6f8e17e6a8930bf7bf0f7422d65eeab5" compoundref="vector_8c" startline="4993" endline="5000">repeat_ullong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a31e02f437f4f9f43d1126e017ae1cac3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int push_float_vector</definition>
        <argsstring>(Flt *vec, float value, size_t index)</argsstring>
        <name>push_float_vector</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="613" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="613" bodyend="643"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a917603eeaae1fb22accbfc8d9252a389" compoundref="vector_8h" startline="85">Flt::allocated_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
        <references refid="structFlt_1ad98ce16bf2fff8b16351042bd4135629" compoundref="vector_8h" startline="85">Flt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1a9ddb912a129b46a9a2f2d147b4a1ddc8" compoundref="vector_8c" startline="3116" endline="3125">cumsum_float_vector</referencedby>
        <referencedby refid="vector_8c_1a85d0392c18b7db31c0a14bc2aa13448c" compoundref="vector_8c" startline="4396" endline="4403">range_float_vector</referencedby>
        <referencedby refid="vector_8c_1a58a085c7febff1b1bd9e6ec90510b36a" compoundref="vector_8c" startline="5003" endline="5010">repeat_float_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ab312c467d82a0fccc66cbb89a6b8de5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int push_double_vector</definition>
        <argsstring>(Dble *vec, double value, size_t index)</argsstring>
        <name>push_double_vector</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="646" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="646" bodyend="676"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a83cb29dfe09183032473cc7ffe005f5d" compoundref="vector_8h" startline="86">Dble::allocated_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
        <references refid="structDble_1a593e6de4412f110b4ffe6fd87a62aa56" compoundref="vector_8h" startline="86">Dble::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1ae8512eab3bf15409bda6bce1d6ec0380" compoundref="vector_8c" startline="3128" endline="3137">cumsum_double_vector</referencedby>
        <referencedby refid="vector_8c_1a636afa2f2e2af7dbbd34b7cb42d11163" compoundref="vector_8c" startline="4406" endline="4414">range_double_vector</referencedby>
        <referencedby refid="vector_8c_1ac2a03364dd0dc653854b1f70101514c6" compoundref="vector_8c" startline="5013" endline="5020">repeat_double_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ad001560a2793c40efb1c64532cefe2e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int push_ldouble_vector</definition>
        <argsstring>(LDble *vec, long double value, size_t index)</argsstring>
        <name>push_ldouble_vector</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="679" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="679" bodyend="709"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a1f0f3fd968cab1acdebf0d43f632633f" compoundref="vector_8h" startline="87">LDble::allocated_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
        <references refid="structLDble_1a25a9e54828403acb6e1e565d00a24582" compoundref="vector_8h" startline="87">LDble::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1ae0f64fd00879ff39b5ffbca0e80c197b" compoundref="vector_8c" startline="3140" endline="3149">cumsum_ldouble_vector</referencedby>
        <referencedby refid="vector_8c_1ae5505a9a69a6701bcafa4b92eb06055f" compoundref="vector_8c" startline="4417" endline="4425">range_ldouble_vector</referencedby>
        <referencedby refid="vector_8c_1a34a56cde6bc6f420f8b9063bf87232e1" compoundref="vector_8c" startline="5023" endline="5030">repeat_ldouble_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ab4f076e9a6e7d0795c2c3a0216c5c97e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int push_char_vector</definition>
        <argsstring>(Char *vec, char value, size_t index)</argsstring>
        <name>push_char_vector</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>char</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="712" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="712" bodyend="742"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1ab59977640c7539e5ae251af86d445257" compoundref="vector_8h" startline="88">Char::allocated_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
        <references refid="structChar_1a7231211c3eec109684271510fb25ffe8" compoundref="vector_8h" startline="88">Char::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1a877296aab1e625bc7b103322f6b93b14" compoundref="vector_8c" startline="2996" endline="3005">cumsum_char_vector</referencedby>
        <referencedby refid="vector_8c_1ac3589c6090a8dc24ffe4211dbb42b15f" compoundref="vector_8c" startline="4292" endline="4299">range_char_vector</referencedby>
        <referencedby refid="vector_8c_1aece15dcc8e9d3cf0fa0cb65c0b7a05f2" compoundref="vector_8c" startline="5043" endline="5050">repeat_char_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1acc6fd3b434ba25d3473adff60160500b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int push_uchar_vector</definition>
        <argsstring>(UChar *vec, unsigned char value, size_t index)</argsstring>
        <name>push_uchar_vector</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="745" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="745" bodyend="775"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="structUChar_1a69ec79fc44d9f3b1455705e24a819f4b" compoundref="vector_8h" startline="89">UChar::allocated_length</references>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
        <references refid="structUChar_1aa1ea52fa832c84586784bb36c1617e44" compoundref="vector_8h" startline="89">UChar::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1a2850df1b78d17fd2e45847e8bf1e51c2" compoundref="vector_8c" startline="3008" endline="3017">cumsum_uchar_vector</referencedby>
        <referencedby refid="vector_8c_1a14f0626112aa000e6739a14556f761ed" compoundref="vector_8c" startline="4302" endline="4309">range_uchar_vector</referencedby>
        <referencedby refid="vector_8c_1aa03b84f9a537aa95ab335f38448051a0" compoundref="vector_8c" startline="5053" endline="5060">repeat_uchar_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a66a1a1c291efbab607defa13421167dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int push_bool_vector</definition>
        <argsstring>(Bool *vec, bool value, size_t index)</argsstring>
        <name>push_bool_vector</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="778" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="778" bodyend="808"/>
        <references refid="structBool_1a5445f6ef94d239208dc797c289fded75" compoundref="vector_8h" startline="90">Bool::active_length</references>
        <references refid="structBool_1a4a353f55a013f72befc666e8d0708212" compoundref="vector_8h" startline="90">Bool::allocated_length</references>
        <references refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" compoundref="vector_8h" startline="90">Bool::array</references>
        <references refid="structBool_1ad781cb2cecf2b060c6337a73ed89def9" compoundref="vector_8h" startline="90">Bool::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1a10df883121d1f71d331ae6ba273357f1" compoundref="vector_8c" startline="5033" endline="5040">repeat_bool_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a078616c26d55c1ddb2ec4c551298a4f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int push_string_vector</definition>
        <argsstring>(String *vec, char *value, size_t index)</argsstring>
        <name>push_string_vector</name>
        <param>
          <type><ref refid="structString" kindref="compound">String</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will push a single string to an existing string vector container</para>
<para>/param vec A vector struct of type <ref refid="structString" kindref="compound">String</ref> /param value A string /param index The index where the string is to be pushed</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;print.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">String<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_string_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(&amp;vec,<sp/>&quot;Hello&quot;,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(&amp;vec,<sp/>&quot;Goodbye&quot;,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(&amp;vec,<sp/>&quot;Again&quot;,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>Again,<sp/>Hello,<sp/>Goodbye<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_string_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="811" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="811" bodyend="829"/>
        <references refid="structString_1a706ffaf2f520d46074dd99e7896d6673" compoundref="vector_8h" startline="97">String::active_length</references>
        <references refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" compoundref="vector_8h" startline="96">String::array</references>
        <referencedby refid="vector_8c_1a2cb84d3851679202a04f76066bc80a6e" compoundref="vector_8c" startline="4589" endline="4596">copy_string_vector</referencedby>
        <referencedby refid="vector_8c_1a9f6bd7ebba53e2d4eb0b8e3d8931029c" compoundref="vector_8c" startline="5063" endline="5070">repeat_string_vector</referencedby>
        <referencedby refid="vector_8c_1a1556bb53212c3c454a2ddb3f4c2f4c8a" compoundref="vector_8c" startline="1671" endline="1680">replace_string_vector_values</referencedby>
        <referencedby refid="vector_8c_1a6297710c0ac2122db93e47a260e96ad8" compoundref="vector_8c" startline="2277" endline="2288">reverse_string_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a2ed595a869e30a4c834c1d2cf5b934ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int insert_short_vector</definition>
        <argsstring>(Short *vec, short int *elements, size_t num_indices, size_t index)</argsstring>
        <name>insert_short_vector</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>short int *</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_indices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will allow a user to insert a scalar short or an array of short values into a vector struct of <ref refid="structShort" kindref="compound">Short</ref> type.</para>
<para>/param vec A vector struct of type <ref refid="structShort" kindref="compound">Short</ref> /param elements An array or scalar of type short /param num_indices The number of data points in elements /param index The index where the scalar or array is to be inserted</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;print.h&quot;*</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Short<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_short_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">short<sp/>a[3]<sp/>=<sp/>{5,<sp/>6,<sp/>7};</highlight></codeline>
<codeline><highlight class="normal">insert_short_vector(vec,<sp/>a,<sp/>3,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>5,<sp/>6,<sp/>7,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_short_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="833" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="833" bodyend="866"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1af0b6f4e61e69b8a2f74d42b09b421d88" compoundref="vector_8h" startline="77">Short::allocated_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
        <references refid="structShort_1a20b9c526866b593e8e1ecdc49515e642" compoundref="vector_8h" startline="77">Short::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1ab88c9075f7ac94dd8656a8eec4a14a94" compoundref="vector_8c" startline="4477" endline="4482">copy_short_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1aa8495c3a316b6d93c8697d194c86fc2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int insert_ushort_vector</definition>
        <argsstring>(UShort *vec, unsigned short int *elements, size_t num_indices, size_t index)</argsstring>
        <name>insert_ushort_vector</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned short int *</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_indices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will allow a user to insert a scalar unsigned short or an array of unsigned short values into a vector struct of <ref refid="structUShort" kindref="compound">UShort</ref> type.</para>
<para>/param vec A vector struct of type <ref refid="structUShort" kindref="compound">UShort</ref> /param elements An array or scalar of type unsigned short /param num_indices The number of data points in elements /param index The index where the scalar or array is to be inserted</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;print.h&quot;*</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">UShort<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ushort_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>short<sp/>a[3]<sp/>=<sp/>{5,<sp/>6,<sp/>7};</highlight></codeline>
<codeline><highlight class="normal">insert_ushort_vector(vec,<sp/>a,<sp/>3,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>5,<sp/>6,<sp/>7,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ushort_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="869" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="869" bodyend="902"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a0ef4541f3fd3fcee1c0f5809341c84d6" compoundref="vector_8h" startline="78">UShort::allocated_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
        <references refid="structUShort_1a4c5d40034bbd1e9ee0de773d6be0c31e" compoundref="vector_8h" startline="78">UShort::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1af70602cee86af9597513bc67b2878244" compoundref="vector_8c" startline="4485" endline="4490">copy_ushort_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a0acf8b86d4a95be517c7af80f8eff4ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int insert_int_vector</definition>
        <argsstring>(Int *vec, int *elements, size_t num_indices, size_t index)</argsstring>
        <name>insert_int_vector</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_indices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will allow a user to insert a scalar int or an array of int values into a vector struct of <ref refid="structInt" kindref="compound">Int</ref> type.</para>
<para>/param vec A vector struct of type <ref refid="structInt" kindref="compound">Int</ref> /param elements An array or scalar of type int /param num_indices The number of data points in elements /param index The index where the scalar or array is to be inserted</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;print.h&quot;*</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Int<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_int_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>a[3]<sp/>=<sp/>{5,<sp/>6,<sp/>7};</highlight></codeline>
<codeline><highlight class="normal">insert_int_vector(vec,<sp/>a,<sp/>3,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>5,<sp/>6,<sp/>7,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_int_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="905" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="905" bodyend="938"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a63bea8755b3ce6be7e83970b9ea3bd68" compoundref="vector_8h" startline="79">Int::allocated_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
        <references refid="structInt_1ae124ac3392878072e49fe64e0d07beff" compoundref="vector_8h" startline="79">Int::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1a5fd73621c9da27949814495f00a3296f" compoundref="vector_8c" startline="4493" endline="4498">copy_int_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ad78d40537dece17df4f506fd6ba7dc34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int insert_uint_vector</definition>
        <argsstring>(UInt *vec, unsigned int *elements, size_t num_indices, size_t index)</argsstring>
        <name>insert_uint_vector</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_indices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will allow a user to insert a scalar unsigned int or an array of unsigned int values into a vector struct of <ref refid="structUInt" kindref="compound">UInt</ref> type.</para>
<para>/param vec A vector struct of type <ref refid="structUInt" kindref="compound">UInt</ref> /param elements An array or scalar of type unsigned int /param num_indices The number of data points in elements /param index The index where the scalar or array is to be inserted</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;print.h&quot;*</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">UInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uint_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>int<sp/>a[3]<sp/>=<sp/>{5,<sp/>6,<sp/>7};</highlight></codeline>
<codeline><highlight class="normal">insert_uint_vector(vec,<sp/>a,<sp/>3,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>5,<sp/>6,<sp/>7,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uint_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="941" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="941" bodyend="974"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a05b28efaec93c388e8685403f57a07ce" compoundref="vector_8h" startline="80">UInt::allocated_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
        <references refid="structUInt_1ab87c8b62b4178bf9bcf59d03b066da1c" compoundref="vector_8h" startline="80">UInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1a6bf7c67135858a07103fff23436b7d77" compoundref="vector_8c" startline="4501" endline="4506">copy_uint_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ab5d840518e5e7bbd9ed243681b7124f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int insert_long_vector</definition>
        <argsstring>(LInt *vec, long int *elements, size_t num_indices, size_t index)</argsstring>
        <name>insert_long_vector</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long int *</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_indices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will allow a user to insert a scalar long or an array of long values into a vector struct of <ref refid="structLInt" kindref="compound">LInt</ref> type.</para>
<para>/param vec A vector struct of type <ref refid="structLInt" kindref="compound">LInt</ref> /param elements An array or scalar of type long int /param num_indices The number of data points in elements /param index The index where the scalar or array is to be inserted</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;print.h&quot;*</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">LInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_long_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>int<sp/>a[3]<sp/>=<sp/>{5,<sp/>6,<sp/>7};</highlight></codeline>
<codeline><highlight class="normal">insert_long_vector(vec,<sp/>a,<sp/>3,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>5,<sp/>6,<sp/>7,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_long_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="977" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="977" bodyend="1010"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a21eec79c847025348ad0082aab6dee52" compoundref="vector_8h" startline="81">LInt::allocated_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
        <references refid="structLInt_1a7255bafd2fb6310140aebe36d68b9629" compoundref="vector_8h" startline="81">LInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1abc614587816c37e5dfd70c2a832da165" compoundref="vector_8c" startline="4509" endline="4514">copy_long_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1aa419c32bb276bfe866787e1744669b94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int insert_ulong_vector</definition>
        <argsstring>(ULInt *vec, unsigned long int *elements, size_t num_indices, size_t index)</argsstring>
        <name>insert_ulong_vector</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned long int *</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_indices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will allow a user to insert a scalar unsigned long or an array of unsigned long values into a vector struct of <ref refid="structULInt" kindref="compound">ULInt</ref> type.</para>
<para>/param vec A vector struct of type <ref refid="structULInt" kindref="compound">ULInt</ref> /param elements An array or scalar of type unsigned long int /param num_indices The number of data points in elements /param index The index where the scalar or array is to be inserted</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;print.h&quot;*</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ULInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ulong_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>int<sp/>a[3]<sp/>=<sp/>{5,<sp/>6,<sp/>7};</highlight></codeline>
<codeline><highlight class="normal">insert_ulong_vector(vec,<sp/>a,<sp/>3,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>5,<sp/>6,<sp/>7,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ulong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1013" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1013" bodyend="1046"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1acf325510e03976f12c116ad68c4998ec" compoundref="vector_8h" startline="82">ULInt::allocated_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
        <references refid="structULInt_1abbab1a9c205c4d86fcc53c55174d1515" compoundref="vector_8h" startline="82">ULInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1a31f85f1454385a608eebc7d150417b7c" compoundref="vector_8c" startline="4517" endline="4522">copy_ulong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a9817d90055331624db7529c5d74a80ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int insert_llong_vector</definition>
        <argsstring>(LLInt *vec, long long int *elements, size_t num_indices, size_t index)</argsstring>
        <name>insert_llong_vector</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long long int *</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_indices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will allow a user to insert a scalar long long or an array of long long values into a vector struct of <ref refid="structLLInt" kindref="compound">LLInt</ref> type.</para>
<para>/param vec A vector struct of type <ref refid="structLLInt" kindref="compound">LLInt</ref> /param elements An array or scalar of type long long int /param num_indices The number of data points in elements /param index The index where the scalar or array is to be inserted</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;print.h&quot;*</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">LLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_llong_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>long<sp/>int<sp/>a[3]<sp/>=<sp/>{5,<sp/>6,<sp/>7};</highlight></codeline>
<codeline><highlight class="normal">insert_llong_vector(vec,<sp/>a,<sp/>3,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>5,<sp/>6,<sp/>7,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_llong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1049" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1049" bodyend="1082"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1a967c631e7b8192f0016845623ae04759" compoundref="vector_8h" startline="83">LLInt::allocated_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
        <references refid="structLLInt_1a2cf879f2b771d70de2ae15401190b50e" compoundref="vector_8h" startline="83">LLInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1a2a8c6a77d383c5251686fc600c829005" compoundref="vector_8c" startline="4525" endline="4530">copy_llong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1afccda80cf8e96d76846df29a256f6974" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int insert_ullong_vector</definition>
        <argsstring>(ULLInt *vec, unsigned long long int *elements, size_t num_indices, size_t index)</argsstring>
        <name>insert_ullong_vector</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned long long int *</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_indices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will allow a user to insert a scalar unsigned long long or an array of unsigned long long values into a vector struct of <ref refid="structULLInt" kindref="compound">ULLInt</ref> type.</para>
<para>/param vec A vector struct of type <ref refid="structULLInt" kindref="compound">ULLInt</ref> /param elements An array or scalar of type unsigned long long int /param num_indices The number of data points in elements /param index The index where the scalar or array is to be inserted</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;print.h&quot;*</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ULLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ullong_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>long<sp/>int<sp/>a[3]<sp/>=<sp/>{5,<sp/>6,<sp/>7};</highlight></codeline>
<codeline><highlight class="normal">insert_ullong_vector(vec,<sp/>a,<sp/>3,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>5,<sp/>6,<sp/>7,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ullong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1085" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1085" bodyend="1118"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1ac6210c003919694e4fccfc5885c8fcb4" compoundref="vector_8h" startline="84">ULLInt::allocated_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
        <references refid="structULLInt_1acb153b18423bf9465c6a52aa74745df3" compoundref="vector_8h" startline="84">ULLInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1abe7076983c8f386b305b615137dcd249" compoundref="vector_8c" startline="4533" endline="4538">copy_ullong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a17ee89c38df38d9d1d5b0cb2e33266d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int insert_float_vector</definition>
        <argsstring>(Flt *vec, float *elements, size_t num_indices, size_t index)</argsstring>
        <name>insert_float_vector</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_indices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will allow a user to insert a scalar float or an array of float values into a vector struct of <ref refid="structFlt" kindref="compound">Flt</ref> type.</para>
<para>/param vec A vector struct of type <ref refid="structFlt" kindref="compound">Flt</ref> /param elements An array or scalar of type float /param num_indices The number of data points in elements /param index The index where the scalar or array is to be inserted</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;print.h&quot;*</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Flt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_float_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>a[3]<sp/>=<sp/>{5,<sp/>6,<sp/>7};</highlight></codeline>
<codeline><highlight class="normal">insert_float_vector(vec,<sp/>a,<sp/>3,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>5,<sp/>6,<sp/>7,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_float_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1121" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1121" bodyend="1154"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a917603eeaae1fb22accbfc8d9252a389" compoundref="vector_8h" startline="85">Flt::allocated_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
        <references refid="structFlt_1ad98ce16bf2fff8b16351042bd4135629" compoundref="vector_8h" startline="85">Flt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1a440353dc4ac989fb88b34e7f5649dd05" compoundref="vector_8c" startline="4541" endline="4546">copy_float_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1af1e86e2b45b0339cc18ba5b35bf01132" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int insert_double_vector</definition>
        <argsstring>(Dble *vec, double *elements, size_t num_indices, size_t index)</argsstring>
        <name>insert_double_vector</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_indices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will allow a user to insert a scalar double or an array of double values into a vector struct of <ref refid="structDble" kindref="compound">Dble</ref> type.</para>
<para>/param vec A vector struct of type <ref refid="structDble" kindref="compound">Dble</ref> /param elements An array or scalar of type double /param num_indices The number of data points in elements /param index The index where the scalar or array is to be inserted</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;print.h&quot;*</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Dble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_double_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>a[3]<sp/>=<sp/>{5,<sp/>6,<sp/>7};</highlight></codeline>
<codeline><highlight class="normal">insert_double_vector(vec,<sp/>a,<sp/>3,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>5,<sp/>6,<sp/>7,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_double_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1157" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1157" bodyend="1190"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a83cb29dfe09183032473cc7ffe005f5d" compoundref="vector_8h" startline="86">Dble::allocated_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
        <references refid="structDble_1a593e6de4412f110b4ffe6fd87a62aa56" compoundref="vector_8h" startline="86">Dble::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1a2d51a8a92a5c0e73345ade59b126ff35" compoundref="vector_8c" startline="4549" endline="4554">copy_double_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a0ec3e3b802f62c5f9cdd9b7d197bd4a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int insert_ldouble_vector</definition>
        <argsstring>(LDble *vec, long double *elements, size_t num_indices, size_t index)</argsstring>
        <name>insert_ldouble_vector</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long double *</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_indices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will allow a user to insert a scalar long double or an array of long double values into a vector struct of <ref refid="structLDble" kindref="compound">LDble</ref> type.</para>
<para>/param vec A vector struct of type <ref refid="structLDble" kindref="compound">LDble</ref> /param elements An array or scalar of type long double /param num_indices The number of data points in elements /param index The index where the scalar or array is to be inserted</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;print.h&quot;*</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">LDble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ldouble_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>a[3]<sp/>=<sp/>{5,<sp/>6,<sp/>7};</highlight></codeline>
<codeline><highlight class="normal">insert_ldouble_vector(vec,<sp/>a,<sp/>3,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>5,<sp/>6,<sp/>7,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ldouble_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1193" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1193" bodyend="1226"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a1f0f3fd968cab1acdebf0d43f632633f" compoundref="vector_8h" startline="87">LDble::allocated_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
        <references refid="structLDble_1a25a9e54828403acb6e1e565d00a24582" compoundref="vector_8h" startline="87">LDble::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1a3fa3120b9c06e25fc840f90c7e10c5a6" compoundref="vector_8c" startline="4557" endline="4562">copy_ldouble_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a9e9db9d87d5a9f3bb6dae1ba5668ef12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int insert_char_vector</definition>
        <argsstring>(Char *vec, char *elements, size_t num_indices, size_t index)</argsstring>
        <name>insert_char_vector</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_indices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will allow a user to insert a scalar char or an array of char values into a vector struct of <ref refid="structChar" kindref="compound">Char</ref> type.</para>
<para>/param vec A vector struct of type <ref refid="structChar" kindref="compound">Char</ref> /param elements An array or scalar of type char /param num_indices The number of data points in elements /param index The index where the scalar or array is to be inserted</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;print.h&quot;*</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_char_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>&apos;a&apos;);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>&apos;b&apos;);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>&apos;c&apos;;</highlight></codeline>
<codeline><highlight class="normal">char<sp/>a[3]<sp/>=<sp/>{&apos;x&apos;,<sp/>&apos;y&apos;,<sp/>&apos;z&apos;};</highlight></codeline>
<codeline><highlight class="normal">insert_ldouble_vector(vec,<sp/>a,<sp/>3,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>a,<sp/>x,<sp/>y,<sp/>z,<sp/>b,<sp/>c<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1229" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1229" bodyend="1262"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1ab59977640c7539e5ae251af86d445257" compoundref="vector_8h" startline="88">Char::allocated_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
        <references refid="structChar_1a7231211c3eec109684271510fb25ffe8" compoundref="vector_8h" startline="88">Char::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1a430a540aea6caac8002281b9a2ddbf7a" compoundref="vector_8c" startline="4565" endline="4570">copy_char_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ae5b1c45f4d2083c6d87f217646609a2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int insert_uchar_vector</definition>
        <argsstring>(UChar *vec, unsigned char *elements, size_t num_indices, size_t index)</argsstring>
        <name>insert_uchar_vector</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_indices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will allow a user to insert a scalar char or an array of char values into a vector struct of <ref refid="structChar" kindref="compound">Char</ref> type.</para>
<para>/param vec A vector struct of type <ref refid="structChar" kindref="compound">Char</ref> /param elements An array or scalar of type char /param num_indices The number of data points in elements /param index The index where the scalar or array is to be inserted</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;print.h&quot;*</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">UChar<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uchar_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>&apos;a&apos;);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>&apos;b&apos;);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>&apos;c&apos;;</highlight></codeline>
<codeline><highlight class="normal">char<sp/>a[3]<sp/>=<sp/>{&apos;x&apos;,<sp/>&apos;y&apos;,<sp/>&apos;z&apos;};</highlight></codeline>
<codeline><highlight class="normal">insert_uchar_vector(vec,<sp/>a,<sp/>3,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>a,<sp/>x,<sp/>y,<sp/>z,<sp/>b,<sp/>c<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1265" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1265" bodyend="1298"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="structUChar_1a69ec79fc44d9f3b1455705e24a819f4b" compoundref="vector_8h" startline="89">UChar::allocated_length</references>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
        <references refid="structUChar_1aa1ea52fa832c84586784bb36c1617e44" compoundref="vector_8h" startline="89">UChar::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1ac3e7f4298d195586bfc0cf8b0fc1a053" compoundref="vector_8c" startline="4573" endline="4578">copy_uchar_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ab344e3b36aa397f037cb2c573e1d3aff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int insert_bool_vector</definition>
        <argsstring>(Bool *vec, bool *elements, size_t num_indices, size_t index)</argsstring>
        <name>insert_bool_vector</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_indices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will allow a user to insert a scalar char or an array of bool values into a vector struct of <ref refid="structBool" kindref="compound">Bool</ref> type.</para>
<para>/param vec A vector struct of type <ref refid="structBool" kindref="compound">Bool</ref> /param elements An array or scalar of type bool /param num_indices The number of data points in elements /param index The index where the scalar or array is to be inserted</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;print.h&quot;*</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Bool<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_bool_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>false;</highlight></codeline>
<codeline><highlight class="normal">char<sp/>a[3]<sp/>=<sp/>{false,<sp/>false,<sp/>false};</highlight></codeline>
<codeline><highlight class="normal">insert_bool_vector(vec,<sp/>a,<sp/>3,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>true,<sp/>false,<sp/>false,<sp/>false,<sp/>true,<sp/>false<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_bool_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1301" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1301" bodyend="1334"/>
        <references refid="structBool_1a5445f6ef94d239208dc797c289fded75" compoundref="vector_8h" startline="90">Bool::active_length</references>
        <references refid="structBool_1a4a353f55a013f72befc666e8d0708212" compoundref="vector_8h" startline="90">Bool::allocated_length</references>
        <references refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" compoundref="vector_8h" startline="90">Bool::array</references>
        <references refid="structBool_1ad781cb2cecf2b060c6337a73ed89def9" compoundref="vector_8h" startline="90">Bool::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1a2e6c2d82128d66d5fe6800ee6ad9d277" compoundref="vector_8c" startline="4581" endline="4586">copy_bool_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ac5498955b573e63b86b34a1fdd93e391" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int insert_string_vector</definition>
        <argsstring>(String *vec, char **values, size_t length, size_t index)</argsstring>
        <name>insert_string_vector</name>
        <param>
          <type><ref refid="structString" kindref="compound">String</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>elements</declname>
          <defname>values</defname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_indices</declname>
          <defname>length</defname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will allow a user to insert a scalar char or an array of bool values into a vector struct of <ref refid="structString" kindref="compound">String</ref> type.</para>
<para>/param vec A vector struct of type <ref refid="structString" kindref="compound">String</ref> /param elements An array or scalar of type char* /param num_indices The number of data points in elements /param index The index where the scalar or array is to be inserted</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;print.h&quot;*</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">String<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_string_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>&quot;One&quot;);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>&quot;Two&quot;);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>&quot;Three&quot;);</highlight></codeline>
<codeline><highlight class="normal">char<sp/>*a[3]<sp/>=<sp/>{&quot;Four&quot;,<sp/>&quot;Five&quot;,<sp/>&quot;Six&quot;};</highlight></codeline>
<codeline><highlight class="normal">insert_string_vector(vec,<sp/>a,<sp/>3,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>One,<sp/>Four,<sp/>Five,<sp/>Six,<sp/>Two,<sp/>Three<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_string_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1337" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1337" bodyend="1361"/>
        <references refid="structString_1a706ffaf2f520d46074dd99e7896d6673" compoundref="vector_8h" startline="97">String::active_length</references>
        <references refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" compoundref="vector_8h" startline="96">String::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a90c0d394579f3950b22adabb66f153e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop_short_vector_index</definition>
        <argsstring>(Short *vec, size_t index)</argsstring>
        <name>pop_short_vector_index</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>pop_type_stack_index functions </para>
        </briefdescription>
        <detaileddescription>
<para>This function will pop a value from an <ref refid="structShort" kindref="compound">Short</ref> struct container as a user defined index. This function runs fastest, when the index is the last populated index.</para>
<para>/param vec An struct container of type <ref refid="structShort" kindref="compound">Short</ref> /param index The index from which data is to be popped.</para>
<para><programlisting><codeline><highlight class="normal">Short<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_short_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">pop_short_vector_index(vec,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">pop_short_vector_index(vec,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>2,<sp/>3,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_short_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1366" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1366" bodyend="1376"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
        <referencedby refid="vector_8c_1a35b16d98a38d37826ee118f4860d680a" compoundref="vector_8c" startline="1881" endline="1890">delete_short_vector_duplicates</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ab5f9826948a1e75b6ffa74b2e801f8c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop_ushort_vector_index</definition>
        <argsstring>(UShort *vec, size_t index)</argsstring>
        <name>pop_ushort_vector_index</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will pop a value from an <ref refid="structUShort" kindref="compound">UShort</ref> struct container as a user defined index. This function runs fastest, when the index is the last populated index.</para>
<para>/param vec An struct container of type <ref refid="structUShort" kindref="compound">UShort</ref> /param index The index from which data is to be popped.</para>
<para><programlisting><codeline><highlight class="normal">UShort<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ushort_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">pop_ushort_vector_index(vec,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">pop_ushort_vector_index(vec,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>2,<sp/>3,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ushort_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1379" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1379" bodyend="1389"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
        <referencedby refid="vector_8c_1a372a58405f86fa4ef22f53af37408017" compoundref="vector_8c" startline="1893" endline="1902">delete_ushort_vector_duplicates</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1af0ecebd36b313d07d43f40698bd5508f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop_int_vector_index</definition>
        <argsstring>(Int *vec, size_t index)</argsstring>
        <name>pop_int_vector_index</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will pop a value from an <ref refid="structInt" kindref="compound">Int</ref> struct container as a user defined index. This function runs fastest, when the index is the last populated index.</para>
<para>/param vec An struct container of type <ref refid="structInt" kindref="compound">Int</ref> /param index The index from which data is to be popped.</para>
<para><programlisting><codeline><highlight class="normal">Int<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_int_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">pop_int_vector_index(vec,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">pop_int_vector_index(vec,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>2,<sp/>3,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_int_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1392" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1392" bodyend="1402"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
        <referencedby refid="vector_8c_1a68a325016f45777566e1eae4b15c4238" compoundref="vector_8c" startline="1905" endline="1914">delete_int_vector_duplicates</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1aea61eee2cd7481c1d34d13ba4a27e669" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop_uint_vector_index</definition>
        <argsstring>(UInt *vec, size_t index)</argsstring>
        <name>pop_uint_vector_index</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will pop a value from an <ref refid="structUInt" kindref="compound">UInt</ref> struct container as a user defined index. This function runs fastest, when the index is the last populated index.</para>
<para>/param vec An struct container of type <ref refid="structUInt" kindref="compound">UInt</ref> /param index The index from which data is to be popped.</para>
<para><programlisting><codeline><highlight class="normal">UInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uint_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">pop_uint_vector_index(vec,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">pop_uint_vector_index(vec,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>2,<sp/>3,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uint_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1405" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1405" bodyend="1415"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
        <referencedby refid="vector_8c_1ab5a49e7e86d86796744395431d475f74" compoundref="vector_8c" startline="1917" endline="1926">delete_uint_vector_duplicates</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ade7d072b4cbbed3560461122ff9bf2d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop_long_vector_index</definition>
        <argsstring>(LInt *vec, size_t index)</argsstring>
        <name>pop_long_vector_index</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will pop a value from an <ref refid="structLInt" kindref="compound">LInt</ref> struct container as a user defined index. This function runs fastest, when the index is the last populated index.</para>
<para>/param vec An struct container of type <ref refid="structLInt" kindref="compound">LInt</ref> /param index The index from which data is to be popped.</para>
<para><programlisting><codeline><highlight class="normal">LInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_long_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">pop_long_vector_index(vec,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">pop_long_vector_index(vec,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>2,<sp/>3,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_long_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1418" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1418" bodyend="1428"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
        <referencedby refid="vector_8c_1a10ee633f27cbd6252d41ffd0761f6392" compoundref="vector_8c" startline="1929" endline="1938">delete_long_vector_duplicates</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1aee6e8f2b009cc7205dfd8c143b8e9839" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop_ulong_vector_index</definition>
        <argsstring>(ULInt *vec, size_t index)</argsstring>
        <name>pop_ulong_vector_index</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will pop a value from an <ref refid="structULInt" kindref="compound">ULInt</ref> struct container as a user defined index. This function runs fastest, when the index is the last populated index.</para>
<para>/param vec An struct container of type <ref refid="structULInt" kindref="compound">ULInt</ref> /param index The index from which data is to be popped.</para>
<para><programlisting><codeline><highlight class="normal">ULInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ulong_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">pop_ulong_vector_index(vec,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">pop_ulong_vector_index(vec,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>2,<sp/>3,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ulong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1431" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1431" bodyend="1441"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
        <referencedby refid="vector_8c_1aa7b0890be4e8157712930fedaf437c8a" compoundref="vector_8c" startline="1941" endline="1950">delete_ulong_vector_duplicates</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a6475916b10de913b8859fbd0b8312557" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop_llong_vector_index</definition>
        <argsstring>(LLInt *vec, size_t index)</argsstring>
        <name>pop_llong_vector_index</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will pop a value from an <ref refid="structLLInt" kindref="compound">LLInt</ref> struct container as a user defined index. This function runs fastest, when the index is the last populated index.</para>
<para>/param vec An struct container of type <ref refid="structLLInt" kindref="compound">LLInt</ref> /param index The index from which data is to be popped.</para>
<para><programlisting><codeline><highlight class="normal">LLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_llong_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">pop_llong_vector_index(vec,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">pop_llong_vector_index(vec,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>2,<sp/>3,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_llong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1444" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1444" bodyend="1454"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
        <referencedby refid="vector_8c_1a8f895e83e3b4e24dfdd253508da61875" compoundref="vector_8c" startline="1953" endline="1962">delete_llong_vector_duplicates</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a52f4d32e9312b40967f4c0ee3de88e7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop_ullong_vector_index</definition>
        <argsstring>(ULLInt *vec, size_t index)</argsstring>
        <name>pop_ullong_vector_index</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will pop a value from an <ref refid="structULLInt" kindref="compound">ULLInt</ref> struct container as a user defined index. This function runs fastest, when the index is the last populated index.</para>
<para>/param vec An struct container of type <ref refid="structULLInt" kindref="compound">ULLInt</ref> /param index The index from which data is to be popped.</para>
<para><programlisting><codeline><highlight class="normal">ULLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ullong_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">pop_ullong_vector_index(vec,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">pop_ullong_vector_index(vec,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>2,<sp/>3,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ullong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1457" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1457" bodyend="1467"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
        <referencedby refid="vector_8c_1a91794ceff19b304073f15ca82fe38b0b" compoundref="vector_8c" startline="1965" endline="1974">delete_ullong_vector_duplicates</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a7f179d98deb7852196afc7e3d26ef06d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop_float_vector_index</definition>
        <argsstring>(Flt *vec, size_t index)</argsstring>
        <name>pop_float_vector_index</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will pop a value from an <ref refid="structFlt" kindref="compound">Flt</ref> struct container as a user defined index. This function runs fastest, when the index is the last populated index.</para>
<para>/param vec An struct container of type <ref refid="structFlt" kindref="compound">Flt</ref> /param index The index from which data is to be popped.</para>
<para><programlisting><codeline><highlight class="normal">Flt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_float_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">pop_float_vector_index(vec,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">pop_float_vector_index(vec,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>2,<sp/>3,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_float_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1470" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1470" bodyend="1480"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
        <referencedby refid="vector_8c_1a49e7b8e0e17f4570f95875965ea8c2d6" compoundref="vector_8c" startline="1977" endline="1986">delete_float_vector_duplicates</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a8d2545eb603560d67e5c481075e5d0fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop_double_vector_index</definition>
        <argsstring>(Dble *vec, size_t index)</argsstring>
        <name>pop_double_vector_index</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will pop a value from an <ref refid="structDble" kindref="compound">Dble</ref> struct container as a user defined index. This function runs fastest, when the index is the last populated index.</para>
<para>/param vec An struct container of type <ref refid="structDble" kindref="compound">Dble</ref> /param index The index from which data is to be popped.</para>
<para><programlisting><codeline><highlight class="normal">Dble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_double_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">pop_double_vector_index(vec,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">pop_double_vector_index(vec,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>2,<sp/>3,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_double_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1483" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1483" bodyend="1493"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
        <referencedby refid="vector_8c_1a0bf0ceecb4ef742811c3b2ed8384d432" compoundref="vector_8c" startline="1989" endline="1998">delete_double_vector_duplicates</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a3964e5480d290ac44a95680e52706f9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop_ldouble_vector_index</definition>
        <argsstring>(LDble *vec, size_t index)</argsstring>
        <name>pop_ldouble_vector_index</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will pop a value from an <ref refid="structLDble" kindref="compound">LDble</ref> struct container as a user defined index. This function runs fastest, when the index is the last populated index.</para>
<para>/param vec An struct container of type <ref refid="structLDble" kindref="compound">LDble</ref> /param index The index from which data is to be popped.</para>
<para><programlisting><codeline><highlight class="normal">LDble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ldouble_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">pop_ldouble_vector_index(vec,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">pop_ldouble_vector_index(vec,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>2,<sp/>3,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ldouble_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1496" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1496" bodyend="1506"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
        <referencedby refid="vector_8c_1a915b5e5eff06f5a04ff068c94cdcffb4" compoundref="vector_8c" startline="2001" endline="2010">delete_ldouble_vector_duplicates</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a4f9d1488d50bc3889fc04afc18fa9958" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop_char_vector_index</definition>
        <argsstring>(Char *vec, size_t index)</argsstring>
        <name>pop_char_vector_index</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will pop a value from an <ref refid="structChar" kindref="compound">Char</ref> struct container as a user defined index. This function runs fastest, when the index is the last populated index.</para>
<para>/param vec An struct container of type <ref refid="structChar" kindref="compound">Char</ref> /param index The index from which data is to be popped.</para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_char_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">pop_char_vector_index(vec,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">pop_char_vector_index(vec,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>2,<sp/>3,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1509" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1509" bodyend="1519"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
        <referencedby refid="vector_8c_1a5a01cb2f66c78b55858a0941ad9459af" compoundref="vector_8c" startline="2013" endline="2022">delete_char_vector_duplicates</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a7527a193c89c32c07eba99e8abc08574" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop_uchar_vector_index</definition>
        <argsstring>(UChar *vec, size_t index)</argsstring>
        <name>pop_uchar_vector_index</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will pop a value from an <ref refid="structChar" kindref="compound">Char</ref> struct container as a user defined index. This function runs fastest, when the index is the last populated index.</para>
<para>/param vec An struct container of type <ref refid="structUChar" kindref="compound">UChar</ref> /param index The index from which data is to be popped.</para>
<para><programlisting><codeline><highlight class="normal">UChar<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uchar_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">pop_uchar_vector_index(vec,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">pop_uchar_vector_index(vec,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>2,<sp/>3,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uchar_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1521" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1521" bodyend="1531"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
        <referencedby refid="vector_8c_1a51740972d62e96e248d8a07eb65e48aa" compoundref="vector_8c" startline="2025" endline="2034">delete_uchar_vector_duplicates</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a69479bf6e334f44f372305c8b1b13bb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop_bool_vector_index</definition>
        <argsstring>(Bool *vec, size_t index)</argsstring>
        <name>pop_bool_vector_index</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will pop a value from an <ref refid="structBool" kindref="compound">Bool</ref> struct container as a user defined index. This function runs fastest, when the index is the last populated index.</para>
<para>/param vec An struct container of type <ref refid="structBool" kindref="compound">Bool</ref> /param index The index from which data is to be popped.</para>
<para><programlisting><codeline><highlight class="normal">Bool<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_bool_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>false);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>false);</highlight></codeline>
<codeline><highlight class="normal">pop_bool_vector_index(vec,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">pop_bool_vector_index(vec,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>true,<sp/>true,<sp/>false<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1534" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1534" bodyend="1544"/>
        <references refid="structBool_1a5445f6ef94d239208dc797c289fded75" compoundref="vector_8h" startline="90">Bool::active_length</references>
        <references refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" compoundref="vector_8h" startline="90">Bool::array</references>
        <referencedby refid="vector_8c_1a1fe7315ba2394e61b43b99bfc765bd75" compoundref="vector_8c" startline="2037" endline="2046">delete_bool_vector_duplicates</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a4db2688e1c0d0d477c8a7168d811956d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop_string_vector_index</definition>
        <argsstring>(String *vec, size_t index)</argsstring>
        <name>pop_string_vector_index</name>
        <param>
          <type><ref refid="structString" kindref="compound">String</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will pop a value from an <ref refid="structChar" kindref="compound">Char</ref> struct container as a user defined index. This function runs fastest, when the index is the last populated index.</para>
<para>/param vec An struct container of type <ref refid="structChar" kindref="compound">Char</ref> /param index The index from which data is to be popped.</para>
<para><programlisting><codeline><highlight class="normal">String<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_string_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>&quot;Hello&quot;,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>&quot;Goodbye&quot;,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>&quot;again&quot;,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>Test&quot;,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>&quot;One&quot;,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">pop_string_vector_index(vec,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>Goodbye,<sp/>again,<sp/>Test,<sp/>One<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_string_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1547" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1547" bodyend="1567"/>
        <references refid="structString_1a706ffaf2f520d46074dd99e7896d6673" compoundref="vector_8h" startline="97">String::active_length</references>
        <references refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" compoundref="vector_8h" startline="96">String::array</references>
        <referencedby refid="vector_8c_1a1b3482060f9c607f98dbef4845db335f" compoundref="vector_8c" startline="2049" endline="2060">delete_string_vector_duplicates</referencedby>
        <referencedby refid="vector_8c_1a1556bb53212c3c454a2ddb3f4c2f4c8a" compoundref="vector_8c" startline="1671" endline="1680">replace_string_vector_values</referencedby>
        <referencedby refid="vector_8c_1a6297710c0ac2122db93e47a260e96ad8" compoundref="vector_8c" startline="2277" endline="2288">reverse_string_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a6f10b6c383f01d0f64ccdbedcbf2f9c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replace_short_vector_values</definition>
        <argsstring>(Short *vec, short int old_value, short int new_value)</argsstring>
        <name>replace_short_vector_values</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>short int</type>
          <declname>old_value</declname>
        </param>
        <param>
          <type>short int</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace all instances of a scalar value in an <ref refid="structShort" kindref="compound">Short</ref> struct container.</para>
<para>/param vec A struct container of type <ref refid="structShort" kindref="compound">Short</ref> /param old_value An short int scalar variable to be replaced /param new_value An short int scalar variable to replace old_value with</para>
<para><programlisting><codeline><highlight class="normal">Short<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_short_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">replace_short_vector_values(vec,<sp/>1,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//&gt;&gt;<sp/>[<sp/>5,<sp/>5,<sp/>2,<sp/>5,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_short_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1573" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1573" bodyend="1577"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a879f3876d14b47d940dbe55a1eec452e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replace_ushort_vector_values</definition>
        <argsstring>(UShort *vec, unsigned short int old_value, unsigned short int new_value)</argsstring>
        <name>replace_ushort_vector_values</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned short int</type>
          <declname>old_value</declname>
        </param>
        <param>
          <type>unsigned short int</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace all instances of a scalar value in an <ref refid="structUShort" kindref="compound">UShort</ref> struct container.</para>
<para>/param vec A struct container of type <ref refid="structUShort" kindref="compound">UShort</ref> /param old_value An unsigned short int scalar variable to be replaced /param new_value An unsigned short int scalar variable to replace old_value with</para>
<para><programlisting><codeline><highlight class="normal">UShort<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ushort_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">replace_ushort_vector_values(vec,<sp/>1,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//&gt;&gt;<sp/>[<sp/>5,<sp/>5,<sp/>2,<sp/>5,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ushort_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1580" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1580" bodyend="1584"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a7670474ec5b862ec981a62daa995aa3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replace_int_vector_values</definition>
        <argsstring>(Int *vec, int old_value, int new_value)</argsstring>
        <name>replace_int_vector_values</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>old_value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace all instances of a scalar value in an <ref refid="structInt" kindref="compound">Int</ref> struct container.</para>
<para>/param vec A struct container of type <ref refid="structInt" kindref="compound">Int</ref> /param old_value An int scalar variable to be replaced /param new_value An int scalar variable to replace old_value with</para>
<para><programlisting><codeline><highlight class="normal">Int<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_int_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">replace_int_vector_values(vec,<sp/>1,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//&gt;&gt;<sp/>[<sp/>5,<sp/>5,<sp/>2,<sp/>5,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_int_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1587" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1587" bodyend="1591"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a9d98a8399e52f97b6771d676b3919319" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replace_uint_vector_values</definition>
        <argsstring>(UInt *vec, unsigned int old_value, unsigned int new_value)</argsstring>
        <name>replace_uint_vector_values</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>old_value</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace all instances of a scalar value in an <ref refid="structUInt" kindref="compound">UInt</ref> struct container.</para>
<para>/param vec A struct container of type <ref refid="structUInt" kindref="compound">UInt</ref> /param old_value An unsigned int scalar variable to be replaced /param new_value An unsigned int scalar variable to replace old_value with</para>
<para><programlisting><codeline><highlight class="normal">UInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uint_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">replace_uint_vector_values(vec,<sp/>1,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//&gt;&gt;<sp/>[<sp/>5,<sp/>5,<sp/>2,<sp/>5,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uint_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1594" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1594" bodyend="1598"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a8f344f297fe759011551c5f2bb5e0161" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replace_long_vector_values</definition>
        <argsstring>(LInt *vec, long int old_value, long int new_value)</argsstring>
        <name>replace_long_vector_values</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>old_value</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace all instances of a scalar value in an <ref refid="structLInt" kindref="compound">LInt</ref> struct container.</para>
<para>/param vec A struct container of type <ref refid="structLInt" kindref="compound">LInt</ref> /param old_value An long int scalar variable to be replaced /param new_value An long int scalar variable to replace old_value with</para>
<para><programlisting><codeline><highlight class="normal">LInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_long_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">replace_long_vector_values(vec,<sp/>1,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//&gt;&gt;<sp/>[<sp/>5,<sp/>5,<sp/>2,<sp/>5,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_long_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1601" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1601" bodyend="1605"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a3354495712d1e3910ca4e6a33ee1c1df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replace_ulong_vector_values</definition>
        <argsstring>(ULInt *vec, unsigned long int old_value, unsigned long int new_value)</argsstring>
        <name>replace_ulong_vector_values</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned long int</type>
          <declname>old_value</declname>
        </param>
        <param>
          <type>unsigned long int</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace all instances of a scalar value in an <ref refid="structULInt" kindref="compound">ULInt</ref> struct container.</para>
<para>/param vec A struct container of type <ref refid="structULInt" kindref="compound">ULInt</ref> /param old_value An unsigned long int scalar variable to be replaced /param new_value An unsigned long int scalar variable to replace old_value with</para>
<para><programlisting><codeline><highlight class="normal">ULInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ulong_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">replace_ulong_vector_values(vec,<sp/>1,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//&gt;&gt;<sp/>[<sp/>5,<sp/>5,<sp/>2,<sp/>5,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ulong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1608" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1608" bodyend="1612"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a6fbef65375cd1143dadb2045d4a4cc82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replace_llong_vector_values</definition>
        <argsstring>(LLInt *vec, long long int old_value, long long int new_value)</argsstring>
        <name>replace_llong_vector_values</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long long int</type>
          <declname>old_value</declname>
        </param>
        <param>
          <type>long long int</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace all instances of a scalar value in an <ref refid="structLLInt" kindref="compound">LLInt</ref> struct container.</para>
<para>/param vec A struct container of type <ref refid="structLLInt" kindref="compound">LLInt</ref> /param old_value An long long int scalar variable to be replaced /param new_value An long long int scalar variable to replace old_value with</para>
<para><programlisting><codeline><highlight class="normal">LLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_llong_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">replace_llong_vector_values(vec,<sp/>1,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//&gt;&gt;<sp/>[<sp/>5,<sp/>5,<sp/>2,<sp/>5,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_llong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1615" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1615" bodyend="1619"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1acdb36a4f7fabea5ff887469c25bcaac3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replace_ullong_vector_values</definition>
        <argsstring>(ULLInt *vec, unsigned long long int old_value, unsigned long long int new_value)</argsstring>
        <name>replace_ullong_vector_values</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned long long int</type>
          <declname>old_value</declname>
        </param>
        <param>
          <type>unsigned long long int</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace all instances of a scalar value in an <ref refid="structULLInt" kindref="compound">ULLInt</ref> struct container.</para>
<para>/param vec A struct container of type <ref refid="structULLInt" kindref="compound">ULLInt</ref> /param old_value An unsigned long long int scalar variable to be replaced /param new_value An unsigned long long int scalar variable to replace old_value with</para>
<para><programlisting><codeline><highlight class="normal">ULLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ullong_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">replace_ullong_vector_values(vec,<sp/>1,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//&gt;&gt;<sp/>[<sp/>5,<sp/>5,<sp/>2,<sp/>5,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ullong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1622" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1622" bodyend="1626"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1aafe1e760a31236df3e8d9b5d4fedf79e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replace_float_vector_values</definition>
        <argsstring>(Flt *vec, float old_value, float new_value)</argsstring>
        <name>replace_float_vector_values</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>float</type>
          <declname>old_value</declname>
        </param>
        <param>
          <type>float</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace all instances of a scalar value in an <ref refid="structFlt" kindref="compound">Flt</ref> struct container.</para>
<para>/param vec A struct container of type <ref refid="structFlt" kindref="compound">Flt</ref> /param old_value An float scalar variable to be replaced /param new_value An float scalar variable to replace old_value with</para>
<para><programlisting><codeline><highlight class="normal">Flt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_float_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">replace_float_vector_values(vec,<sp/>1,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//&gt;&gt;<sp/>[<sp/>5,<sp/>5,<sp/>2,<sp/>5,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_float_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1629" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1629" bodyend="1633"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a141f86441673f219db9af026644dee3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replace_double_vector_values</definition>
        <argsstring>(Dble *vec, double old_value, double new_value)</argsstring>
        <name>replace_double_vector_values</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>double</type>
          <declname>old_value</declname>
        </param>
        <param>
          <type>double</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace all instances of a scalar value in an <ref refid="structDble" kindref="compound">Dble</ref> struct container.</para>
<para>/param vec A struct container of type <ref refid="structDble" kindref="compound">Dble</ref> /param old_value An double scalar variable to be replaced /param new_value An double scalar variable to replace old_value with</para>
<para><programlisting><codeline><highlight class="normal">Dble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_double_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">replace_double_vector_values(vec,<sp/>1,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//&gt;&gt;<sp/>[<sp/>5,<sp/>5,<sp/>2,<sp/>5,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_double_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1636" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1636" bodyend="1640"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a344c029c451a00a0a90e20b34569db22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replace_ldouble_vector_values</definition>
        <argsstring>(LDble *vec, long double old_value, long double new_value)</argsstring>
        <name>replace_ldouble_vector_values</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>old_value</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace all instances of a scalar value in an <ref refid="structLDble" kindref="compound">LDble</ref> struct container.</para>
<para>/param vec A struct container of type <ref refid="structLDble" kindref="compound">LDble</ref> /param old_value A long double scalar variable to be replaced /param new_value A long double scalar variable to replace old_value with</para>
<para><programlisting><codeline><highlight class="normal">LDble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ldouble_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">replace_ldouble_vector_values(vec,<sp/>1,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//&gt;&gt;<sp/>[<sp/>5,<sp/>5,<sp/>2,<sp/>5,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ldouble_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1643" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1643" bodyend="1647"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a8b7c3baf36c7ef6deca8011f2d622119" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replace_char_vector_values</definition>
        <argsstring>(Char *vec, char old_value, char new_value)</argsstring>
        <name>replace_char_vector_values</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>char</type>
          <declname>old_value</declname>
        </param>
        <param>
          <type>char</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace all instances of a scalar value in an <ref refid="structChar" kindref="compound">Char</ref> struct container.</para>
<para>/param vec A struct container of type <ref refid="structChar" kindref="compound">Char</ref> /param old_value A char scalar variable to be replaced /param new_value A char scalar variable to replace old_value with</para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_char_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">replace_char_vector_values(vec,<sp/>1,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//&gt;&gt;<sp/>[<sp/>5,<sp/>5,<sp/>2,<sp/>5,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1650" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1650" bodyend="1654"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a8b8b55713c6eeeba3f8bb8fbbb08ad10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replace_uchar_vector_values</definition>
        <argsstring>(UChar *vec, unsigned char old_value, unsigned char new_value)</argsstring>
        <name>replace_uchar_vector_values</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>old_value</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace all instances of a scalar value in an <ref refid="structChar" kindref="compound">Char</ref> struct container.</para>
<para>/param vec A struct container of type <ref refid="structUChar" kindref="compound">UChar</ref> /param old_value A char scalar variable to be replaced /param new_value A char scalar variable to replace old_value with</para>
<para><programlisting><codeline><highlight class="normal">UChar<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uchar_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">replace_uchar_vector_values(vec,<sp/>1,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//&gt;&gt;<sp/>[<sp/>5,<sp/>5,<sp/>2,<sp/>5,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uchar_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1657" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1657" bodyend="1661"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ab345b0d10cef3cb87e552791440398e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replace_bool_vector_values</definition>
        <argsstring>(Bool *vec, bool old_value, char new_value)</argsstring>
        <name>replace_bool_vector_values</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>old_value</declname>
        </param>
        <param>
          <type>char</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace all instances of a scalar value in an <ref refid="structBool" kindref="compound">Bool</ref> struct container.</para>
<para>/param vec A struct container of type <ref refid="structBool" kindref="compound">Bool</ref> /param old_value A bool scalar variable to be replaced /param new_value A bool scalar variable to replace old_value with</para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_bool_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>false);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">replace_bool_vector_values(vec,<sp/>true,<sp/>false);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//&gt;&gt;<sp/>[<sp/>false,<sp/>false,<sp/>false,<sp/>false,<sp/>false<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_bool_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1664" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1664" bodyend="1668"/>
        <references refid="structBool_1a5445f6ef94d239208dc797c289fded75" compoundref="vector_8h" startline="90">Bool::active_length</references>
        <references refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" compoundref="vector_8h" startline="90">Bool::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a1556bb53212c3c454a2ddb3f4c2f4c8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replace_string_vector_values</definition>
        <argsstring>(String *vec, char *old_value, char *new_value)</argsstring>
        <name>replace_string_vector_values</name>
        <param>
          <type><ref refid="structString" kindref="compound">String</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>old_value</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace all instances of a string within a <ref refid="structString" kindref="compound">String</ref> vector struct</para>
<para>/param vec A struct container of type <ref refid="structString" kindref="compound">String</ref> /param old_value The old string value /param new_value The new string value</para>
<para><programlisting><codeline><highlight class="normal">String<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_string_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>&quot;Hello&quot;,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>&quot;Goodbye&quot;,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>&quot;Hello&quot;,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>&quot;Goodbye&quot;,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">replace_string_vector_values(vec,<sp/>&quot;Hello&quot;,<sp/>&quot;Wrong&quot;);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>Wrong,<sp/>Goodbye,<sp/>Wrong,<sp/>Goodbye);</highlight></codeline>
<codeline><highlight class="normal">free_string_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1671" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1671" bodyend="1680"/>
        <references refid="structString_1a706ffaf2f520d46074dd99e7896d6673" compoundref="vector_8h" startline="97">String::active_length</references>
        <references refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" compoundref="vector_8h" startline="96">String::array</references>
        <references refid="vector_8c_1a4db2688e1c0d0d477c8a7168d811956d" compoundref="vector_8c" startline="1547" endline="1567">pop_string_vector_index</references>
        <references refid="vector_8c_1a078616c26d55c1ddb2ec4c551298a4f8" compoundref="vector_8c" startline="811" endline="829">push_string_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a8a383d2299a326d3c0ded94c19d73393" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_short_vector</definition>
        <argsstring>(Short *vec)</argsstring>
        <name>free_short_vector</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will free all memory from an <ref refid="structShort" kindref="compound">Short</ref> data type assuming the type was used for dynamically allocated memory. If the type was initialized for statically allocated memory, this function will write an error to stderror and return a value of -1 to the calling program.</para>
<para>/param vec A struct container of type <ref refid="structShort" kindref="compound">Short</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1685" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1685" bodyend="1695"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1af0b6f4e61e69b8a2f74d42b09b421d88" compoundref="vector_8h" startline="77">Short::allocated_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
        <references refid="structShort_1a20b9c526866b593e8e1ecdc49515e642" compoundref="vector_8h" startline="77">Short::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a3765cd4f6e59bada679e05ea6dacfff5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_ushort_vector</definition>
        <argsstring>(UShort *vec)</argsstring>
        <name>free_ushort_vector</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will free all memory from an <ref refid="structUShort" kindref="compound">UShort</ref> data type assuming the type was used for dynamically allocated memory. If the type was initialized for statically allocated memory, this function will write an error to stderror and return a value of -1 to the calling program.</para>
<para>/param vec A struct container of type <ref refid="structUShort" kindref="compound">UShort</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1698" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1698" bodyend="1708"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a0ef4541f3fd3fcee1c0f5809341c84d6" compoundref="vector_8h" startline="78">UShort::allocated_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
        <references refid="structUShort_1a4c5d40034bbd1e9ee0de773d6be0c31e" compoundref="vector_8h" startline="78">UShort::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ab2c13b705440e4d4d53825bb16929ff6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_int_vector</definition>
        <argsstring>(Int *vec)</argsstring>
        <name>free_int_vector</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will free all memory from an <ref refid="structInt" kindref="compound">Int</ref> data type assuming the type was used for dynamically allocated memory. If the type was initialized for statically allocated memory, this function will write an error to stderror and return a value of -1 to the calling program.</para>
<para>/param vec A struct container of type <ref refid="structInt" kindref="compound">Int</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1711" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1711" bodyend="1721"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a63bea8755b3ce6be7e83970b9ea3bd68" compoundref="vector_8h" startline="79">Int::allocated_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
        <references refid="structInt_1ae124ac3392878072e49fe64e0d07beff" compoundref="vector_8h" startline="79">Int::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a6195f400606be104b4461cd9876f93ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_uint_vector</definition>
        <argsstring>(UInt *vec)</argsstring>
        <name>free_uint_vector</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will free all memory from an <ref refid="structUInt" kindref="compound">UInt</ref> data type assuming the type was used for dynamically allocated memory. If the type was initialized for statically allocated memory, this function will write an error to stderror and return a value of -1 to the calling program.</para>
<para>/param vec A struct container of type <ref refid="structUInt" kindref="compound">UInt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1724" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1724" bodyend="1734"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a05b28efaec93c388e8685403f57a07ce" compoundref="vector_8h" startline="80">UInt::allocated_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
        <references refid="structUInt_1ab87c8b62b4178bf9bcf59d03b066da1c" compoundref="vector_8h" startline="80">UInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1af1ab528ebf7f47a278e3be3b02e9acee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_long_vector</definition>
        <argsstring>(LInt *vec)</argsstring>
        <name>free_long_vector</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will free all memory from an <ref refid="structLInt" kindref="compound">LInt</ref> data type assuming the type was used for dynamically allocated memory. If the type was initialized for statically allocated memory, this function will write an error to stderror and return a value of -1 to the calling program.</para>
<para>/param vec A struct container of type <ref refid="structLInt" kindref="compound">LInt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1737" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1737" bodyend="1747"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a21eec79c847025348ad0082aab6dee52" compoundref="vector_8h" startline="81">LInt::allocated_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
        <references refid="structLInt_1a7255bafd2fb6310140aebe36d68b9629" compoundref="vector_8h" startline="81">LInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a9a05407a3434648f10f4416a7874150d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_ulong_vector</definition>
        <argsstring>(ULInt *vec)</argsstring>
        <name>free_ulong_vector</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will free all memory from an <ref refid="structULInt" kindref="compound">ULInt</ref> data type assuming the type was used for dynamically allocated memory. If the type was initialized for statically allocated memory, this function will write an error to stderror and return a value of -1 to the calling program.</para>
<para>/param vec A struct container of type <ref refid="structULInt" kindref="compound">ULInt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1750" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1750" bodyend="1760"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1acf325510e03976f12c116ad68c4998ec" compoundref="vector_8h" startline="82">ULInt::allocated_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
        <references refid="structULInt_1abbab1a9c205c4d86fcc53c55174d1515" compoundref="vector_8h" startline="82">ULInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1af92bc034e6f34814eea1008629f41ef9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_llong_vector</definition>
        <argsstring>(LLInt *vec)</argsstring>
        <name>free_llong_vector</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will free all memory from an <ref refid="structLLInt" kindref="compound">LLInt</ref> data type assuming the type was used for dynamically allocated memory. If the type was initialized for statically allocated memory, this function will write an error to stderror and return a value of -1 to the calling program.</para>
<para>/param vec A struct container of type <ref refid="structLLInt" kindref="compound">LLInt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1763" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1763" bodyend="1773"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1a967c631e7b8192f0016845623ae04759" compoundref="vector_8h" startline="83">LLInt::allocated_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
        <references refid="structLLInt_1a2cf879f2b771d70de2ae15401190b50e" compoundref="vector_8h" startline="83">LLInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a605f038b309fb25e53f637c9e9b6e4bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_ullong_vector</definition>
        <argsstring>(ULLInt *vec)</argsstring>
        <name>free_ullong_vector</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will free all memory from an <ref refid="structULLInt" kindref="compound">ULLInt</ref> data type assuming the type was used for dynamically allocated memory. If the type was initialized for statically allocated memory, this function will write an error to stderror and return a value of -1 to the calling program.</para>
<para>/param vec A struct container of type <ref refid="structULLInt" kindref="compound">ULLInt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1776" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1776" bodyend="1786"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1ac6210c003919694e4fccfc5885c8fcb4" compoundref="vector_8h" startline="84">ULLInt::allocated_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
        <references refid="structULLInt_1acb153b18423bf9465c6a52aa74745df3" compoundref="vector_8h" startline="84">ULLInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1aa0efda9f361b9e9219f5afc379c7e6cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_float_vector</definition>
        <argsstring>(Flt *vec)</argsstring>
        <name>free_float_vector</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will free all memory from an <ref refid="structFlt" kindref="compound">Flt</ref> data type assuming the type was used for dynamically allocated memory. If the type was initialized for statically allocated memory, this function will write an error to stderror and return a value of -1 to the calling program.</para>
<para>/param vec A struct container of type <ref refid="structFlt" kindref="compound">Flt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1789" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1789" bodyend="1799"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a917603eeaae1fb22accbfc8d9252a389" compoundref="vector_8h" startline="85">Flt::allocated_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
        <references refid="structFlt_1ad98ce16bf2fff8b16351042bd4135629" compoundref="vector_8h" startline="85">Flt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a0d9577d0256e0e006d1c55a12ba1bffd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_double_vector</definition>
        <argsstring>(Dble *vec)</argsstring>
        <name>free_double_vector</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will free all memory from an <ref refid="structDble" kindref="compound">Dble</ref> data type assuming the type was used for dynamically allocated memory. If the type was initialized for statically allocated memory, this function will write an error to stderror and return a value of -1 to the calling program.</para>
<para>/param vec A struct container of type <ref refid="structDble" kindref="compound">Dble</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1802" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1802" bodyend="1812"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a83cb29dfe09183032473cc7ffe005f5d" compoundref="vector_8h" startline="86">Dble::allocated_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
        <references refid="structDble_1a593e6de4412f110b4ffe6fd87a62aa56" compoundref="vector_8h" startline="86">Dble::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a89e6af78e123543fefe3333963de0e83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_ldouble_vector</definition>
        <argsstring>(LDble *vec)</argsstring>
        <name>free_ldouble_vector</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will free all memory from an <ref refid="structLDble" kindref="compound">LDble</ref> data type assuming the type was used for dynamically allocated memory. If the type was initialized for statically allocated memory, this function will write an error to stderror and return a value of -1 to the calling program.</para>
<para>/param vec A struct container of type <ref refid="structLDble" kindref="compound">LDble</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1815" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1815" bodyend="1825"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a1f0f3fd968cab1acdebf0d43f632633f" compoundref="vector_8h" startline="87">LDble::allocated_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
        <references refid="structLDble_1a25a9e54828403acb6e1e565d00a24582" compoundref="vector_8h" startline="87">LDble::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1afef1cb622b3f54256849a3b5446a7af4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_char_vector</definition>
        <argsstring>(Char *vec)</argsstring>
        <name>free_char_vector</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will free all memory from an <ref refid="structChar" kindref="compound">Char</ref> data type assuming the type was used for dynamically allocated memory. If the type was initialized for statically allocated memory, this function will write an error to stderror and return a value of -1 to the calling program.</para>
<para>/param vec A struct container of type <ref refid="structChar" kindref="compound">Char</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1828" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1828" bodyend="1838"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1ab59977640c7539e5ae251af86d445257" compoundref="vector_8h" startline="88">Char::allocated_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
        <references refid="structChar_1a7231211c3eec109684271510fb25ffe8" compoundref="vector_8h" startline="88">Char::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a9f3fcb3deda563d834c9d3d13f097268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_uchar_vector</definition>
        <argsstring>(UChar *vec)</argsstring>
        <name>free_uchar_vector</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will free all memory from an <ref refid="structChar" kindref="compound">Char</ref> data type assuming the type was used for dynamically allocated memory. If the type was initialized for statically allocated memory, this function will write an error to stderror and return a value of -1 to the calling program.</para>
<para>/param vec A struct container of type <ref refid="structUChar" kindref="compound">UChar</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1841" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1841" bodyend="1851"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="structUChar_1a69ec79fc44d9f3b1455705e24a819f4b" compoundref="vector_8h" startline="89">UChar::allocated_length</references>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
        <references refid="structUChar_1aa1ea52fa832c84586784bb36c1617e44" compoundref="vector_8h" startline="89">UChar::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a5783a319298af13236def83e42f00799" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_bool_vector</definition>
        <argsstring>(Bool *vec)</argsstring>
        <name>free_bool_vector</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will free all memory from an <ref refid="structBool" kindref="compound">Bool</ref> data type assuming the type was used for dynamically allocated memory. If the type was initialized for statically allocated memory, this function will write an error to stderror and return a value of -1 to the calling program.</para>
<para>/param vec A struct container of type <ref refid="structBool" kindref="compound">Bool</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1854" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1854" bodyend="1864"/>
        <references refid="structBool_1a5445f6ef94d239208dc797c289fded75" compoundref="vector_8h" startline="90">Bool::active_length</references>
        <references refid="structBool_1a4a353f55a013f72befc666e8d0708212" compoundref="vector_8h" startline="90">Bool::allocated_length</references>
        <references refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" compoundref="vector_8h" startline="90">Bool::array</references>
        <references refid="structBool_1ad781cb2cecf2b060c6337a73ed89def9" compoundref="vector_8h" startline="90">Bool::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a2975c4c7c36efebc98b926abfc4ba837" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_string_vector</definition>
        <argsstring>(String *vec)</argsstring>
        <name>free_string_vector</name>
        <param>
          <type><ref refid="structString" kindref="compound">String</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will free all memory from anString data type assuming the type was used for dynamically allocated memory.</para>
<para>/param vec A struct container of type <ref refid="structString" kindref="compound">String</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1867" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1867" bodyend="1876"/>
        <references refid="structString_1a706ffaf2f520d46074dd99e7896d6673" compoundref="vector_8h" startline="97">String::active_length</references>
        <references refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" compoundref="vector_8h" startline="96">String::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a35b16d98a38d37826ee118f4860d680a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delete_short_vector_duplicates</definition>
        <argsstring>(Short *vec)</argsstring>
        <name>delete_short_vector_duplicates</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will delete all duplicate values in an <ref refid="structShort" kindref="compound">Short</ref> struct, with exception of the first instance of the variable.</para>
<para>/param vec A struct container of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para><programlisting><codeline><highlight class="normal">Short<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_short_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">delete_short_vector_duplicates(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_short_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1881" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1881" bodyend="1890"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
        <references refid="vector_8c_1a90c0d394579f3950b22adabb66f153e9" compoundref="vector_8c" startline="1366" endline="1376">pop_short_vector_index</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a372a58405f86fa4ef22f53af37408017" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delete_ushort_vector_duplicates</definition>
        <argsstring>(UShort *vec)</argsstring>
        <name>delete_ushort_vector_duplicates</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will delete all duplicate values in an <ref refid="structUShort" kindref="compound">UShort</ref> struct, with exception of the first instance of the variable.</para>
<para>/param vec A struct container of type <ref refid="structUShort" kindref="compound">UShort</ref></para>
<para><programlisting><codeline><highlight class="normal">UShort<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ushort_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">delete_ushort_vector_duplicates(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ushort_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1893" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1893" bodyend="1902"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
        <references refid="vector_8c_1ab5f9826948a1e75b6ffa74b2e801f8c5" compoundref="vector_8c" startline="1379" endline="1389">pop_ushort_vector_index</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a68a325016f45777566e1eae4b15c4238" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delete_int_vector_duplicates</definition>
        <argsstring>(Int *vec)</argsstring>
        <name>delete_int_vector_duplicates</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will delete all duplicate values in an <ref refid="structInt" kindref="compound">Int</ref> struct, with exception of the first instance of the variable.</para>
<para>/param vec A struct container of type <ref refid="structInt" kindref="compound">Int</ref></para>
<para><programlisting><codeline><highlight class="normal">Int<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_int_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">delete_int_vector_duplicates(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_int_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1905" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1905" bodyend="1914"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
        <references refid="vector_8c_1af0ecebd36b313d07d43f40698bd5508f" compoundref="vector_8c" startline="1392" endline="1402">pop_int_vector_index</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ab5a49e7e86d86796744395431d475f74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delete_uint_vector_duplicates</definition>
        <argsstring>(UInt *vec)</argsstring>
        <name>delete_uint_vector_duplicates</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will delete all duplicate values in a <ref refid="structUInt" kindref="compound">UInt</ref> struct, with exception of the first instance of the variable.</para>
<para>/param vec A struct container of type <ref refid="structUInt" kindref="compound">UInt</ref></para>
<para><programlisting><codeline><highlight class="normal">UInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uint_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">delete_uint_vector_duplicates(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uint_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1917" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1917" bodyend="1926"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
        <references refid="vector_8c_1aea61eee2cd7481c1d34d13ba4a27e669" compoundref="vector_8c" startline="1405" endline="1415">pop_uint_vector_index</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a10ee633f27cbd6252d41ffd0761f6392" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delete_long_vector_duplicates</definition>
        <argsstring>(LInt *vec)</argsstring>
        <name>delete_long_vector_duplicates</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will delete all duplicate values in a <ref refid="structLInt" kindref="compound">LInt</ref> struct, with exception of the first instance of the variable.</para>
<para>/param vec A struct container of type <ref refid="structLInt" kindref="compound">LInt</ref></para>
<para><programlisting><codeline><highlight class="normal">LInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_long_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">delete_long_vector_duplicates(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_long_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1929" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1929" bodyend="1938"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
        <references refid="vector_8c_1ade7d072b4cbbed3560461122ff9bf2d1" compoundref="vector_8c" startline="1418" endline="1428">pop_long_vector_index</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1aa7b0890be4e8157712930fedaf437c8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delete_ulong_vector_duplicates</definition>
        <argsstring>(ULInt *vec)</argsstring>
        <name>delete_ulong_vector_duplicates</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will delete all duplicate values in a <ref refid="structULInt" kindref="compound">ULInt</ref> struct, with exception of the first instance of the variable.</para>
<para>/param vec A struct container of type <ref refid="structULInt" kindref="compound">ULInt</ref></para>
<para><programlisting><codeline><highlight class="normal">ULInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ulong_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">delete_ulong_vector_duplicates(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ulong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1941" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1941" bodyend="1950"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
        <references refid="vector_8c_1aee6e8f2b009cc7205dfd8c143b8e9839" compoundref="vector_8c" startline="1431" endline="1441">pop_ulong_vector_index</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a8f895e83e3b4e24dfdd253508da61875" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delete_llong_vector_duplicates</definition>
        <argsstring>(LLInt *vec)</argsstring>
        <name>delete_llong_vector_duplicates</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will delete all duplicate values in a <ref refid="structLLInt" kindref="compound">LLInt</ref> struct, with exception of the first instance of the variable.</para>
<para>/param vec A struct container of type <ref refid="structLLInt" kindref="compound">LLInt</ref></para>
<para><programlisting><codeline><highlight class="normal">LLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_llong_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">delete_llong_vector_duplicates(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_llong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1953" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1953" bodyend="1962"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
        <references refid="vector_8c_1a6475916b10de913b8859fbd0b8312557" compoundref="vector_8c" startline="1444" endline="1454">pop_llong_vector_index</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a91794ceff19b304073f15ca82fe38b0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delete_ullong_vector_duplicates</definition>
        <argsstring>(ULLInt *vec)</argsstring>
        <name>delete_ullong_vector_duplicates</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will delete all duplicate values in a <ref refid="structULLInt" kindref="compound">ULLInt</ref> struct, with exception of the first instance of the variable.</para>
<para>/param vec A struct container of type <ref refid="structULLInt" kindref="compound">ULLInt</ref></para>
<para><programlisting><codeline><highlight class="normal">ULLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ullong_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">delete_ullong_vector_duplicates(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ullong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1965" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1965" bodyend="1974"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
        <references refid="vector_8c_1a52f4d32e9312b40967f4c0ee3de88e7a" compoundref="vector_8c" startline="1457" endline="1467">pop_ullong_vector_index</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a49e7b8e0e17f4570f95875965ea8c2d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delete_float_vector_duplicates</definition>
        <argsstring>(Flt *vec)</argsstring>
        <name>delete_float_vector_duplicates</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will delete all duplicate values in a <ref refid="structFlt" kindref="compound">Flt</ref> struct, with exception of the first instance of the variable.</para>
<para>/param vec A struct container of type <ref refid="structFlt" kindref="compound">Flt</ref></para>
<para><programlisting><codeline><highlight class="normal">Flt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_float_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>1.f);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>1.f);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>2.f);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>2.f);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>3.f);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>3.f);</highlight></codeline>
<codeline><highlight class="normal">delete_float_vector_duplicates(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_float_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1977" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1977" bodyend="1986"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
        <references refid="vector_8c_1a7f179d98deb7852196afc7e3d26ef06d" compoundref="vector_8c" startline="1470" endline="1480">pop_float_vector_index</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a0bf0ceecb4ef742811c3b2ed8384d432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delete_double_vector_duplicates</definition>
        <argsstring>(Dble *vec)</argsstring>
        <name>delete_double_vector_duplicates</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will delete all duplicate values in a <ref refid="structDble" kindref="compound">Dble</ref> struct, with exception of the first instance of the variable.</para>
<para>/param vec A struct container of type <ref refid="structDble" kindref="compound">Dble</ref></para>
<para><programlisting><codeline><highlight class="normal">Dble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_double_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>1.);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>1.);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>2.);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>2.);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>3.);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>3.);</highlight></codeline>
<codeline><highlight class="normal">delete_double_vector_duplicates(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_double_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="1989" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1989" bodyend="1998"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
        <references refid="vector_8c_1a8d2545eb603560d67e5c481075e5d0fc" compoundref="vector_8c" startline="1483" endline="1493">pop_double_vector_index</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a915b5e5eff06f5a04ff068c94cdcffb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delete_ldouble_vector_duplicates</definition>
        <argsstring>(LDble *vec)</argsstring>
        <name>delete_ldouble_vector_duplicates</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will delete all duplicate values in a <ref refid="structLDble" kindref="compound">LDble</ref> struct, with exception of the first instance of the variable.</para>
<para>/param vec A struct container of type <ref refid="structLDble" kindref="compound">LDble</ref></para>
<para><programlisting><codeline><highlight class="normal">LDble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ldouble_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>1.);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>1.);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>2.);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>2.);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>3.);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>3.);</highlight></codeline>
<codeline><highlight class="normal">delete_ldouble_vector_duplicates(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ldouble_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2001" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2001" bodyend="2010"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
        <references refid="vector_8c_1a3964e5480d290ac44a95680e52706f9d" compoundref="vector_8c" startline="1496" endline="1506">pop_ldouble_vector_index</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a5a01cb2f66c78b55858a0941ad9459af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delete_char_vector_duplicates</definition>
        <argsstring>(Char *vec)</argsstring>
        <name>delete_char_vector_duplicates</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will delete all duplicate values in a <ref refid="structChar" kindref="compound">Char</ref> struct, with exception of the first instance of the variable.</para>
<para>/param vec A struct container of type <ref refid="structChar" kindref="compound">Char</ref></para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_char_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>&apos;a&apos;);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>&apos;a&apos;);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>&apos;b&apos;);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>&apos;b&apos;);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>&apos;c&apos;);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>&apos;c&apos;);</highlight></codeline>
<codeline><highlight class="normal">delete_char_vector_duplicates(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>a,<sp/>b,<sp/>c<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2013" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2013" bodyend="2022"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
        <references refid="vector_8c_1a4f9d1488d50bc3889fc04afc18fa9958" compoundref="vector_8c" startline="1509" endline="1519">pop_char_vector_index</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a51740972d62e96e248d8a07eb65e48aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delete_uchar_vector_duplicates</definition>
        <argsstring>(UChar *vec)</argsstring>
        <name>delete_uchar_vector_duplicates</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will delete all duplicate values in a <ref refid="structChar" kindref="compound">Char</ref> struct, with exception of the first instance of the variable.</para>
<para>/param vec A struct container of type <ref refid="structChar" kindref="compound">Char</ref></para>
<para><programlisting><codeline><highlight class="normal">UChar<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uchar_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>&apos;a&apos;);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>&apos;a&apos;);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>&apos;b&apos;);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>&apos;b&apos;);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>&apos;c&apos;);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>&apos;c&apos;);</highlight></codeline>
<codeline><highlight class="normal">delete_uchar_vector_duplicates(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>a,<sp/>b,<sp/>c<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uchar_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2025" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2025" bodyend="2034"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
        <references refid="vector_8c_1a7527a193c89c32c07eba99e8abc08574" compoundref="vector_8c" startline="1521" endline="1531">pop_uchar_vector_index</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a1fe7315ba2394e61b43b99bfc765bd75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delete_bool_vector_duplicates</definition>
        <argsstring>(Bool *vec)</argsstring>
        <name>delete_bool_vector_duplicates</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will delete all duplicate values in a <ref refid="structBool" kindref="compound">Bool</ref> struct, with exception of the first instance of the variable.</para>
<para>/param vec A struct container of type <ref refid="structBool" kindref="compound">Bool</ref></para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_bool_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>false);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>false);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">delete_bool_vector_duplicates(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>true,<sp/>false<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_bool_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2037" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2037" bodyend="2046"/>
        <references refid="structBool_1a5445f6ef94d239208dc797c289fded75" compoundref="vector_8h" startline="90">Bool::active_length</references>
        <references refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" compoundref="vector_8h" startline="90">Bool::array</references>
        <references refid="vector_8c_1a69479bf6e334f44f372305c8b1b13bb3" compoundref="vector_8c" startline="1534" endline="1544">pop_bool_vector_index</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a1b3482060f9c607f98dbef4845db335f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delete_string_vector_duplicates</definition>
        <argsstring>(String *vec)</argsstring>
        <name>delete_string_vector_duplicates</name>
        <param>
          <type><ref refid="structString" kindref="compound">String</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will delete all duplicate values in a <ref refid="structString" kindref="compound">String</ref> struct, with exception of the first instance of the variable</para>
<para>/param vec A struct container of type <ref refid="structString" kindref="compound">String</ref></para>
<para><programlisting><codeline><highlight class="normal">init_string_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>&quot;One&quot;,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>&quot;Two&quot;,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>&quot;One&quot;,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>&quot;One&quot;,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>&quot;Three&quot;,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>&quot;Two&quot;,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">delete_string_vector_duplicates(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[One,<sp/>Two,<sp/>Three<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_string_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2049" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2049" bodyend="2060"/>
        <references refid="structString_1a706ffaf2f520d46074dd99e7896d6673" compoundref="vector_8h" startline="97">String::active_length</references>
        <references refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" compoundref="vector_8h" startline="96">String::array</references>
        <references refid="vector_8c_1a4db2688e1c0d0d477c8a7168d811956d" compoundref="vector_8c" startline="1547" endline="1567">pop_string_vector_index</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a6388f663263c0c5a219bc2da551d0584" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reverse_short_vector</definition>
        <argsstring>(Short *vec)</argsstring>
        <name>reverse_short_vector</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will reverse the order of the array in a struct of type <ref refid="structShort" kindref="compound">Short</ref>.</para>
<para>/param vec A vector struct container of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para><programlisting><codeline><highlight class="normal">Short<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_short_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">short<sp/>a[4]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_short_vector(vec,<sp/>a,<sp/>4,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">reverse_short_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_short_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2065" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2065" bodyend="2077"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a15f75e9b6b4192aa83d95635419865da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reverse_ushort_vector</definition>
        <argsstring>(UShort *vec)</argsstring>
        <name>reverse_ushort_vector</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will reverse the order of the array in a struct of type <ref refid="structUShort" kindref="compound">UShort</ref>.</para>
<para>/param A vector struct container of type <ref refid="structUShort" kindref="compound">UShort</ref></para>
<para><programlisting><codeline><highlight class="normal">UShort<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ushort_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">ushort<sp/>a[4]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_ushort_vector(vec,<sp/>a,<sp/>4,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">reverse_ushort_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ushort_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2080" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2080" bodyend="2092"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a0ee6d80508a610096b84893a0edd7e82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reverse_int_vector</definition>
        <argsstring>(Int *vec)</argsstring>
        <name>reverse_int_vector</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will reverse the order of the array in a struct of type <ref refid="structInt" kindref="compound">Int</ref>.</para>
<para>/param vec A vector struct container of type <ref refid="structInt" kindref="compound">Int</ref></para>
<para><programlisting><codeline><highlight class="normal">Int<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_int_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>a[4]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_int_vector(vec,<sp/>a,<sp/>4,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">reverse_int_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_int_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2095" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2095" bodyend="2107"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a58e127cf5386ca2152ebafcf4dbb8bbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reverse_uint_vector</definition>
        <argsstring>(UInt *vec)</argsstring>
        <name>reverse_uint_vector</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will reverse the order of the array in a struct of type <ref refid="structUInt" kindref="compound">UInt</ref>.</para>
<para>/param vec A vector struct container of type <ref refid="structUInt" kindref="compound">UInt</ref></para>
<para><programlisting><codeline><highlight class="normal">UInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uint_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">uint<sp/>a[4]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_uint_vector(vec,<sp/>a,<sp/>4,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">reverse_uint_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uint_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2110" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2110" bodyend="2124"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a0d89b67e906a169f63e1bfc679df018f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reverse_long_vector</definition>
        <argsstring>(LInt *vec)</argsstring>
        <name>reverse_long_vector</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will reverse the order of the array in a struct of type <ref refid="structLInt" kindref="compound">LInt</ref>.</para>
<para>/param vec A vector struct container of type <ref refid="structLInt" kindref="compound">LInt</ref></para>
<para><programlisting><codeline><highlight class="normal">LInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_long_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>int<sp/>a[4]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_long_vector(vec,<sp/>a,<sp/>4,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">reverse_long_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_long_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2127" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2127" bodyend="2139"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a6196a5bfffe22d6493b2bda77a9340fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reverse_ulong_vector</definition>
        <argsstring>(ULInt *vec)</argsstring>
        <name>reverse_ulong_vector</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will reverse the order of the array in a struct of type <ref refid="structULInt" kindref="compound">ULInt</ref>.</para>
<para>/param vec A vector struct container of type <ref refid="structULInt" kindref="compound">ULInt</ref></para>
<para><programlisting><codeline><highlight class="normal">ULInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ulong_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>int<sp/>a[4]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_ulong_vector(vec,<sp/>a,<sp/>4,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">reverse_ulong_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ulong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2142" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2142" bodyend="2154"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a3247bcffd4ad7a9f75c9a2e88ff7bd81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reverse_llong_vector</definition>
        <argsstring>(LLInt *vec)</argsstring>
        <name>reverse_llong_vector</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will reverse the order of the array in a struct of type <ref refid="structLLInt" kindref="compound">LLInt</ref>.</para>
<para>/param vec A vector struct container of type <ref refid="structLLInt" kindref="compound">LLInt</ref></para>
<para><programlisting><codeline><highlight class="normal">LLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_llong_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>long<sp/>int<sp/>a[4]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_llong_vector(vec,<sp/>a,<sp/>4,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">reverse_llong_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_llong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2157" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2157" bodyend="2169"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1aa77d55a8f5e4ab149edb6c75d98a94ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reverse_ullong_vector</definition>
        <argsstring>(ULLInt *vec)</argsstring>
        <name>reverse_ullong_vector</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will reverse the order of the array in a struct of type <ref refid="structULLInt" kindref="compound">ULLInt</ref>.</para>
<para>/param vec A vector struct container of type <ref refid="structULLInt" kindref="compound">ULLInt</ref></para>
<para><programlisting><codeline><highlight class="normal">LLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_llong_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>long<sp/>int<sp/>a[4]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_llong_vector(vec,<sp/>a,<sp/>4,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">reverse_llong_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ullong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2172" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2172" bodyend="2184"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a086bbd995dc83d50532944330a44c450" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reverse_float_vector</definition>
        <argsstring>(Flt *vec)</argsstring>
        <name>reverse_float_vector</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will reverse the order of the array in a struct of type <ref refid="structFlt" kindref="compound">Flt</ref>.</para>
<para>/param vec A vector struct container of type <ref refid="structFlt" kindref="compound">Flt</ref></para>
<para><programlisting><codeline><highlight class="normal">Flt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_float_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>a[4]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_float_vector(vec,<sp/>a,<sp/>4,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">reverse_float_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_float_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2187" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2187" bodyend="2199"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a628e48950294512d38556f8b194284d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reverse_double_vector</definition>
        <argsstring>(Dble *vec)</argsstring>
        <name>reverse_double_vector</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will reverse the order of the array in a struct of type <ref refid="structDble" kindref="compound">Dble</ref>.</para>
<para>/param vec A vector struct container of type <ref refid="structDble" kindref="compound">Dble</ref></para>
<para><programlisting><codeline><highlight class="normal">Dble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_double_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>a[4]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_double_vector(vec,<sp/>a,<sp/>4,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">reverse_double_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_double_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2202" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2202" bodyend="2214"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a8a72b2219830bacf2a5ec926241ed924" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reverse_ldouble_vector</definition>
        <argsstring>(LDble *vec)</argsstring>
        <name>reverse_ldouble_vector</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will reverse the order of the array in a struct of type <ref refid="structLDble" kindref="compound">LDble</ref>.</para>
<para>/param vec A vector struct container of type <ref refid="structLDble" kindref="compound">LDble</ref></para>
<para><programlisting><codeline><highlight class="normal">LDble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ldouble_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>a[4]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_ldouble_vector(vec,<sp/>a,<sp/>4,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">reverse_ldouble_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ldouble_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2217" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2217" bodyend="2229"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a06faa32f223a79c02cb771b19cc02a07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reverse_char_vector</definition>
        <argsstring>(Char *vec)</argsstring>
        <name>reverse_char_vector</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will reverse the order of the array in a struct of type <ref refid="structChar" kindref="compound">Char</ref>.</para>
<para>/param vec A vector struct container of type <ref refid="structChar" kindref="compound">Char</ref></para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_char_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">char<sp/>a[4]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_char_vector(&amp;vec,<sp/>a,<sp/>4,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">reverse_char_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2232" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2232" bodyend="2244"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a42deacd361fac959a84262a54ebddcb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reverse_uchar_vector</definition>
        <argsstring>(UChar *vec)</argsstring>
        <name>reverse_uchar_vector</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will reverse the order of the array in a struct of type <ref refid="structUChar" kindref="compound">UChar</ref>.</para>
<para>/param vec A vector struct container of type <ref refid="structChar" kindref="compound">Char</ref></para>
<para><programlisting><codeline><highlight class="normal">UChar<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uchar_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>char<sp/>a[4]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_uchar_vector(&amp;vec,<sp/>a,<sp/>4,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">reverse_uchar_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uchar_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2247" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2247" bodyend="2259"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a9b58a773830487b8a8f1973221e93366" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reverse_bool_vector</definition>
        <argsstring>(Bool *vec)</argsstring>
        <name>reverse_bool_vector</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will reverse the order of the array in a struct of type <ref refid="structBool" kindref="compound">Bool</ref>.</para>
<para>/param vec A vector struct container of type <ref refid="structBool" kindref="compound">Bool</ref></para>
<para><programlisting><codeline><highlight class="normal">Bool<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_bool_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>a[4]<sp/>=<sp/>{true,<sp/>true,<sp/>false,<sp/>false};</highlight></codeline>
<codeline><highlight class="normal">insert_bool_vector(&amp;vec,<sp/>a,<sp/>4,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">reverse_bool_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_bool_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2262" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2262" bodyend="2274"/>
        <references refid="structBool_1a5445f6ef94d239208dc797c289fded75" compoundref="vector_8h" startline="90">Bool::active_length</references>
        <references refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" compoundref="vector_8h" startline="90">Bool::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a6297710c0ac2122db93e47a260e96ad8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reverse_string_vector</definition>
        <argsstring>(String *vec)</argsstring>
        <name>reverse_string_vector</name>
        <param>
          <type><ref refid="structString" kindref="compound">String</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will reverse the order of the array in a struct of type <ref refid="structString" kindref="compound">String</ref>.</para>
<para>/param vec A vector struct container of type <ref refid="structString" kindref="compound">String</ref></para>
<para><programlisting><codeline><highlight class="normal">String<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_string_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">push_string_vec(&amp;vec,<sp/>&quot;One&quot;,<sp/>vec.active_length)</highlight></codeline>
<codeline><highlight class="normal">push_string_vec(&amp;vec,<sp/>&quot;Two&quot;,<sp/>vec.active_length)</highlight></codeline>
<codeline><highlight class="normal">push_string_vec(&amp;vec,<sp/>&quot;Three&quot;,<sp/>vec.active_length)</highlight></codeline>
<codeline><highlight class="normal">push_string_vec(&amp;vec,<sp/>&quot;Four&quot;,<sp/>vec.active_length)</highlight></codeline>
<codeline><highlight class="normal">reverse_string_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>Four,<sp/>Three,<sp/>Two,<sp/>One<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_string_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2277" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2277" bodyend="2288"/>
        <references refid="structString_1a706ffaf2f520d46074dd99e7896d6673" compoundref="vector_8h" startline="97">String::active_length</references>
        <references refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" compoundref="vector_8h" startline="96">String::array</references>
        <references refid="vector_8c_1a4db2688e1c0d0d477c8a7168d811956d" compoundref="vector_8c" startline="1547" endline="1567">pop_string_vector_index</references>
        <references refid="vector_8c_1a078616c26d55c1ddb2ec4c551298a4f8" compoundref="vector_8c" startline="811" endline="829">push_string_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a733f65fe54a66141bb719d0e949f61d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t partition_short_vec</definition>
        <argsstring>(short int *arr, size_t low, size_t high, sort_order order)</argsstring>
        <name>partition_short_vec</name>
        <param>
          <type>short int *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2293" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2293" bodyend="2321"/>
        <references refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" compoundref="vector_8h" startline="49">FORWARD</references>
        <references refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" compoundref="data__structures_8h" startline="304" endline="318">REVERSE</references>
        <referencedby refid="vector_8c_1a04f50afe6c127edeea202b08ad65f36a" compoundref="vector_8c" startline="2323" endline="2330">sort_short_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a04f50afe6c127edeea202b08ad65f36a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sort_short_vector</definition>
        <argsstring>(Short *vec, size_t low, size_t high, sort_order order)</argsstring>
        <name>sort_short_vector</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will sort a vector data structure of type <ref refid="structShort" kindref="compound">Short</ref> in forward or reverse order</para>
<para>/param vec A vector data structure of type <ref refid="structShort" kindref="compound">Short</ref> /param low The lowest indice for partitioning, recommended to be 0 /param high The highest indice for sorting, recommended to be the last index in the data structure /param order FORWARD for a forward sort, REVERSE for a reverse sort</para>
<para><programlisting><codeline><highlight class="normal">Short<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_short_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">short<sp/>int<sp/>a[5]<sp/>=<sp/>{4,<sp/>2,<sp/>1,<sp/>3,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_short_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">sort_short_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>FORWARD);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5<sp/>]</highlight></codeline>
<codeline><highlight class="normal">sort_short_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>REVERSE);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>5,<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_short_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2323" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2323" bodyend="2330"/>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
        <references refid="vector_8c_1a733f65fe54a66141bb719d0e949f61d3" compoundref="vector_8c" startline="2293" endline="2321">partition_short_vec</references>
        <references refid="vector_8c_1a04f50afe6c127edeea202b08ad65f36a" compoundref="vector_8c" startline="2323" endline="2330">sort_short_vector</references>
        <referencedby refid="vector_8c_1a04f50afe6c127edeea202b08ad65f36a" compoundref="vector_8c" startline="2323" endline="2330">sort_short_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ac3a8bea84161a65f8360d4eeb093cbd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t partition_ushort_vec</definition>
        <argsstring>(unsigned short int *arr, size_t low, size_t high, sort_order order)</argsstring>
        <name>partition_ushort_vec</name>
        <param>
          <type>unsigned short int *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2333" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2333" bodyend="2361"/>
        <references refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" compoundref="vector_8h" startline="49">FORWARD</references>
        <references refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" compoundref="data__structures_8h" startline="304" endline="318">REVERSE</references>
        <referencedby refid="vector_8c_1a68df688dc04c74d9e826b629ef0f98c3" compoundref="vector_8c" startline="2363" endline="2370">sort_ushort_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a68df688dc04c74d9e826b629ef0f98c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sort_ushort_vector</definition>
        <argsstring>(UShort *vec, size_t low, size_t high, sort_order order)</argsstring>
        <name>sort_ushort_vector</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will sort a vector data structure of type <ref refid="structUShort" kindref="compound">UShort</ref> in forward or reverse order</para>
<para>/param vec A vector data structure of type <ref refid="structUShort" kindref="compound">UShort</ref> /param low The lowest indice for partitioning, recommended to be 0 /param high The highest indice for sorting, recommended to be the last index in the data structure /param order FORWARD for a forward sort, REVERSE for a reverse sort</para>
<para><programlisting><codeline><highlight class="normal">UShort<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ushort_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>short<sp/>int<sp/>a[5]<sp/>=<sp/>{4,<sp/>2,<sp/>1,<sp/>3,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ushort_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">sort_ushort_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>FORWARD);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5<sp/>]</highlight></codeline>
<codeline><highlight class="normal">sort_ushort_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>REVERSE);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>5,<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ushort_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2363" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2363" bodyend="2370"/>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
        <references refid="vector_8c_1ac3a8bea84161a65f8360d4eeb093cbd3" compoundref="vector_8c" startline="2333" endline="2361">partition_ushort_vec</references>
        <references refid="vector_8c_1a68df688dc04c74d9e826b629ef0f98c3" compoundref="vector_8c" startline="2363" endline="2370">sort_ushort_vector</references>
        <referencedby refid="vector_8c_1a68df688dc04c74d9e826b629ef0f98c3" compoundref="vector_8c" startline="2363" endline="2370">sort_ushort_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a9291e007042fe27de97889aae04af104" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t partition_int_vec</definition>
        <argsstring>(int *arr, size_t low, size_t high, sort_order order)</argsstring>
        <name>partition_int_vec</name>
        <param>
          <type>int *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2373" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2373" bodyend="2401"/>
        <references refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" compoundref="vector_8h" startline="49">FORWARD</references>
        <references refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" compoundref="data__structures_8h" startline="304" endline="318">REVERSE</references>
        <referencedby refid="vector_8c_1a722d90a04d08a5ece84ba7a2b8d04d6d" compoundref="vector_8c" startline="2403" endline="2410">sort_int_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a722d90a04d08a5ece84ba7a2b8d04d6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sort_int_vector</definition>
        <argsstring>(Int *vec, size_t low, size_t high, sort_order order)</argsstring>
        <name>sort_int_vector</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will sort a vector data structure of type <ref refid="structInt" kindref="compound">Int</ref> in forward or reverse order</para>
<para>/param vec A vector data structure of type <ref refid="structInt" kindref="compound">Int</ref> /param low The lowest indice for partitioning, recommended to be 0 /param high The highest indice for sorting, recommended to be the last index in the data structure /param order FORWARD for a forward sort, REVERSE for a reverse sort</para>
<para><programlisting><codeline><highlight class="normal">Int<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_int_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>a[5]<sp/>=<sp/>{4,<sp/>2,<sp/>1,<sp/>3,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_int_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">sort_int_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>FORWARD);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5<sp/>]</highlight></codeline>
<codeline><highlight class="normal">sort_int_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>REVERSE);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>5,<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_int_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2403" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2403" bodyend="2410"/>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
        <references refid="vector_8c_1a9291e007042fe27de97889aae04af104" compoundref="vector_8c" startline="2373" endline="2401">partition_int_vec</references>
        <references refid="vector_8c_1a722d90a04d08a5ece84ba7a2b8d04d6d" compoundref="vector_8c" startline="2403" endline="2410">sort_int_vector</references>
        <referencedby refid="vector_8c_1a722d90a04d08a5ece84ba7a2b8d04d6d" compoundref="vector_8c" startline="2403" endline="2410">sort_int_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1af66367b43aad62db18cd1e46cc4b7cec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t partition_uint_vec</definition>
        <argsstring>(unsigned int *arr, size_t low, size_t high, sort_order order)</argsstring>
        <name>partition_uint_vec</name>
        <param>
          <type>unsigned int *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2413" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2413" bodyend="2441"/>
        <references refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" compoundref="vector_8h" startline="49">FORWARD</references>
        <references refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" compoundref="data__structures_8h" startline="304" endline="318">REVERSE</references>
        <referencedby refid="vector_8c_1a451f6cb1a5b4b2e77c1170c85656c3c6" compoundref="vector_8c" startline="2443" endline="2450">sort_uint_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a451f6cb1a5b4b2e77c1170c85656c3c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sort_uint_vector</definition>
        <argsstring>(UInt *vec, size_t low, size_t high, sort_order order)</argsstring>
        <name>sort_uint_vector</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will sort a vector data structure of type <ref refid="structUInt" kindref="compound">UInt</ref> in forward or reverse order</para>
<para>/param vec A vector data structure of type <ref refid="structUInt" kindref="compound">UInt</ref> /param low The lowest indice for partitioning, recommended to be 0 /param high The highest indice for sorting, recommended to be the last index in the data structure /param order FORWARD for a forward sort, REVERSE for a reverse sort</para>
<para><programlisting><codeline><highlight class="normal">UInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uint_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>int<sp/>a[5]<sp/>=<sp/>{4,<sp/>2,<sp/>1,<sp/>3,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_uint_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">sort_uint_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>FORWARD);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5<sp/>]</highlight></codeline>
<codeline><highlight class="normal">sort_uint_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>REVERSE);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>5,<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uint_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2443" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2443" bodyend="2450"/>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
        <references refid="vector_8c_1af66367b43aad62db18cd1e46cc4b7cec" compoundref="vector_8c" startline="2413" endline="2441">partition_uint_vec</references>
        <references refid="vector_8c_1a451f6cb1a5b4b2e77c1170c85656c3c6" compoundref="vector_8c" startline="2443" endline="2450">sort_uint_vector</references>
        <referencedby refid="vector_8c_1a451f6cb1a5b4b2e77c1170c85656c3c6" compoundref="vector_8c" startline="2443" endline="2450">sort_uint_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a71e22c969cc1802f99227e9bcf1d700c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t partition_long_vec</definition>
        <argsstring>(long int *arr, size_t low, size_t high, sort_order order)</argsstring>
        <name>partition_long_vec</name>
        <param>
          <type>long int *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2453" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2453" bodyend="2481"/>
        <references refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" compoundref="vector_8h" startline="49">FORWARD</references>
        <references refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" compoundref="data__structures_8h" startline="304" endline="318">REVERSE</references>
        <referencedby refid="vector_8c_1a573e6f77db28f1a05eefd8a982f850c7" compoundref="vector_8c" startline="2483" endline="2490">sort_long_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a573e6f77db28f1a05eefd8a982f850c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sort_long_vector</definition>
        <argsstring>(LInt *vec, size_t low, size_t high, sort_order order)</argsstring>
        <name>sort_long_vector</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will sort a vector data structure of type <ref refid="structLInt" kindref="compound">LInt</ref> in forward or reverse order</para>
<para>/param vec A vector data structure of type <ref refid="structLInt" kindref="compound">LInt</ref> /param low The lowest indice for partitioning, recommended to be 0 /param high The highest indice for sorting, recommended to be the last index in the data structure /param order FORWARD for a forward sort, REVERSE for a reverse sort</para>
<para><programlisting><codeline><highlight class="normal">LInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_long_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>int<sp/>a[5]<sp/>=<sp/>{4,<sp/>2,<sp/>1,<sp/>3,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_long_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">sort_long_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>FORWARD);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5<sp/>]</highlight></codeline>
<codeline><highlight class="normal">sort_long_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>REVERSE);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>5,<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_long_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2483" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2483" bodyend="2490"/>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
        <references refid="vector_8c_1a71e22c969cc1802f99227e9bcf1d700c" compoundref="vector_8c" startline="2453" endline="2481">partition_long_vec</references>
        <references refid="vector_8c_1a573e6f77db28f1a05eefd8a982f850c7" compoundref="vector_8c" startline="2483" endline="2490">sort_long_vector</references>
        <referencedby refid="vector_8c_1a573e6f77db28f1a05eefd8a982f850c7" compoundref="vector_8c" startline="2483" endline="2490">sort_long_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a2c22f32a95c9b5810e941f4f646cc3a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t partition_ulong_vec</definition>
        <argsstring>(unsigned long int *arr, size_t low, size_t high, sort_order order)</argsstring>
        <name>partition_ulong_vec</name>
        <param>
          <type>unsigned long int *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2493" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2493" bodyend="2521"/>
        <references refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" compoundref="vector_8h" startline="49">FORWARD</references>
        <references refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" compoundref="data__structures_8h" startline="304" endline="318">REVERSE</references>
        <referencedby refid="vector_8c_1adf53d931d4b9c3ab9d62298b6d3df5cd" compoundref="vector_8c" startline="2523" endline="2530">sort_ulong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1adf53d931d4b9c3ab9d62298b6d3df5cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sort_ulong_vector</definition>
        <argsstring>(ULInt *vec, size_t low, size_t high, sort_order order)</argsstring>
        <name>sort_ulong_vector</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will sort a vector data structure of type <ref refid="structULInt" kindref="compound">ULInt</ref> in forward or reverse order</para>
<para>/param vec A vector data structure of type <ref refid="structULInt" kindref="compound">ULInt</ref> /param low The lowest indice for partitioning, recommended to be 0 /param high The highest indice for sorting, recommended to be the last index in the data structure /param order FORWARD for a forward sort, REVERSE for a reverse sort</para>
<para><programlisting><codeline><highlight class="normal">ULInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ulong_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{4,<sp/>2,<sp/>1,<sp/>3,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ulong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">sort_ulong_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>FORWARD);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5<sp/>]</highlight></codeline>
<codeline><highlight class="normal">sort_ulong_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>REVERSE);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>5,<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ulong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2523" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2523" bodyend="2530"/>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
        <references refid="vector_8c_1a2c22f32a95c9b5810e941f4f646cc3a6" compoundref="vector_8c" startline="2493" endline="2521">partition_ulong_vec</references>
        <references refid="vector_8c_1adf53d931d4b9c3ab9d62298b6d3df5cd" compoundref="vector_8c" startline="2523" endline="2530">sort_ulong_vector</references>
        <referencedby refid="vector_8c_1adf53d931d4b9c3ab9d62298b6d3df5cd" compoundref="vector_8c" startline="2523" endline="2530">sort_ulong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a4004e007143a87427417e8da73d54230" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t partition_llong_vec</definition>
        <argsstring>(long long int *arr, size_t low, size_t high, sort_order order)</argsstring>
        <name>partition_llong_vec</name>
        <param>
          <type>long long int *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2533" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2533" bodyend="2561"/>
        <references refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" compoundref="vector_8h" startline="49">FORWARD</references>
        <references refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" compoundref="data__structures_8h" startline="304" endline="318">REVERSE</references>
        <referencedby refid="vector_8c_1ab1183f9c1a6c8a6d60b4457421e3072a" compoundref="vector_8c" startline="2563" endline="2570">sort_llong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ab1183f9c1a6c8a6d60b4457421e3072a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sort_llong_vector</definition>
        <argsstring>(LLInt *vec, size_t low, size_t high, sort_order order)</argsstring>
        <name>sort_llong_vector</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will sort a vector data structure of type <ref refid="structLLInt" kindref="compound">LLInt</ref> in forward or reverse order</para>
<para>/param vec A vector data structure of type <ref refid="structLLInt" kindref="compound">LLInt</ref> /param low The lowest indice for partitioning, recommended to be 0 /param high The highest indice for sorting, recommended to be the last index in the data structure /param order FORWARD for a forward sort, REVERSE for a reverse sort</para>
<para><programlisting><codeline><highlight class="normal">LLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_llong_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{4,<sp/>2,<sp/>1,<sp/>3,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_llong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">sort_llong_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>FORWARD);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5<sp/>]</highlight></codeline>
<codeline><highlight class="normal">sort_llong_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>REVERSE);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>5,<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_llong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2563" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2563" bodyend="2570"/>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
        <references refid="vector_8c_1a4004e007143a87427417e8da73d54230" compoundref="vector_8c" startline="2533" endline="2561">partition_llong_vec</references>
        <references refid="vector_8c_1ab1183f9c1a6c8a6d60b4457421e3072a" compoundref="vector_8c" startline="2563" endline="2570">sort_llong_vector</references>
        <referencedby refid="vector_8c_1ab1183f9c1a6c8a6d60b4457421e3072a" compoundref="vector_8c" startline="2563" endline="2570">sort_llong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ae3896d0e36902ed7dbe6ff6be0ad0bdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t partition_ullong_vec</definition>
        <argsstring>(unsigned long long int *arr, size_t low, size_t high, sort_order order)</argsstring>
        <name>partition_ullong_vec</name>
        <param>
          <type>unsigned long long int *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2573" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2573" bodyend="2601"/>
        <references refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" compoundref="vector_8h" startline="49">FORWARD</references>
        <references refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" compoundref="data__structures_8h" startline="304" endline="318">REVERSE</references>
        <referencedby refid="vector_8c_1a3d45fbf7b754bf4bad8be3cbb6241a84" compoundref="vector_8c" startline="2603" endline="2610">sort_ullong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a3d45fbf7b754bf4bad8be3cbb6241a84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sort_ullong_vector</definition>
        <argsstring>(ULLInt *vec, size_t low, size_t high, sort_order order)</argsstring>
        <name>sort_ullong_vector</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will sort a vector data structure of type <ref refid="structULLInt" kindref="compound">ULLInt</ref> in forward or reverse order</para>
<para>/param vec A vector data structure of type <ref refid="structULLInt" kindref="compound">ULLInt</ref> /param low The lowest indice for partitioning, recommended to be 0 /param high The highest indice for sorting, recommended to be the last index in the data structure /param order FORWARD for a forward sort, REVERSE for a reverse sort</para>
<para><programlisting><codeline><highlight class="normal">ULLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ullong_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{4,<sp/>2,<sp/>1,<sp/>3,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ullong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">sort_ullong_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>FORWARD);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5<sp/>]</highlight></codeline>
<codeline><highlight class="normal">sort_ullong_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>REVERSE);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>5,<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ullong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2603" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2603" bodyend="2610"/>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
        <references refid="vector_8c_1ae3896d0e36902ed7dbe6ff6be0ad0bdb" compoundref="vector_8c" startline="2573" endline="2601">partition_ullong_vec</references>
        <references refid="vector_8c_1a3d45fbf7b754bf4bad8be3cbb6241a84" compoundref="vector_8c" startline="2603" endline="2610">sort_ullong_vector</references>
        <referencedby refid="vector_8c_1a3d45fbf7b754bf4bad8be3cbb6241a84" compoundref="vector_8c" startline="2603" endline="2610">sort_ullong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ab0096154a48a231a8822d6fc801374f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t partition_float_vec</definition>
        <argsstring>(float *arr, size_t low, size_t high, sort_order order)</argsstring>
        <name>partition_float_vec</name>
        <param>
          <type>float *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2613" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2613" bodyend="2641"/>
        <references refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" compoundref="vector_8h" startline="49">FORWARD</references>
        <references refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" compoundref="data__structures_8h" startline="304" endline="318">REVERSE</references>
        <referencedby refid="vector_8c_1aa3e927c35eb4eb79cb87d6df026e01a1" compoundref="vector_8c" startline="2643" endline="2650">sort_float_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1aa3e927c35eb4eb79cb87d6df026e01a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sort_float_vector</definition>
        <argsstring>(Flt *vec, size_t low, size_t high, sort_order order)</argsstring>
        <name>sort_float_vector</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will sort a vector data structure of type <ref refid="structFlt" kindref="compound">Flt</ref> in forward or reverse order</para>
<para>/param vec A vector data structure of type <ref refid="structFlt" kindref="compound">Flt</ref> /param low The lowest indice for partitioning, recommended to be 0 /param high The highest indice for sorting, recommended to be the last index in the data structure /param order FORWARD for a forward sort, REVERSE for a reverse sort</para>
<para><programlisting><codeline><highlight class="normal">Flt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_float_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>a[5]<sp/>=<sp/>{4.,<sp/>2.,<sp/>1.,<sp/>3.,<sp/>5.};</highlight></codeline>
<codeline><highlight class="normal">insert_float_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">sort_float_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>FORWARD);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1.,<sp/>2.,<sp/>3.,<sp/>4.,<sp/>5.<sp/>]</highlight></codeline>
<codeline><highlight class="normal">sort_float_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>REVERSE);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>5.,<sp/>4.,<sp/>3.,<sp/>2.,<sp/>1.<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_float_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2643" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2643" bodyend="2650"/>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
        <references refid="vector_8c_1ab0096154a48a231a8822d6fc801374f2" compoundref="vector_8c" startline="2613" endline="2641">partition_float_vec</references>
        <references refid="vector_8c_1aa3e927c35eb4eb79cb87d6df026e01a1" compoundref="vector_8c" startline="2643" endline="2650">sort_float_vector</references>
        <referencedby refid="vector_8c_1aa3e927c35eb4eb79cb87d6df026e01a1" compoundref="vector_8c" startline="2643" endline="2650">sort_float_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a4e98e06a0ba8a79c81fece259b4bba7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t partition_double_vec</definition>
        <argsstring>(double *arr, size_t low, size_t high, sort_order order)</argsstring>
        <name>partition_double_vec</name>
        <param>
          <type>double *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2653" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2653" bodyend="2681"/>
        <references refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" compoundref="vector_8h" startline="49">FORWARD</references>
        <references refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" compoundref="data__structures_8h" startline="304" endline="318">REVERSE</references>
        <referencedby refid="vector_8c_1aa461bbfa3be53bc5dc4c56c94fb7fa62" compoundref="vector_8c" startline="2683" endline="2690">sort_double_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1aa461bbfa3be53bc5dc4c56c94fb7fa62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sort_double_vector</definition>
        <argsstring>(Dble *vec, size_t low, size_t high, sort_order order)</argsstring>
        <name>sort_double_vector</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will sort a vector data structure of type <ref refid="structDble" kindref="compound">Dble</ref> in forward or reverse order</para>
<para>/param vec A vector data structure of type <ref refid="structDble" kindref="compound">Dble</ref> /param low The lowest indice for partitioning, recommended to be 0 /param high The highest indice for sorting, recommended to be the last index in the data structure /param order FORWARD for a forward sort, REVERSE for a reverse sort</para>
<para><programlisting><codeline><highlight class="normal">Dble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_double_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>a[5]<sp/>=<sp/>{4.,<sp/>2.,<sp/>1.,<sp/>3.,<sp/>5.};</highlight></codeline>
<codeline><highlight class="normal">insert_double_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">sort_double_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>FORWARD);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1.,<sp/>2.,<sp/>3.,<sp/>4.,<sp/>5.<sp/>]</highlight></codeline>
<codeline><highlight class="normal">sort_double_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>REVERSE);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>5.,<sp/>4.,<sp/>3.,<sp/>2.,<sp/>1.<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_double_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2683" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2683" bodyend="2690"/>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
        <references refid="vector_8c_1a4e98e06a0ba8a79c81fece259b4bba7a" compoundref="vector_8c" startline="2653" endline="2681">partition_double_vec</references>
        <references refid="vector_8c_1aa461bbfa3be53bc5dc4c56c94fb7fa62" compoundref="vector_8c" startline="2683" endline="2690">sort_double_vector</references>
        <referencedby refid="vector_8c_1aa461bbfa3be53bc5dc4c56c94fb7fa62" compoundref="vector_8c" startline="2683" endline="2690">sort_double_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a849b2e9bd838ba45444b89a094e09c93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t partition_ldouble_vec</definition>
        <argsstring>(long double *arr, size_t low, size_t high, sort_order order)</argsstring>
        <name>partition_ldouble_vec</name>
        <param>
          <type>long double *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2693" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2693" bodyend="2721"/>
        <references refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" compoundref="vector_8h" startline="49">FORWARD</references>
        <references refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" compoundref="data__structures_8h" startline="304" endline="318">REVERSE</references>
        <referencedby refid="vector_8c_1a3745eaf35ed1dfbae01e83d5b93e185d" compoundref="vector_8c" startline="2723" endline="2730">sort_ldouble_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a3745eaf35ed1dfbae01e83d5b93e185d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sort_ldouble_vector</definition>
        <argsstring>(LDble *vec, size_t low, size_t high, sort_order order)</argsstring>
        <name>sort_ldouble_vector</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will sort a vector data structure of type <ref refid="structLDble" kindref="compound">LDble</ref> in forward or reverse order</para>
<para>/param vec A vector data structure of type <ref refid="structLDble" kindref="compound">LDble</ref> /param low The lowest indice for partitioning, recommended to be 0 /param high The highest indice for sorting, recommended to be the last index in the data structure /param order FORWARD for a forward sort, REVERSE for a reverse sort</para>
<para><programlisting><codeline><highlight class="normal">LDble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ldouble_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>a[5]<sp/>=<sp/>{4.,<sp/>2.,<sp/>1.,<sp/>3.,<sp/>5.};</highlight></codeline>
<codeline><highlight class="normal">insert_ldouble_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">sort_ldouble_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>FORWARD);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1.,<sp/>2.,<sp/>3.,<sp/>4.,<sp/>5.<sp/>]</highlight></codeline>
<codeline><highlight class="normal">sort_ldouble_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>REVERSE);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>5.,<sp/>4.,<sp/>3.,<sp/>2.,<sp/>1.<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ldouble_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2723" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2723" bodyend="2730"/>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
        <references refid="vector_8c_1a849b2e9bd838ba45444b89a094e09c93" compoundref="vector_8c" startline="2693" endline="2721">partition_ldouble_vec</references>
        <references refid="vector_8c_1a3745eaf35ed1dfbae01e83d5b93e185d" compoundref="vector_8c" startline="2723" endline="2730">sort_ldouble_vector</references>
        <referencedby refid="vector_8c_1a3745eaf35ed1dfbae01e83d5b93e185d" compoundref="vector_8c" startline="2723" endline="2730">sort_ldouble_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a57c275128b0df646fc41ada5fd04777c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t partition_char_vec</definition>
        <argsstring>(char *arr, size_t low, size_t high, sort_order order)</argsstring>
        <name>partition_char_vec</name>
        <param>
          <type>char *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2733" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2733" bodyend="2761"/>
        <references refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" compoundref="vector_8h" startline="49">FORWARD</references>
        <references refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" compoundref="data__structures_8h" startline="304" endline="318">REVERSE</references>
        <referencedby refid="vector_8c_1a0c29cab75728310a3b5b78681af2df21" compoundref="vector_8c" startline="2763" endline="2770">sort_char_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a0c29cab75728310a3b5b78681af2df21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sort_char_vector</definition>
        <argsstring>(Char *vec, size_t low, size_t high, sort_order order)</argsstring>
        <name>sort_char_vector</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will sort a vector data structure of type <ref refid="structChar" kindref="compound">Char</ref> in forward or reverse order</para>
<para>/param vec A vector data structure of type <ref refid="structChar" kindref="compound">Char</ref> /param low The lowest indice for partitioning, recommended to be 0 /param high The highest indice for sorting, recommended to be the last index in the data structure /param order FORWARD for a forward sort, REVERSE for a reverse sort</para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_char_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">char<sp/>a[5]<sp/>=<sp/>{&apos;e&apos;,<sp/>&apos;b&apos;,<sp/>&apos;a&apos;,<sp/>&apos;c&apos;,<sp/>&apos;e&apos;};</highlight></codeline>
<codeline><highlight class="normal">insert_char_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">sort_char_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>FORWARD);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>a,<sp/>b,<sp/>c,<sp/>d,<sp/>e<sp/>]</highlight></codeline>
<codeline><highlight class="normal">sort_ldouble_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>REVERSE);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>e,<sp/>d,<sp/>c,<sp/>b,<sp/>a<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">FREE(vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2763" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2763" bodyend="2770"/>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
        <references refid="vector_8c_1a57c275128b0df646fc41ada5fd04777c" compoundref="vector_8c" startline="2733" endline="2761">partition_char_vec</references>
        <references refid="vector_8c_1a0c29cab75728310a3b5b78681af2df21" compoundref="vector_8c" startline="2763" endline="2770">sort_char_vector</references>
        <referencedby refid="vector_8c_1a0c29cab75728310a3b5b78681af2df21" compoundref="vector_8c" startline="2763" endline="2770">sort_char_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1aa8bc922ebe7bc36d428a6578886c3e37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t partition_bool_vec</definition>
        <argsstring>(bool *arr, size_t low, size_t high, sort_order order)</argsstring>
        <name>partition_bool_vec</name>
        <param>
          <type>bool *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2773" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2773" bodyend="2801"/>
        <references refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" compoundref="vector_8h" startline="49">FORWARD</references>
        <references refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" compoundref="data__structures_8h" startline="304" endline="318">REVERSE</references>
        <referencedby refid="vector_8c_1a68744cde4b7c17a0305d9cf512494a20" compoundref="vector_8c" startline="2803" endline="2810">sort_bool_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a68744cde4b7c17a0305d9cf512494a20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sort_bool_vector</definition>
        <argsstring>(Bool *vec, size_t low, size_t high, sort_order order)</argsstring>
        <name>sort_bool_vector</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will sort a vector data structure of type <ref refid="structBool" kindref="compound">Bool</ref> in forward or reverse order</para>
<para>/param vec A vector data structure of type <ref refid="structBool" kindref="compound">Bool</ref> /param low The lowest indice for partitioning, recommended to be 0 /param high The highest indice for sorting, recommended to be the last index in the data structure /param order FORWARD for a forward sort, REVERSE for a reverse sort</para>
<para><programlisting><codeline><highlight class="normal">Bool<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_bool_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>a[5]<sp/>=<sp/>{true,<sp/>false,<sp/>true,<sp/>false,<sp/>true};</highlight></codeline>
<codeline><highlight class="normal">insert_bool_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">sort_bool_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>FORWARD);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>true,<sp/>true,<sp/>true,<sp/>false,<sp/>false<sp/>]</highlight></codeline>
<codeline><highlight class="normal">sort_bool_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>REVERSE);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>false,<sp/>false,<sp/>true,<sp/>true,<sp/>true<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_bool_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">FREE(vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2803" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2803" bodyend="2810"/>
        <references refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" compoundref="vector_8h" startline="90">Bool::array</references>
        <references refid="vector_8c_1aa8bc922ebe7bc36d428a6578886c3e37" compoundref="vector_8c" startline="2773" endline="2801">partition_bool_vec</references>
        <references refid="vector_8c_1a68744cde4b7c17a0305d9cf512494a20" compoundref="vector_8c" startline="2803" endline="2810">sort_bool_vector</references>
        <referencedby refid="vector_8c_1a68744cde4b7c17a0305d9cf512494a20" compoundref="vector_8c" startline="2803" endline="2810">sort_bool_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ae854e33b1f9bfc9230078cdd22f90179" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t partition_uchar_vec</definition>
        <argsstring>(unsigned char *arr, size_t low, size_t high, sort_order order)</argsstring>
        <name>partition_uchar_vec</name>
        <param>
          <type>unsigned char *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2813" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2813" bodyend="2841"/>
        <references refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" compoundref="vector_8h" startline="49">FORWARD</references>
        <references refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" compoundref="data__structures_8h" startline="304" endline="318">REVERSE</references>
        <referencedby refid="vector_8c_1a88af2cb1285800957b1de71e783ee93a" compoundref="vector_8c" startline="2843" endline="2850">sort_uchar_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a88af2cb1285800957b1de71e783ee93a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sort_uchar_vector</definition>
        <argsstring>(UChar *vec, size_t low, size_t high, sort_order order)</argsstring>
        <name>sort_uchar_vector</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will sort a vector data structure of type <ref refid="structUChar" kindref="compound">UChar</ref> in forward or reverse order</para>
<para>/param vec A vector data structure of type <ref refid="structUChar" kindref="compound">UChar</ref> /param low The lowest indice for partitioning, recommended to be 0 /param high The highest indice for sorting, recommended to be the last index in the data structure /param order FORWARD for a forward sort, REVERSE for a reverse sort</para>
<para><programlisting><codeline><highlight class="normal">UChar<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uchar_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>char<sp/>a[5]<sp/>=<sp/>{&apos;e&apos;,<sp/>&apos;b&apos;,<sp/>&apos;a&apos;,<sp/>&apos;c&apos;,<sp/>&apos;e&apos;};</highlight></codeline>
<codeline><highlight class="normal">insert_uchar_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">sort_uchar_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>FORWARD);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>a,<sp/>b,<sp/>c,<sp/>d,<sp/>e<sp/>]</highlight></codeline>
<codeline><highlight class="normal">sort_uchar_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>REVERSE);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>e,<sp/>d,<sp/>c,<sp/>b,<sp/>a<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uchar_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">FREE(vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2843" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2843" bodyend="2850"/>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
        <references refid="vector_8c_1ae854e33b1f9bfc9230078cdd22f90179" compoundref="vector_8c" startline="2813" endline="2841">partition_uchar_vec</references>
        <references refid="vector_8c_1a88af2cb1285800957b1de71e783ee93a" compoundref="vector_8c" startline="2843" endline="2850">sort_uchar_vector</references>
        <referencedby refid="vector_8c_1a88af2cb1285800957b1de71e783ee93a" compoundref="vector_8c" startline="2843" endline="2850">sort_uchar_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a18f583c57c4938edf4ea7374eddf069e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int forward_comparator</definition>
        <argsstring>(const void *str1, const void *str2)</argsstring>
        <name>forward_comparator</name>
        <param>
          <type>const void *</type>
          <declname>str1</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>str2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2853" column="12" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2853" bodyend="2858"/>
        <referencedby refid="vector_8c_1aead9f94df495db661d185ef0363ec1d6" compoundref="vector_8c" startline="2867" endline="2872">sort_string_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1aff059eec91dab02d46903ebe9591e061" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int reverse_comparator</definition>
        <argsstring>(const void *str1, const void *str2)</argsstring>
        <name>reverse_comparator</name>
        <param>
          <type>const void *</type>
          <declname>str1</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>str2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2860" column="12" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2860" bodyend="2865"/>
        <referencedby refid="vector_8c_1aead9f94df495db661d185ef0363ec1d6" compoundref="vector_8c" startline="2867" endline="2872">sort_string_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1aead9f94df495db661d185ef0363ec1d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sort_string_vector</definition>
        <argsstring>(String *vec, size_t low, size_t high, sort_order order)</argsstring>
        <name>sort_string_vector</name>
        <param>
          <type><ref refid="structString" kindref="compound">String</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will sort a vector structure of type <ref refid="structString" kindref="compound">String</ref> in forward or reverse order</para>
<para>/param vec A vector data structure of type <ref refid="structString" kindref="compound">String</ref> /param low the lowest indice for parittioning, recommended to be 0 /param high The highest indice for sorting, recommended to be the last index /param order FORWARD for a forward sort, REVERSE for a reverse sort</para>
<para><programlisting><codeline><highlight class="normal">String<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_string_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(&amp;vec,<sp/>&quot;Xylaphone&quot;,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(&amp;vec,<sp/>&quot;Apple&quot;,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(&amp;vec,<sp/>&quot;Cucumber&quot;,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(&amp;vec,<sp/>&quot;Banana&quot;,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">sort_string_vector(&amp;vec,<sp/>0,<sp/>vec.active_length,<sp/>FORWARD);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>Apple,<sp/>Banana,<sp/>Cucumber,<sp/>Xylaphone<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_string_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2867" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2867" bodyend="2872"/>
        <references refid="structString_1a706ffaf2f520d46074dd99e7896d6673" compoundref="vector_8h" startline="97">String::active_length</references>
        <references refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" compoundref="vector_8h" startline="96">String::array</references>
        <references refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" compoundref="vector_8h" startline="49">FORWARD</references>
        <references refid="vector_8c_1a18f583c57c4938edf4ea7374eddf069e" compoundref="vector_8c" startline="2853" endline="2858">forward_comparator</references>
        <references refid="vector_8c_1aff059eec91dab02d46903ebe9591e061" compoundref="vector_8c" startline="2860" endline="2865">reverse_comparator</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a0684e2f1aee143f1769dd8ff908c852c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char sum_char_vector</definition>
        <argsstring>(Char *vec)</argsstring>
        <name>sum_char_vector</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will calculate the sum of the values in a vector data structure of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para>/param vec A vector data structure of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_short_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">char<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_char_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">char<sp/>sum_value<sp/>=<sp/>sum_char_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>15</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2877" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2877" bodyend="2883"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
        <referencedby refid="vector_8c_1a0a47e22454ec90b6c959915dbc3c87a6" compoundref="vector_8c" startline="3154" endline="3158">average_char_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a643cb8d97c368f436a0010dacfca2401" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char</type>
        <definition>unsigned char sum_uchar_vector</definition>
        <argsstring>(UChar *vec)</argsstring>
        <name>sum_uchar_vector</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will calculate the sum of the values in a vector data structure of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para>/param vec A vector data structure of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para><programlisting><codeline><highlight class="normal">UChar<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uchar_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsgined<sp/>char<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_uchar_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>char<sp/>sum_value<sp/>=<sp/>sum_uchar_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>15</highlight></codeline>
<codeline><highlight class="normal">free_uchar_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2886" column="15" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2886" bodyend="2892"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
        <referencedby refid="vector_8c_1ad821bfcf3659a78a11a5c9c7fd72a277" compoundref="vector_8c" startline="3161" endline="3165">average_uchar_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a54d410de6d79f482b3d560bcb78fd2ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>short int</type>
        <definition>short int sum_short_vector</definition>
        <argsstring>(Short *vec)</argsstring>
        <name>sum_short_vector</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will calculate the sum of the values in a vector data structure of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para>/param vec A vector data structure of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para><programlisting><codeline><highlight class="normal">Short<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_short_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">short<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_short_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">short<sp/>int<sp/>sum_value<sp/>=<sp/>sum_short_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>15</highlight></codeline>
<codeline><highlight class="normal">free_short_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2895" column="11" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2895" bodyend="2901"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
        <referencedby refid="vector_8c_1a5a553d82722c04ec4b613014fa1d0688" compoundref="vector_8c" startline="3167" endline="3171">average_short_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a67f48de636722d00447f21d5040f8d81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned short int</type>
        <definition>unsigned short int sum_ushort_vector</definition>
        <argsstring>(UShort *vec)</argsstring>
        <name>sum_ushort_vector</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will calculate the sum of the values in a vector data structure of type <ref refid="structUShort" kindref="compound">UShort</ref></para>
<para>/param vec A vector data structure of type <ref refid="structUShort" kindref="compound">UShort</ref></para>
<para><programlisting><codeline><highlight class="normal">UShort<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ushort_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>short<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ushort_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>short<sp/>int<sp/>sum_value<sp/>=<sp/>sum_ushort_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>15</highlight></codeline>
<codeline><highlight class="normal">free_ushort_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2904" column="20" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2904" bodyend="2910"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
        <referencedby refid="vector_8c_1a96018578b7bce5eb04f4b4dbbd63b582" compoundref="vector_8c" startline="3174" endline="3178">average_ushort_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1aaf01dd9c2caec4100d4315bd8d525a30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sum_int_vector</definition>
        <argsstring>(Int *vec)</argsstring>
        <name>sum_int_vector</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will calculate the sum of the values in a vector data structure of type <ref refid="structInt" kindref="compound">Int</ref></para>
<para>/param vec A vector data structure of type <ref refid="structInt" kindref="compound">Int</ref></para>
<para><programlisting><codeline><highlight class="normal">Int<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_int_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_int_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>sum_value<sp/>=<sp/>sum_int_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>15</highlight></codeline>
<codeline><highlight class="normal">free_int_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2913" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2913" bodyend="2919"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
        <referencedby refid="vector_8c_1a2e384c1e58cf1f6486ae0a8bc2e46379" compoundref="vector_8c" startline="3181" endline="3185">average_int_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a791fe9c8f9bd1d04158b01c3aa022edd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int sum_uint_vector</definition>
        <argsstring>(UInt *vec)</argsstring>
        <name>sum_uint_vector</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will calculate the sum of the values in a vector data structure of type <ref refid="structUInt" kindref="compound">UInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structUInt" kindref="compound">UInt</ref></para>
<para><programlisting><codeline><highlight class="normal">UInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uint_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_uint_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>int<sp/>sum_value<sp/>=<sp/>sum_uint_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>15</highlight></codeline>
<codeline><highlight class="normal">free_uint_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2922" column="14" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2922" bodyend="2928"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
        <referencedby refid="vector_8c_1a35959e6bd4010b04681750611d00a7b7" compoundref="vector_8c" startline="3188" endline="3192">average_uint_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1af2ca62fb5fa87cccef8750d24b3979da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int sum_long_vector</definition>
        <argsstring>(LInt *vec)</argsstring>
        <name>sum_long_vector</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will calculate the sum of the values in a vector data structure of type <ref refid="structLInt" kindref="compound">LInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structLInt" kindref="compound">LInt</ref></para>
<para><programlisting><codeline><highlight class="normal">LInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_long_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_long_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>int<sp/>sum_value<sp/>=<sp/>sum_long_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>15</highlight></codeline>
<codeline><highlight class="normal">free_long_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2931" column="10" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2931" bodyend="2937"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
        <referencedby refid="vector_8c_1ad1feee1c2712401a20fbe6699f5c4bc7" compoundref="vector_8c" startline="3195" endline="3199">average_long_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a3233da20e23c20659dd5aba81307b58d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long int</type>
        <definition>unsigned long int sum_ulong_vector</definition>
        <argsstring>(ULInt *vec)</argsstring>
        <name>sum_ulong_vector</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will calculate the sum of the values in a vector data structure of type <ref refid="structULInt" kindref="compound">ULInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structULInt" kindref="compound">ULInt</ref></para>
<para><programlisting><codeline><highlight class="normal">ULInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ulong_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ulong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>int<sp/>sum_value<sp/>=<sp/>sum_ulong_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>15</highlight></codeline>
<codeline><highlight class="normal">free_ulong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2940" column="19" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2940" bodyend="2946"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
        <referencedby refid="vector_8c_1aa94c4a725c6ab558c748baa93b652363" compoundref="vector_8c" startline="3202" endline="3206">average_ulong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a838510507e7f386e844fd1e5e3ae494a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long long int</type>
        <definition>long long int sum_llong_vector</definition>
        <argsstring>(LLInt *vec)</argsstring>
        <name>sum_llong_vector</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will calculate the sum of the values in a vector data structure of type <ref refid="structLLInt" kindref="compound">LLInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structLLInt" kindref="compound">LLInt</ref></para>
<para><programlisting><codeline><highlight class="normal">LLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_llong_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_llong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>long<sp/>int<sp/>sum_value<sp/>=<sp/>sum_llong_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>15</highlight></codeline>
<codeline><highlight class="normal">free_llong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2949" column="15" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2949" bodyend="2955"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
        <referencedby refid="vector_8c_1ae3782b50d088b4488da3a8283670ffcc" compoundref="vector_8c" startline="3209" endline="3213">average_llong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1af1cc1dfd0470ab00fc1537ebcbb5c089" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long long int</type>
        <definition>unsigned long long int sum_ullong_vector</definition>
        <argsstring>(ULLInt *vec)</argsstring>
        <name>sum_ullong_vector</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will calculate the sum of the values in a vector data structure of type <ref refid="structULLInt" kindref="compound">ULLInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structULLInt" kindref="compound">ULLInt</ref></para>
<para><programlisting><codeline><highlight class="normal">ULLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ullong_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ullong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>long<sp/>int<sp/>sum_value<sp/>=<sp/>sum_ullong_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>15</highlight></codeline>
<codeline><highlight class="normal">free_ullong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2958" column="24" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2958" bodyend="2964"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
        <referencedby refid="vector_8c_1abb879670618c44d1259b4cb689d36698" compoundref="vector_8c" startline="3216" endline="3220">average_ullong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ab9177b68251ddf43f4a245afd559e462" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float sum_float_vector</definition>
        <argsstring>(Flt *vec)</argsstring>
        <name>sum_float_vector</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will calculate the sum of the values in a vector data structure of type <ref refid="structFlt" kindref="compound">Flt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structFlt" kindref="compound">Flt</ref></para>
<para><programlisting><codeline><highlight class="normal">Flt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_float_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>a[5]<sp/>=<sp/>{1.,<sp/>2.,<sp/>3.,<sp/>4.,<sp/>5.};</highlight></codeline>
<codeline><highlight class="normal">insert_float_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>sum_value<sp/>=<sp/>sum_float_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>15</highlight></codeline>
<codeline><highlight class="normal">free_float_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2967" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2967" bodyend="2973"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
        <referencedby refid="vector_8c_1a95e8f18d7457adb1784ca850c7afa01e" compoundref="vector_8c" startline="3223" endline="3227">average_float_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a98a70f4f173d451a1ff5357f4779289d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double sum_double_vector</definition>
        <argsstring>(Dble *vec)</argsstring>
        <name>sum_double_vector</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will calculate the sum of the values in a vector data structure of type <ref refid="structDble" kindref="compound">Dble</ref></para>
<para>/param vec A vector data structure of type <ref refid="structDble" kindref="compound">Dble</ref></para>
<para><programlisting><codeline><highlight class="normal">Dble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_double_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>a[5]<sp/>=<sp/>{1.,<sp/>2.,<sp/>3.,<sp/>4.,<sp/>5.};</highlight></codeline>
<codeline><highlight class="normal">insert_double_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>sum_value<sp/>=<sp/>sum_double_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>15</highlight></codeline>
<codeline><highlight class="normal">free_double_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2976" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2976" bodyend="2982"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
        <referencedby refid="vector_8c_1ab0985989db7774a2f4ccf0f6bc7fd0ed" compoundref="vector_8c" startline="3230" endline="3234">average_double_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1af2df2f0fe19814004ab61a91521d7b21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long double</type>
        <definition>long double sum_ldouble_vector</definition>
        <argsstring>(LDble *vec)</argsstring>
        <name>sum_ldouble_vector</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will calculate the sum of the values in a vector data structure of type <ref refid="structLDble" kindref="compound">LDble</ref></para>
<para>/param vec A vector data structure of type <ref refid="structLDble" kindref="compound">LDble</ref></para>
<para><programlisting><codeline><highlight class="normal">LDble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ldouble_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>a[5]<sp/>=<sp/>{1.,<sp/>2.,<sp/>3.,<sp/>4.,<sp/>5.};</highlight></codeline>
<codeline><highlight class="normal">insert_ldouble_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>sum_value<sp/>=<sp/>sum_ldouble_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>15</highlight></codeline>
<codeline><highlight class="normal">free_ldouble_vector(&amp;vec)</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2985" column="13" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2985" bodyend="2991"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
        <referencedby refid="vector_8c_1a136fac1692146b0fc1dd1f548b6a07a4" compoundref="vector_8c" startline="3237" endline="3241">average_ldouble_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a877296aab1e625bc7b103322f6b93b14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structChar" kindref="compound">Char</ref></type>
        <definition>Char cumsum_char_vector</definition>
        <argsstring>(Char *vec)</argsstring>
        <name>cumsum_char_vector</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return an <ref refid="structChar" kindref="compound">Char</ref> vector container that holds an array containing the cumulative sum of the values in the input array</para>
<para>/param vec A vector container of type <ref refid="structChar" kindref="compound">Char</ref> /return return_vec A vector container of type <ref refid="structChar" kindref="compound">Char</ref></para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_char_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">char<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_char_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">Char<sp/>cum_vec<sp/>=<sp/>cumsum_char_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vum_vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>3,<sp/>6,<sp/>10,<sp/>15<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="2996" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2996" bodyend="3005"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
        <references refid="vector_8c_1aecde718777430d31ec254f8a4f40cce0" compoundref="vector_8c" startline="182" endline="194">init_char_vector</references>
        <references refid="vector_8c_1ab4f076e9a6e7d0795c2c3a0216c5c97e" compoundref="vector_8c" startline="712" endline="742">push_char_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a2850df1b78d17fd2e45847e8bf1e51c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structUChar" kindref="compound">UChar</ref></type>
        <definition>UChar cumsum_uchar_vector</definition>
        <argsstring>(UChar *vec)</argsstring>
        <name>cumsum_uchar_vector</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return an <ref refid="structUChar" kindref="compound">UChar</ref> vector container that holds an array containing the cumulative sum of the values in the input array</para>
<para>/param vec A vector container of type <ref refid="structUChar" kindref="compound">UChar</ref> /return return_vec A vector container of type <ref refid="structUChar" kindref="compound">UChar</ref></para>
<para><programlisting><codeline><highlight class="normal">UChar<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uchar_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>char<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_uchar_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">UChar<sp/>cum_vec<sp/>=<sp/>cumsum_uchar_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vum_vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>3,<sp/>6,<sp/>10,<sp/>15<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uchar_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3008" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3008" bodyend="3017"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
        <references refid="vector_8c_1a9289ec52674f95ebf45ac81b70dfdc67" compoundref="vector_8c" startline="197" endline="209">init_uchar_vector</references>
        <references refid="vector_8c_1acc6fd3b434ba25d3473adff60160500b" compoundref="vector_8c" startline="745" endline="775">push_uchar_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a588f2bea0a2ac3d8bf87184d873a2804" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structShort" kindref="compound">Short</ref></type>
        <definition>Short cumsum_short_vector</definition>
        <argsstring>(Short *vec)</argsstring>
        <name>cumsum_short_vector</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return an <ref refid="structShort" kindref="compound">Short</ref> vector container that holds an array containing the cumulative sum of the values in the input array</para>
<para>/param vec A vector container of type <ref refid="structShort" kindref="compound">Short</ref> /return return_vec A vector container of type <ref refid="structUShort" kindref="compound">UShort</ref></para>
<para><programlisting><codeline><highlight class="normal">Short<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_short_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">short<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_short_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">Short<sp/>cum_vec<sp/>=<sp/>cumsum_short_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vum_vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>3,<sp/>6,<sp/>10,<sp/>15<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_short_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3020" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3020" bodyend="3029"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
        <references refid="vector_8c_1a749211e8a46a8b2297b3c6ebb78aed0e" compoundref="vector_8c" startline="18" endline="30">init_short_vector</references>
        <references refid="vector_8c_1a38068c17aa5cf7286175572d43219b8d" compoundref="vector_8c" startline="349" endline="379">push_short_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a94f7fe260f499b1a18150332e1a0e427" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structUShort" kindref="compound">UShort</ref></type>
        <definition>UShort cumsum_ushort_vector</definition>
        <argsstring>(UShort *vec)</argsstring>
        <name>cumsum_ushort_vector</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return an <ref refid="structUShort" kindref="compound">UShort</ref> vector container that holds an array containing the cumulative sum of the values in the input array</para>
<para>/param vec A vector container of type <ref refid="structUShort" kindref="compound">UShort</ref> /return return_vec A vector container of type <ref refid="structUShort" kindref="compound">UShort</ref></para>
<para><programlisting><codeline><highlight class="normal">UShort<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ushort_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>short<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ushort_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">UShort<sp/>cum_vec<sp/>=<sp/>cumsum_ushort_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vum_vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>3,<sp/>6,<sp/>10,<sp/>15<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ushort_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3032" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3032" bodyend="3041"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
        <references refid="vector_8c_1aa63398bdb55f97b891b93404a89de14d" compoundref="vector_8c" startline="33" endline="45">init_ushort_vector</references>
        <references refid="vector_8c_1a97670c026df2a05dda5b0c85ebeb4d69" compoundref="vector_8c" startline="382" endline="412">push_ushort_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1acaf8f7f369483e4dcb9a7af53e79492c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structInt" kindref="compound">Int</ref></type>
        <definition>Int cumsum_int_vector</definition>
        <argsstring>(Int *vec)</argsstring>
        <name>cumsum_int_vector</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return an <ref refid="structInt" kindref="compound">Int</ref> vector container that holds an array containing the cumulative sum of the values in the input array</para>
<para>/param vec A vector container of type <ref refid="structInt" kindref="compound">Int</ref> /return return_vec A vector container of type <ref refid="structInt" kindref="compound">Int</ref></para>
<para><programlisting><codeline><highlight class="normal">Int<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_int_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_int_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">Int<sp/>cum_vec<sp/>=<sp/>cumsum_int_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vum_vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>3,<sp/>6,<sp/>10,<sp/>15<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_int_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3044" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3044" bodyend="3053"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
        <references refid="vector_8c_1a9fdb6c5fdd9f0d5a3bfb751f9e82968e" compoundref="vector_8c" startline="48" endline="60">init_int_vector</references>
        <references refid="vector_8c_1a6baf75dc56de293f3dbdc8ac40934980" compoundref="vector_8c" startline="415" endline="445">push_int_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1abe44138d94c38f7d65d62f63dddf668b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structUInt" kindref="compound">UInt</ref></type>
        <definition>UInt cumsum_uint_vector</definition>
        <argsstring>(UInt *vec)</argsstring>
        <name>cumsum_uint_vector</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return an <ref refid="structUInt" kindref="compound">UInt</ref> vector container that holds an array containing the cumulative sum of the values in the input array</para>
<para>/param vec A vector container of type <ref refid="structUInt" kindref="compound">UInt</ref> /return return_vec A vector container of type <ref refid="structUInt" kindref="compound">UInt</ref></para>
<para><programlisting><codeline><highlight class="normal">UInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uint_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_uint_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">UInt<sp/>cum_vec<sp/>=<sp/>cumsum_uint_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vum_vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>3,<sp/>6,<sp/>10,<sp/>15<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uint_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3056" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3056" bodyend="3065"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
        <references refid="vector_8c_1a9d8eb1d9ce65365d7b044fe684387a3f" compoundref="vector_8c" startline="63" endline="75">init_uint_vector</references>
        <references refid="vector_8c_1a787fc2bba6112c4ede10d0ec14ab3825" compoundref="vector_8c" startline="448" endline="478">push_uint_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1aacdbfadbd42e44ba909b315b43152012" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structLInt" kindref="compound">LInt</ref></type>
        <definition>LInt cumsum_long_vector</definition>
        <argsstring>(LInt *vec)</argsstring>
        <name>cumsum_long_vector</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return an <ref refid="structLInt" kindref="compound">LInt</ref> vector container that holds an array containing the cumulative sum of the values in the input array</para>
<para>/param vec A vector container of type <ref refid="structLInt" kindref="compound">LInt</ref> /return return_vec A vector container of type <ref refid="structLInt" kindref="compound">LInt</ref></para>
<para><programlisting><codeline><highlight class="normal">LInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_long_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_long_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">LInt<sp/>cum_vec<sp/>=<sp/>cumsum_long_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vum_vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>3,<sp/>6,<sp/>10,<sp/>15<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_long_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3068" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3068" bodyend="3077"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
        <references refid="vector_8c_1ac59c5fed0f4cd6b9aaf4c87b7a997bd3" compoundref="vector_8c" startline="78" endline="90">init_long_vector</references>
        <references refid="vector_8c_1a6135368684b7d740482cfc775417f255" compoundref="vector_8c" startline="481" endline="511">push_long_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ae856339059aa7e6f5db1d5bd7de43306" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structULInt" kindref="compound">ULInt</ref></type>
        <definition>ULInt cumsum_ulong_vector</definition>
        <argsstring>(ULInt *vec)</argsstring>
        <name>cumsum_ulong_vector</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return an <ref refid="structULInt" kindref="compound">ULInt</ref> vector container that holds an array containing the cumulative sum of the values in the input array</para>
<para>/param vec A vector container of type <ref refid="structULInt" kindref="compound">ULInt</ref> /return return_vec A vector container of type <ref refid="structULInt" kindref="compound">ULInt</ref></para>
<para><programlisting><codeline><highlight class="normal">ULInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ulong_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ulong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">ULInt<sp/>cum_vec<sp/>=<sp/>cumsum_ulong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vum_vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>3,<sp/>6,<sp/>10,<sp/>15<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ulong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3080" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3080" bodyend="3089"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
        <references refid="vector_8c_1af08098b392c0ff01db799bff9c83a521" compoundref="vector_8c" startline="93" endline="105">init_ulong_vector</references>
        <references refid="vector_8c_1aea5f95b56df2836ee553face60351e61" compoundref="vector_8c" startline="514" endline="544">push_ulong_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a531b30e8b67bc20cad9865cc3d8afe50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structLLInt" kindref="compound">LLInt</ref></type>
        <definition>LLInt cumsum_llong_vector</definition>
        <argsstring>(LLInt *vec)</argsstring>
        <name>cumsum_llong_vector</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return an <ref refid="structLLInt" kindref="compound">LLInt</ref> vector container that holds an array containing the cumulative sum of the values in the input array</para>
<para>/param vec A vector container of type <ref refid="structLLInt" kindref="compound">LLInt</ref> /return return_vec A vector container of type <ref refid="structLLInt" kindref="compound">LLInt</ref></para>
<para><programlisting><codeline><highlight class="normal">LLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_llong_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_llong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">LLInt<sp/>cum_vec<sp/>=<sp/>cumsum_llong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vum_vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>3,<sp/>6,<sp/>10,<sp/>15<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_llong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3092" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3092" bodyend="3101"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
        <references refid="vector_8c_1a65eda538d3c07a8beb1475c1a214ff67" compoundref="vector_8c" startline="107" endline="119">init_llong_vector</references>
        <references refid="vector_8c_1a93f7e28f97718d9d7c5c84df61c1466c" compoundref="vector_8c" startline="547" endline="577">push_llong_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a07bde722230b2f57f1b14304054d1d6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structULLInt" kindref="compound">ULLInt</ref></type>
        <definition>ULLInt cumsum_ullong_vector</definition>
        <argsstring>(ULLInt *vec)</argsstring>
        <name>cumsum_ullong_vector</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return an <ref refid="structULLInt" kindref="compound">ULLInt</ref> vector container that holds an array containing the cumulative sum of the values in the input array</para>
<para>/param vec A vector container of type <ref refid="structULLInt" kindref="compound">ULLInt</ref> /return return_vec A vector container of type <ref refid="structULLInt" kindref="compound">ULLInt</ref></para>
<para><programlisting><codeline><highlight class="normal">ULLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ullong_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ullong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">ULLInt<sp/>cum_vec<sp/>=<sp/>cumsum_ullong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vum_vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>3,<sp/>6,<sp/>10,<sp/>15<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ullong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3104" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3104" bodyend="3113"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
        <references refid="vector_8c_1ab05d31d34c87d8d6cd76f48539bf367f" compoundref="vector_8c" startline="122" endline="134">init_ullong_vector</references>
        <references refid="vector_8c_1a3478a298e62d85cb93f11a78f64d6f80" compoundref="vector_8c" startline="580" endline="610">push_ullong_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a9ddb912a129b46a9a2f2d147b4a1ddc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structFlt" kindref="compound">Flt</ref></type>
        <definition>Flt cumsum_float_vector</definition>
        <argsstring>(Flt *vec)</argsstring>
        <name>cumsum_float_vector</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return an <ref refid="structFlt" kindref="compound">Flt</ref> vector container that holds an array containing the cumulative sum of the values in the input array</para>
<para>/param vec A vector container of type <ref refid="structFlt" kindref="compound">Flt</ref> /return return_vec A vector container of type <ref refid="structFlt" kindref="compound">Flt</ref></para>
<para><programlisting><codeline><highlight class="normal">Flt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_float_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_float_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">Flt<sp/>cum_vec<sp/>=<sp/>cumsum_float_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vum_vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>3,<sp/>6,<sp/>10,<sp/>15<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_float_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3116" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3116" bodyend="3125"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
        <references refid="vector_8c_1a92bba70874a1570bd9c87a2a7385af35" compoundref="vector_8c" startline="137" endline="149">init_float_vector</references>
        <references refid="vector_8c_1a31e02f437f4f9f43d1126e017ae1cac3" compoundref="vector_8c" startline="613" endline="643">push_float_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ae8512eab3bf15409bda6bce1d6ec0380" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDble" kindref="compound">Dble</ref></type>
        <definition>Dble cumsum_double_vector</definition>
        <argsstring>(Dble *vec)</argsstring>
        <name>cumsum_double_vector</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return an <ref refid="structDble" kindref="compound">Dble</ref> vector container that holds an array containing the cumulative sum of the values in the input array</para>
<para>/param vec A vector container of type <ref refid="structDble" kindref="compound">Dble</ref> /return return_vec A vector container of type <ref refid="structDble" kindref="compound">Dble</ref></para>
<para><programlisting><codeline><highlight class="normal">Dble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_double_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_double_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">Dble<sp/>cum_vec<sp/>=<sp/>cumsum_double_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vum_vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>3,<sp/>6,<sp/>10,<sp/>15<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_double_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3128" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3128" bodyend="3137"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
        <references refid="vector_8c_1a2c0735f69da8e40535b5ecceace1a399" compoundref="vector_8c" startline="152" endline="164">init_double_vector</references>
        <references refid="vector_8c_1ab312c467d82a0fccc66cbb89a6b8de5c" compoundref="vector_8c" startline="646" endline="676">push_double_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ae0f64fd00879ff39b5ffbca0e80c197b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structLDble" kindref="compound">LDble</ref></type>
        <definition>LDble cumsum_ldouble_vector</definition>
        <argsstring>(LDble *vec)</argsstring>
        <name>cumsum_ldouble_vector</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return an <ref refid="structLDble" kindref="compound">LDble</ref> vector container that holds an array containing the cumulative sum of the values in the input array</para>
<para>/param vec A vector container of type <ref refid="structLDble" kindref="compound">LDble</ref> /return return_vec A vector container of type <ref refid="structLDble" kindref="compound">LDble</ref></para>
<para><programlisting><codeline><highlight class="normal">LDble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ldouble_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ldouble_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">LDble<sp/>cum_vec<sp/>=<sp/>cumsum_ldouble_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vum_vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>3,<sp/>6,<sp/>10,<sp/>15<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ldouble_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3140" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3140" bodyend="3149"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
        <references refid="vector_8c_1a79d9f9d1d1cb31d09620bc5cdc73e94e" compoundref="vector_8c" startline="167" endline="179">init_ldouble_vector</references>
        <references refid="vector_8c_1ad001560a2793c40efb1c64532cefe2e2" compoundref="vector_8c" startline="679" endline="709">push_ldouble_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a0a47e22454ec90b6c959915dbc3c87a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char average_char_vector</definition>
        <argsstring>(Char *vec)</argsstring>
        <name>average_char_vector</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return the average value of the data in a vector data structure of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para>/param vec A vector data structure of type <ref refid="structChar" kindref="compound">Char</ref> /return avg The average value in the input data structure of type <ref refid="structChar" kindref="compound">Char</ref></para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_char_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">char<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_char_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">char<sp/>b<sp/>=<sp/>average_char_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(b);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.00000</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3154" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3154" bodyend="3158"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="vector_8c_1a0684e2f1aee143f1769dd8ff908c852c" compoundref="vector_8c" startline="2877" endline="2883">sum_char_vector</references>
        <referencedby refid="vector_8c_1a918b7824d676e70026969bf6af72dba7" compoundref="vector_8c" startline="3246" endline="3301">stdev_char_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ad821bfcf3659a78a11a5c9c7fd72a277" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char</type>
        <definition>unsigned char average_uchar_vector</definition>
        <argsstring>(UChar *vec)</argsstring>
        <name>average_uchar_vector</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return the average value of the data in a vector data structure of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para>/param vec A vector data structure of type <ref refid="structChar" kindref="compound">Char</ref> /return avg The average value in the input data structure of type <ref refid="structChar" kindref="compound">Char</ref></para>
<para><programlisting><codeline><highlight class="normal">UChar<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uchar_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>char<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_uchar_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>char<sp/>b<sp/>=<sp/>average_uchar_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(b);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.00000</highlight></codeline>
<codeline><highlight class="normal">free_uchar_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3161" column="15" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3161" bodyend="3165"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="vector_8c_1a643cb8d97c368f436a0010dacfca2401" compoundref="vector_8c" startline="2886" endline="2892">sum_uchar_vector</references>
        <referencedby refid="vector_8c_1a9315ed5e7e8966f095ee8d334c5e10a4" compoundref="vector_8c" startline="3304" endline="3359">stdev_uchar_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a5a553d82722c04ec4b613014fa1d0688" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float average_short_vector</definition>
        <argsstring>(Short *vec)</argsstring>
        <name>average_short_vector</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return the average value of the data in a vector data structure of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para>/param vec A vector data structure of type <ref refid="structShort" kindref="compound">Short</ref> /return avg The average value in the input data structure of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para><programlisting><codeline><highlight class="normal">Short<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_short_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">short<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_short_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>b<sp/>=<sp/>average_short_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(b);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.00000</highlight></codeline>
<codeline><highlight class="normal">free_short_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3167" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3167" bodyend="3171"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="vector_8c_1a54d410de6d79f482b3d560bcb78fd2ff" compoundref="vector_8c" startline="2895" endline="2901">sum_short_vector</references>
        <referencedby refid="vector_8c_1a193f4372f93ae17ab490841af7e508c3" compoundref="vector_8c" startline="3362" endline="3417">stdev_short_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a96018578b7bce5eb04f4b4dbbd63b582" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float average_ushort_vector</definition>
        <argsstring>(UShort *vec)</argsstring>
        <name>average_ushort_vector</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return the average value of the data in a vector data structure of type <ref refid="structUShort" kindref="compound">UShort</ref></para>
<para>/param vec A vector data structure of type <ref refid="structUShort" kindref="compound">UShort</ref> /return avg The average value in the input data structure of type <ref refid="structUShort" kindref="compound">UShort</ref></para>
<para><programlisting><codeline><highlight class="normal">UShort<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ushort_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>short<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ushort_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>b<sp/>=<sp/>average_ushort_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(b);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.00000</highlight></codeline>
<codeline><highlight class="normal">free_ushort_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3174" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3174" bodyend="3178"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="vector_8c_1a67f48de636722d00447f21d5040f8d81" compoundref="vector_8c" startline="2904" endline="2910">sum_ushort_vector</references>
        <referencedby refid="vector_8c_1ae0c29568372c468d83c1a5f33d4c60c6" compoundref="vector_8c" startline="3420" endline="3475">stdev_ushort_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a2e384c1e58cf1f6486ae0a8bc2e46379" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float average_int_vector</definition>
        <argsstring>(Int *vec)</argsstring>
        <name>average_int_vector</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return the average value of the data in a vector data structure of type <ref refid="structInt" kindref="compound">Int</ref></para>
<para>/param vec A vector data structure of type <ref refid="structInt" kindref="compound">Int</ref> /return avg The average value in the input data structure of type <ref refid="structInt" kindref="compound">Int</ref></para>
<para><programlisting><codeline><highlight class="normal">Int<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_int_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_int_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>b<sp/>=<sp/>average_int_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(b);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.00000</highlight></codeline>
<codeline><highlight class="normal">free_int_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3181" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3181" bodyend="3185"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="vector_8c_1aaf01dd9c2caec4100d4315bd8d525a30" compoundref="vector_8c" startline="2913" endline="2919">sum_int_vector</references>
        <referencedby refid="vector_8c_1aa469dd50aa2a8cd43ad5c577016145e8" compoundref="vector_8c" startline="3478" endline="3533">stdev_int_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a35959e6bd4010b04681750611d00a7b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float average_uint_vector</definition>
        <argsstring>(UInt *vec)</argsstring>
        <name>average_uint_vector</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return the average value of the data in a vector data structure of type <ref refid="structUInt" kindref="compound">UInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structUInt" kindref="compound">UInt</ref> /return avg The average value in the input data structure of type <ref refid="structUInt" kindref="compound">UInt</ref></para>
<para><programlisting><codeline><highlight class="normal">UInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uint_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_uint_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>b<sp/>=<sp/>average_uint_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(b);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.00000</highlight></codeline>
<codeline><highlight class="normal">free_uint_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3188" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3188" bodyend="3192"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="vector_8c_1a791fe9c8f9bd1d04158b01c3aa022edd" compoundref="vector_8c" startline="2922" endline="2928">sum_uint_vector</references>
        <referencedby refid="vector_8c_1a2a72fa8e25403401326d07853c45c7fe" compoundref="vector_8c" startline="3536" endline="3591">stdev_uint_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ad1feee1c2712401a20fbe6699f5c4bc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double average_long_vector</definition>
        <argsstring>(LInt *vec)</argsstring>
        <name>average_long_vector</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return the average value of the data in a vector data structure of type <ref refid="structLInt" kindref="compound">LInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structLInt" kindref="compound">LInt</ref> /return avg The average value in the input data structure of type <ref refid="structLInt" kindref="compound">LInt</ref></para>
<para><programlisting><codeline><highlight class="normal">LInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_long_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_long_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>b<sp/>=<sp/>average_long_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(b);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.00000</highlight></codeline>
<codeline><highlight class="normal">free_long_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3195" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3195" bodyend="3199"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="vector_8c_1af2ca62fb5fa87cccef8750d24b3979da" compoundref="vector_8c" startline="2931" endline="2937">sum_long_vector</references>
        <referencedby refid="vector_8c_1ab875bc51d7595b4e6fe536770cfe62c5" compoundref="vector_8c" startline="3594" endline="3649">stdev_long_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1aa94c4a725c6ab558c748baa93b652363" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double average_ulong_vector</definition>
        <argsstring>(ULInt *vec)</argsstring>
        <name>average_ulong_vector</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return the average value of the data in a vector data structure of type <ref refid="structULInt" kindref="compound">ULInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structULInt" kindref="compound">ULInt</ref> /return avg The average value in the input data structure of type <ref refid="structULInt" kindref="compound">ULInt</ref></para>
<para><programlisting><codeline><highlight class="normal">ULInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ulong_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ulong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>b<sp/>=<sp/>average_ulong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(b);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.00000</highlight></codeline>
<codeline><highlight class="normal">free_ulong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3202" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3202" bodyend="3206"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="vector_8c_1a3233da20e23c20659dd5aba81307b58d" compoundref="vector_8c" startline="2940" endline="2946">sum_ulong_vector</references>
        <referencedby refid="vector_8c_1a3cd9fa1fbe73338e380ccc9b98a6b768" compoundref="vector_8c" startline="3652" endline="3707">stdev_ulong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ae3782b50d088b4488da3a8283670ffcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long double</type>
        <definition>long double average_llong_vector</definition>
        <argsstring>(LLInt *vec)</argsstring>
        <name>average_llong_vector</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return the average value of the data in a vector data structure of type <ref refid="structLLInt" kindref="compound">LLInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structLLInt" kindref="compound">LLInt</ref> /return avg The average value in the input data structure of type <ref refid="structLLInt" kindref="compound">LLInt</ref></para>
<para><programlisting><codeline><highlight class="normal">LLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_llong_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_llong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>b<sp/>=<sp/>average_llong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(b);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.00000</highlight></codeline>
<codeline><highlight class="normal">free_llong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3209" column="13" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3209" bodyend="3213"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="vector_8c_1a838510507e7f386e844fd1e5e3ae494a" compoundref="vector_8c" startline="2949" endline="2955">sum_llong_vector</references>
        <referencedby refid="vector_8c_1a5b29dc6f20528b67a4a53208c5beefe7" compoundref="vector_8c" startline="3710" endline="3765">stdev_llong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1abb879670618c44d1259b4cb689d36698" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long double</type>
        <definition>long double average_ullong_vector</definition>
        <argsstring>(ULLInt *vec)</argsstring>
        <name>average_ullong_vector</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return the average value of the data in a vector data structure of type <ref refid="structULLInt" kindref="compound">ULLInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structULLInt" kindref="compound">ULLInt</ref> /return avg The average value in the input data structure of type <ref refid="structULLInt" kindref="compound">ULLInt</ref></para>
<para><programlisting><codeline><highlight class="normal">ULLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ullong_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ullong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>b<sp/>=<sp/>average_ullong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(b);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.00000</highlight></codeline>
<codeline><highlight class="normal">free_ullong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3216" column="13" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3216" bodyend="3220"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="vector_8c_1af1cc1dfd0470ab00fc1537ebcbb5c089" compoundref="vector_8c" startline="2958" endline="2964">sum_ullong_vector</references>
        <referencedby refid="vector_8c_1a9cb0b02a7bedef69397ef758fd36baa6" compoundref="vector_8c" startline="3768" endline="3823">stdev_ullong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a95e8f18d7457adb1784ca850c7afa01e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float average_float_vector</definition>
        <argsstring>(Flt *vec)</argsstring>
        <name>average_float_vector</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return the average value of the data in a vector data structure of type <ref refid="structFlt" kindref="compound">Flt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structFlt" kindref="compound">Flt</ref> /return avg The average value in the input data structure of type <ref refid="structFlt" kindref="compound">Flt</ref></para>
<para><programlisting><codeline><highlight class="normal">Flt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_float_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_float_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>b<sp/>=<sp/>average_float_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(b);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.00000</highlight></codeline>
<codeline><highlight class="normal">free_float_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3223" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3223" bodyend="3227"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="vector_8c_1ab9177b68251ddf43f4a245afd559e462" compoundref="vector_8c" startline="2967" endline="2973">sum_float_vector</references>
        <referencedby refid="vector_8c_1abb791f292ea37822fa3c8f20749b8571" compoundref="vector_8c" startline="3826" endline="3881">stdev_float_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ab0985989db7774a2f4ccf0f6bc7fd0ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double average_double_vector</definition>
        <argsstring>(Dble *vec)</argsstring>
        <name>average_double_vector</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return the average value of the data in a vector data structure of type <ref refid="structDble" kindref="compound">Dble</ref></para>
<para>/param vec A vector data structure of type <ref refid="structDble" kindref="compound">Dble</ref> /return avg The average value in the input data structure of type <ref refid="structDble" kindref="compound">Dble</ref></para>
<para><programlisting><codeline><highlight class="normal">Dble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_double_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_double_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>b<sp/>=<sp/>average_double_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(b);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.00000</highlight></codeline>
<codeline><highlight class="normal">free_double_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3230" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3230" bodyend="3234"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="vector_8c_1a98a70f4f173d451a1ff5357f4779289d" compoundref="vector_8c" startline="2976" endline="2982">sum_double_vector</references>
        <referencedby refid="vector_8c_1aa05c06bd35f0e74c8a07ef0257a8aa67" compoundref="vector_8c" startline="3884" endline="3939">stdev_double_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a136fac1692146b0fc1dd1f548b6a07a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long double</type>
        <definition>long double average_ldouble_vector</definition>
        <argsstring>(LDble *vec)</argsstring>
        <name>average_ldouble_vector</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return the average value of the data in a vector data structure of type <ref refid="structLDble" kindref="compound">LDble</ref></para>
<para>/param vec A vector data structure of type <ref refid="structLDble" kindref="compound">LDble</ref> /return avg The average value in the input data structure of type <ref refid="structLDble" kindref="compound">LDble</ref></para>
<para><programlisting><codeline><highlight class="normal">LDble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ldouble_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ldouble_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>b<sp/>=<sp/>average_ldouble_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(b);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.00000</highlight></codeline>
<codeline><highlight class="normal">free_ldouble_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3237" column="13" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3237" bodyend="3241"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="vector_8c_1af2df2f0fe19814004ab61a91521d7b21" compoundref="vector_8c" startline="2985" endline="2991">sum_ldouble_vector</references>
        <referencedby refid="vector_8c_1abf8b31942231ba26f9f5d4729cdd5370" compoundref="vector_8c" startline="3942" endline="3997">stdev_ldouble_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a918b7824d676e70026969bf6af72dba7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float stdev_char_vector</definition>
        <argsstring>(Char *vec)</argsstring>
        <name>stdev_char_vector</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function wil calculate the standard deviation for the values in a vector container.</para>
<para>/param vec A vector data structure of type <ref refid="structChar" kindref="compound">Char</ref></para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_char_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">char<sp/>a[10]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10};</highlight></codeline>
<codeline><highlight class="normal">insert_char_vector(&amp;vec,<sp/>a,<sp/>10,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>stdev<sp/>=<sp/>stdev_char_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(stdev);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.2076</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3246" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3246" bodyend="3301"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
        <references refid="vector_8c_1a0a47e22454ec90b6c959915dbc3c87a6" compoundref="vector_8c" startline="3154" endline="3158">average_char_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a9315ed5e7e8966f095ee8d334c5e10a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float stdev_uchar_vector</definition>
        <argsstring>(UChar *vec)</argsstring>
        <name>stdev_uchar_vector</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function wil calculate the standard deviation for the values in a vector container.</para>
<para>/param vec A vector data structure of type <ref refid="structUChar" kindref="compound">UChar</ref></para>
<para><programlisting><codeline><highlight class="normal">UChar<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uchar_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>char<sp/>a[10]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10};</highlight></codeline>
<codeline><highlight class="normal">insert_uchar_vector(&amp;vec,<sp/>a,<sp/>10,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>stdev<sp/>=<sp/>stdev_uchar_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(stdev);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.2076</highlight></codeline>
<codeline><highlight class="normal">free_uchar_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3304" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3304" bodyend="3359"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
        <references refid="vector_8c_1ad821bfcf3659a78a11a5c9c7fd72a277" compoundref="vector_8c" startline="3161" endline="3165">average_uchar_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a193f4372f93ae17ab490841af7e508c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float stdev_short_vector</definition>
        <argsstring>(Short *vec)</argsstring>
        <name>stdev_short_vector</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function wil calculate the standard deviation for the values in a vector container.</para>
<para>/param vec A vector data structure of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para><programlisting><codeline><highlight class="normal">Short<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_short_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">short<sp/>int<sp/>a[10]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10};</highlight></codeline>
<codeline><highlight class="normal">insert_short_vector(&amp;vec,<sp/>a,<sp/>10,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>stdev<sp/>=<sp/>stdev_short_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(stdev);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.2076</highlight></codeline>
<codeline><highlight class="normal">free_short_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3362" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3362" bodyend="3417"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
        <references refid="vector_8c_1a5a553d82722c04ec4b613014fa1d0688" compoundref="vector_8c" startline="3167" endline="3171">average_short_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ae0c29568372c468d83c1a5f33d4c60c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float stdev_ushort_vector</definition>
        <argsstring>(UShort *vec)</argsstring>
        <name>stdev_ushort_vector</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function wil calculate the standard deviation for the values in a vector container.</para>
<para>/param vec A vector data structure of type <ref refid="structUShort" kindref="compound">UShort</ref></para>
<para><programlisting><codeline><highlight class="normal">UShort<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ushort_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>short<sp/>int<sp/>a[10]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10};</highlight></codeline>
<codeline><highlight class="normal">insert_ushort_vector(&amp;vec,<sp/>a,<sp/>10,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>stdev<sp/>=<sp/>stdev_ushort_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(stdev);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.2076</highlight></codeline>
<codeline><highlight class="normal">free_ushort_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3420" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3420" bodyend="3475"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
        <references refid="vector_8c_1a96018578b7bce5eb04f4b4dbbd63b582" compoundref="vector_8c" startline="3174" endline="3178">average_ushort_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1aa469dd50aa2a8cd43ad5c577016145e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float stdev_int_vector</definition>
        <argsstring>(Int *vec)</argsstring>
        <name>stdev_int_vector</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function wil calculate the standard deviation for the values in a vector container.</para>
<para>/param vec A vector data structure of type <ref refid="structInt" kindref="compound">Int</ref></para>
<para><programlisting><codeline><highlight class="normal">Int<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_int_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>a[10]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10};</highlight></codeline>
<codeline><highlight class="normal">insert_int_vector(&amp;vec,<sp/>a,<sp/>10,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>stdev<sp/>=<sp/>stdev_int_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(stdev);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.2076</highlight></codeline>
<codeline><highlight class="normal">free_int_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3478" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3478" bodyend="3533"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
        <references refid="vector_8c_1a2e384c1e58cf1f6486ae0a8bc2e46379" compoundref="vector_8c" startline="3181" endline="3185">average_int_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a2a72fa8e25403401326d07853c45c7fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float stdev_uint_vector</definition>
        <argsstring>(UInt *vec)</argsstring>
        <name>stdev_uint_vector</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function wil calculate the standard deviation for the values in a vector container.</para>
<para>/param vec A vector data structure of type <ref refid="structUInt" kindref="compound">UInt</ref></para>
<para><programlisting><codeline><highlight class="normal">UInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uint_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>int<sp/>a[10]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10};</highlight></codeline>
<codeline><highlight class="normal">insert_uint_vector(&amp;vec,<sp/>a,<sp/>10,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>stdev<sp/>=<sp/>stdev_uint_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(stdev);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.2076</highlight></codeline>
<codeline><highlight class="normal">free_uint_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3536" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3536" bodyend="3591"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
        <references refid="vector_8c_1a35959e6bd4010b04681750611d00a7b7" compoundref="vector_8c" startline="3188" endline="3192">average_uint_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ab875bc51d7595b4e6fe536770cfe62c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double stdev_long_vector</definition>
        <argsstring>(LInt *vec)</argsstring>
        <name>stdev_long_vector</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function wil calculate the standard deviation for the values in a vector container.</para>
<para>/param vec A vector data structure of type <ref refid="structLInt" kindref="compound">LInt</ref></para>
<para><programlisting><codeline><highlight class="normal">LInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_long_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>int<sp/>a[10]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10};</highlight></codeline>
<codeline><highlight class="normal">insert_long_vector(&amp;vec,<sp/>a,<sp/>10,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>stdev<sp/>=<sp/>stdev_long_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(stdev);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.2076</highlight></codeline>
<codeline><highlight class="normal">free_long_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3594" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3594" bodyend="3649"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
        <references refid="vector_8c_1ad1feee1c2712401a20fbe6699f5c4bc7" compoundref="vector_8c" startline="3195" endline="3199">average_long_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a3cd9fa1fbe73338e380ccc9b98a6b768" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double stdev_ulong_vector</definition>
        <argsstring>(ULInt *vec)</argsstring>
        <name>stdev_ulong_vector</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function wil calculate the standard deviation for the values in a vector container.</para>
<para>/param vec A vector data structure of type <ref refid="structULInt" kindref="compound">ULInt</ref></para>
<para><programlisting><codeline><highlight class="normal">ULInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ulong_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>int<sp/>a[10]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10};</highlight></codeline>
<codeline><highlight class="normal">insert_ulong_vector(&amp;vec,<sp/>a,<sp/>10,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>stdev<sp/>=<sp/>stdev_ulong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(stdev);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.2076</highlight></codeline>
<codeline><highlight class="normal">free_ulong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3652" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3652" bodyend="3707"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
        <references refid="vector_8c_1aa94c4a725c6ab558c748baa93b652363" compoundref="vector_8c" startline="3202" endline="3206">average_ulong_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a5b29dc6f20528b67a4a53208c5beefe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long double</type>
        <definition>long double stdev_llong_vector</definition>
        <argsstring>(LLInt *vec)</argsstring>
        <name>stdev_llong_vector</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function wil calculate the standard deviation for the values in a vector container.</para>
<para>/param vec A vector data structure of type <ref refid="structLLInt" kindref="compound">LLInt</ref></para>
<para><programlisting><codeline><highlight class="normal">LLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_llong_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>long<sp/>int<sp/>a[10]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10};</highlight></codeline>
<codeline><highlight class="normal">insert_llong_vector(&amp;vec,<sp/>a,<sp/>10,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>stdev<sp/>=<sp/>stdev_llong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(stdev);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.2076</highlight></codeline>
<codeline><highlight class="normal">free_llong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3710" column="13" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3710" bodyend="3765"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
        <references refid="vector_8c_1ae3782b50d088b4488da3a8283670ffcc" compoundref="vector_8c" startline="3209" endline="3213">average_llong_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a9cb0b02a7bedef69397ef758fd36baa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long double</type>
        <definition>long double stdev_ullong_vector</definition>
        <argsstring>(ULLInt *vec)</argsstring>
        <name>stdev_ullong_vector</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function wil calculate the standard deviation for the values in a vector container.</para>
<para>/param vec A vector data structure of type <ref refid="structULLInt" kindref="compound">ULLInt</ref></para>
<para><programlisting><codeline><highlight class="normal">ULLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ullong_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>long<sp/>int<sp/>a[10]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10};</highlight></codeline>
<codeline><highlight class="normal">insert_ullong_vector(&amp;vec,<sp/>a,<sp/>10,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>stdev<sp/>=<sp/>stdev_ullong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(stdev);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.2076</highlight></codeline>
<codeline><highlight class="normal">free_ullong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3768" column="13" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3768" bodyend="3823"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
        <references refid="vector_8c_1abb879670618c44d1259b4cb689d36698" compoundref="vector_8c" startline="3216" endline="3220">average_ullong_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1abb791f292ea37822fa3c8f20749b8571" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float stdev_float_vector</definition>
        <argsstring>(Flt *vec)</argsstring>
        <name>stdev_float_vector</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function wil calculate the standard deviation for the values in a vector container.</para>
<para>/param vec A vector data structure of type <ref refid="structFlt" kindref="compound">Flt</ref></para>
<para><programlisting><codeline><highlight class="normal">Flt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_float_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>a[10]<sp/>=<sp/>{1.,<sp/>2.,<sp/>3.,<sp/>4.,<sp/>5.,<sp/>6.,<sp/>7.,<sp/>8.,<sp/>9.,<sp/>10.};</highlight></codeline>
<codeline><highlight class="normal">insert_float_vector(&amp;vec,<sp/>a,<sp/>10,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>stdev<sp/>=<sp/>stdev_float_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(stdev);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.2076</highlight></codeline>
<codeline><highlight class="normal">free_float_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3826" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3826" bodyend="3881"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
        <references refid="vector_8c_1a95e8f18d7457adb1784ca850c7afa01e" compoundref="vector_8c" startline="3223" endline="3227">average_float_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1aa05c06bd35f0e74c8a07ef0257a8aa67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double stdev_double_vector</definition>
        <argsstring>(Dble *vec)</argsstring>
        <name>stdev_double_vector</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function wil calculate the standard deviation for the values in a vector container.</para>
<para>/param vec A vector data structure of type <ref refid="structDble" kindref="compound">Dble</ref></para>
<para><programlisting><codeline><highlight class="normal">Dble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_double_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>a[10]<sp/>=<sp/>{1.,<sp/>2.,<sp/>3.,<sp/>4.,<sp/>5.,<sp/>6.,<sp/>7.,<sp/>8.,<sp/>9.,<sp/>10.};</highlight></codeline>
<codeline><highlight class="normal">insert_double_vector(&amp;vec,<sp/>a,<sp/>10,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>stdev<sp/>=<sp/>stdev_double_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(stdev);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.2076</highlight></codeline>
<codeline><highlight class="normal">free_double_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3884" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3884" bodyend="3939"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
        <references refid="vector_8c_1ab0985989db7774a2f4ccf0f6bc7fd0ed" compoundref="vector_8c" startline="3230" endline="3234">average_double_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1abf8b31942231ba26f9f5d4729cdd5370" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long double</type>
        <definition>long double stdev_ldouble_vector</definition>
        <argsstring>(LDble *vec)</argsstring>
        <name>stdev_ldouble_vector</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function wil calculate the standard deviation for the values in a vector container.</para>
<para>/param vec A vector data structure of type <ref refid="structLDble" kindref="compound">LDble</ref></para>
<para><programlisting><codeline><highlight class="normal">LDble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ldouble_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>a[10]<sp/>=<sp/>{1.,<sp/>2.,<sp/>3.,<sp/>4.,<sp/>5.,<sp/>6.,<sp/>7.,<sp/>8.,<sp/>9.,<sp/>10.};</highlight></codeline>
<codeline><highlight class="normal">insert_ldouble_vector(&amp;vec,<sp/>a,<sp/>10,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>stdev<sp/>=<sp/>stdev_ldouble_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(stdev);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.2076</highlight></codeline>
<codeline><highlight class="normal">free_ldouble_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="3942" column="13" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3942" bodyend="3997"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
        <references refid="vector_8c_1a136fac1692146b0fc1dd1f548b6a07a4" compoundref="vector_8c" startline="3237" endline="3241">average_ldouble_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ac45503684793e5582c2bdac1d7d52ba3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char max_char_vector</definition>
        <argsstring>(Char *vec)</argsstring>
        <name>max_char_vector</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the max value in a vector data structure of type <ref refid="structChar" kindref="compound">Char</ref></para>
<para>/param vec A vector data structure of type <ref refid="structChar" kindref="compound">Char</ref></para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_char_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">char<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_char_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">char<sp/>max<sp/>=<sp/>max_char_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>5</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4002" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4002" bodyend="4010"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a20c0c3f6f0baca86dd48608bbf4fb02e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char</type>
        <definition>unsigned char max_uchar_vector</definition>
        <argsstring>(UChar *vec)</argsstring>
        <name>max_uchar_vector</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the max value in a vector data structure of type <ref refid="structUChar" kindref="compound">UChar</ref></para>
<para>/param vec A vector data structure of type <ref refid="structUChar" kindref="compound">UChar</ref></para>
<para><programlisting><codeline><highlight class="normal">UChar<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uchar_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>char<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_uchar_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>char<sp/>max<sp/>=<sp/>max_uchar_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>5</highlight></codeline>
<codeline><highlight class="normal">free_uchar_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4013" column="15" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4013" bodyend="4021"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a9322308e4f52e03ae336549fd42b7934" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>short int</type>
        <definition>short int max_short_vector</definition>
        <argsstring>(Short *vec)</argsstring>
        <name>max_short_vector</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the max value in a vector data structure of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para>/param vec A vector data structure of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para><programlisting><codeline><highlight class="normal">Short<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_short_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">short<sp/>int<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_short_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">short<sp/>int<sp/>max<sp/>=<sp/>max_short_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>5</highlight></codeline>
<codeline><highlight class="normal">free_short_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4024" column="11" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4024" bodyend="4032"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a60d805f5dc29474286fb04c939b5c509" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned short int</type>
        <definition>unsigned short int max_ushort_vector</definition>
        <argsstring>(UShort *vec)</argsstring>
        <name>max_ushort_vector</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the max value in a vector data structure of type <ref refid="structUShort" kindref="compound">UShort</ref></para>
<para>/param vec A vector data structure of type <ref refid="structUShort" kindref="compound">UShort</ref></para>
<para><programlisting><codeline><highlight class="normal">UShort<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ushort_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>short<sp/>int<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ushort_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>short<sp/>int<sp/>max<sp/>=<sp/>max_ushort_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>5</highlight></codeline>
<codeline><highlight class="normal">free_ushort_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4035" column="20" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4035" bodyend="4043"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a2b015405abe5287fffe31e5dc0e31808" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int max_int_vector</definition>
        <argsstring>(Int *vec)</argsstring>
        <name>max_int_vector</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the max value in a vector data structure of type <ref refid="structInt" kindref="compound">Int</ref></para>
<para>/param vec A vector data structure of type <ref refid="structInt" kindref="compound">Int</ref></para>
<para><programlisting><codeline><highlight class="normal">Int<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_int_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_int_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>max<sp/>=<sp/>max_int_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>5</highlight></codeline>
<codeline><highlight class="normal">free_int_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4046" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4046" bodyend="4054"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a174988fd6cd94257cb6332b91429839d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int max_uint_vector</definition>
        <argsstring>(UInt *vec)</argsstring>
        <name>max_uint_vector</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the max value in a vector data structure of type <ref refid="structUInt" kindref="compound">UInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structUInt" kindref="compound">UInt</ref></para>
<para><programlisting><codeline><highlight class="normal">UInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uint_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>int<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_uint_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>int<sp/>max<sp/>=<sp/>max_uint_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>5</highlight></codeline>
<codeline><highlight class="normal">free_uint_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4057" column="14" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4057" bodyend="4065"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a3b06accf11f120a22aec6d59ed16d9db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int max_long_vector</definition>
        <argsstring>(LInt *vec)</argsstring>
        <name>max_long_vector</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the max value in a vector data structure of type <ref refid="structLInt" kindref="compound">LInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structLInt" kindref="compound">LInt</ref></para>
<para><programlisting><codeline><highlight class="normal">LInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_long_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>int<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_long_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>int<sp/>max<sp/>=<sp/>max_long_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>5</highlight></codeline>
<codeline><highlight class="normal">free_long_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4068" column="10" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4068" bodyend="4076"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ab73b0a00fcc4f391123628e2913a19bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long int</type>
        <definition>unsigned long int max_ulong_vector</definition>
        <argsstring>(ULInt *vec)</argsstring>
        <name>max_ulong_vector</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the max value in a vector data structure of type <ref refid="structULInt" kindref="compound">ULInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structULInt" kindref="compound">ULInt</ref></para>
<para><programlisting><codeline><highlight class="normal">ULInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ulong_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ulong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>int<sp/>max<sp/>=<sp/>max_ulong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>5</highlight></codeline>
<codeline><highlight class="normal">free_ulong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4079" column="19" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4079" bodyend="4087"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a812e8c27f2970204cc8460728d13c96f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long long int</type>
        <definition>long long int max_llong_vector</definition>
        <argsstring>(LLInt *vec)</argsstring>
        <name>max_llong_vector</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the max value in a vector data structure of type <ref refid="structLLInt" kindref="compound">LLInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structLLInt" kindref="compound">LLInt</ref></para>
<para><programlisting><codeline><highlight class="normal">LLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_llong_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_llong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>long<sp/>int<sp/>max<sp/>=<sp/>max_llong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>5</highlight></codeline>
<codeline><highlight class="normal">free_llong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4090" column="15" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4090" bodyend="4098"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a1960c8508e6fe43960e240626c497764" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long long int</type>
        <definition>unsigned long long int max_ullong_vector</definition>
        <argsstring>(ULLInt *vec)</argsstring>
        <name>max_ullong_vector</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the max value in a vector data structure of type <ref refid="structULLInt" kindref="compound">ULLInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structULLInt" kindref="compound">ULLInt</ref></para>
<para><programlisting><codeline><highlight class="normal">ULLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ullong_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ullong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>long<sp/>int<sp/>max<sp/>=<sp/>max_ullong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>5</highlight></codeline>
<codeline><highlight class="normal">free_ullong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4101" column="24" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4101" bodyend="4109"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a6a09841dc59b5a463a167ee7c2911efe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float max_float_vector</definition>
        <argsstring>(Flt *vec)</argsstring>
        <name>max_float_vector</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the max value in a vector data structure of type <ref refid="structFlt" kindref="compound">Flt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structFlt" kindref="compound">Flt</ref></para>
<para><programlisting><codeline><highlight class="normal">Flt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_float_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>a[5]<sp/>=<sp/>{<sp/>1.1,<sp/>2.2,<sp/>3.3,<sp/>4.4,<sp/>5.5};</highlight></codeline>
<codeline><highlight class="normal">insert_float_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>max<sp/>=<sp/>max_float_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>5.5</highlight></codeline>
<codeline><highlight class="normal">free_float_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4112" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4112" bodyend="4120"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a2da642346c710d417636ad41cd99b9a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double max_double_vector</definition>
        <argsstring>(Dble *vec)</argsstring>
        <name>max_double_vector</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the max value in a vector data structure of type <ref refid="structDble" kindref="compound">Dble</ref></para>
<para>/param vec A vector data structure of type <ref refid="structDble" kindref="compound">Dble</ref></para>
<para><programlisting><codeline><highlight class="normal">Dble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_double_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>a[5]<sp/>=<sp/>{<sp/>1.1,<sp/>2.2,<sp/>3.3,<sp/>4.4,<sp/>5.5};</highlight></codeline>
<codeline><highlight class="normal">insert_double_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>max<sp/>=<sp/>max_double_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>5.5</highlight></codeline>
<codeline><highlight class="normal">free_double_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4123" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4123" bodyend="4131"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1adcda6720fac922e691d3bf4927edb42a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long double</type>
        <definition>long double max_ldouble_vector</definition>
        <argsstring>(LDble *vec)</argsstring>
        <name>max_ldouble_vector</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the max value in a vector data structure of type <ref refid="structLDble" kindref="compound">LDble</ref></para>
<para>/param vec A vector data structure of type <ref refid="structLDble" kindref="compound">LDble</ref></para>
<para><programlisting><codeline><highlight class="normal">LDble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ldouble_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>a[5]<sp/>=<sp/>{<sp/>1.1,<sp/>2.2,<sp/>3.3,<sp/>4.4,<sp/>5.5};</highlight></codeline>
<codeline><highlight class="normal">insert_ldouble_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>max<sp/>=<sp/>max_ldouble_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>5.5</highlight></codeline>
<codeline><highlight class="normal">free_ldouble_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4134" column="13" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4134" bodyend="4142"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a891486b9b55a8c3ac25a1225553fb0c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char min_char_vector</definition>
        <argsstring>(Char *vec)</argsstring>
        <name>min_char_vector</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the min value in a vector data structure of type <ref refid="structChar" kindref="compound">Char</ref></para>
<para>/param vec A vector data structure of type <ref refid="structChar" kindref="compound">Char</ref> /return min The minimum value</para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_char_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">char<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_char_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">char<sp/>min<sp/>=<sp/>min_char_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>1</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4147" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4147" bodyend="4155"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a1dbc7c797a21eb6c44d009cb497b50ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char</type>
        <definition>unsigned char min_uchar_vector</definition>
        <argsstring>(UChar *vec)</argsstring>
        <name>min_uchar_vector</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the min value in a vector data structure of type <ref refid="structUChar" kindref="compound">UChar</ref></para>
<para>/param vec A vector data structure of type <ref refid="structShort" kindref="compound">Short</ref> /param min The minimum values</para>
<para><programlisting><codeline><highlight class="normal">UChar<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uchar_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>char<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_uchar_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>char<sp/>min<sp/>=<sp/>min_uchar_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>1</highlight></codeline>
<codeline><highlight class="normal">free_uchar_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4158" column="15" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4158" bodyend="4166"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a21be2c6c074005bfa1c33603299f3181" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>short int</type>
        <definition>short int min_short_vector</definition>
        <argsstring>(Short *vec)</argsstring>
        <name>min_short_vector</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the min value in a vector data structure of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para>/param vec A vector data structure of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para><programlisting><codeline><highlight class="normal">Short<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_short_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">short<sp/>int<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_short_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">short<sp/>int<sp/>min<sp/>=<sp/>min_short_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>1</highlight></codeline>
<codeline><highlight class="normal">free_short_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4169" column="11" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4169" bodyend="4177"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a3b2bb12ccbe4e256ec4da071673dd601" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned short int</type>
        <definition>unsigned short int min_ushort_vector</definition>
        <argsstring>(UShort *vec)</argsstring>
        <name>min_ushort_vector</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the min value in a vector data structure of type <ref refid="structUShort" kindref="compound">UShort</ref></para>
<para>/param vec A vector data structure of type <ref refid="structUShort" kindref="compound">UShort</ref></para>
<para><programlisting><codeline><highlight class="normal">UShort<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ushort_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>short<sp/>int<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ushort_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>short<sp/>int<sp/>min<sp/>=<sp/>min_ushort_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>1</highlight></codeline>
<codeline><highlight class="normal">free_ushort_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4180" column="20" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4180" bodyend="4188"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1aad99e117541f381f0c14f5620507f6e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int min_int_vector</definition>
        <argsstring>(Int *vec)</argsstring>
        <name>min_int_vector</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the min value in a vector data structure of type <ref refid="structInt" kindref="compound">Int</ref></para>
<para>/param vec A vector data structure of type <ref refid="structInt" kindref="compound">Int</ref></para>
<para><programlisting><codeline><highlight class="normal">Int<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_int_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_int_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>min<sp/>=<sp/>min_int_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>1</highlight></codeline>
<codeline><highlight class="normal">free_int_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4191" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4191" bodyend="4199"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a449905d346deae4f4a83314c592a5b80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int min_uint_vector</definition>
        <argsstring>(UInt *vec)</argsstring>
        <name>min_uint_vector</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the min value in a vector data structure of type <ref refid="structUInt" kindref="compound">UInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structUInt" kindref="compound">UInt</ref></para>
<para><programlisting><codeline><highlight class="normal">UInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uint_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>int<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_uint_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>int<sp/>min<sp/>=<sp/>min_uint_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>1</highlight></codeline>
<codeline><highlight class="normal">free_uint_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4202" column="14" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4202" bodyend="4210"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1aaff52778fc2f05ace6de3570530e9068" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int min_long_vector</definition>
        <argsstring>(LInt *vec)</argsstring>
        <name>min_long_vector</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the min value in a vector data structure of type <ref refid="structLInt" kindref="compound">LInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structLInt" kindref="compound">LInt</ref></para>
<para><programlisting><codeline><highlight class="normal">LInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_long_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>int<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_long_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>int<sp/>min<sp/>=<sp/>min_long_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>1</highlight></codeline>
<codeline><highlight class="normal">free_long_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4213" column="10" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4213" bodyend="4221"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a98b9ea464f1a6e1012f3aae9031a8a13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long int</type>
        <definition>unsigned long int min_ulong_vector</definition>
        <argsstring>(ULInt *vec)</argsstring>
        <name>min_ulong_vector</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the min value in a vector data structure of type <ref refid="structULInt" kindref="compound">ULInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structULInt" kindref="compound">ULInt</ref></para>
<para><programlisting><codeline><highlight class="normal">ULInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ulong_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ulong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>int<sp/>min<sp/>=<sp/>min_ulong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>1</highlight></codeline>
<codeline><highlight class="normal">free_ulong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4224" column="19" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4224" bodyend="4232"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ad1a7c046cbcac65a71e5442ec5680bdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long long int</type>
        <definition>long long int min_llong_vector</definition>
        <argsstring>(LLInt *vec)</argsstring>
        <name>min_llong_vector</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the min value in a vector data structure of type <ref refid="structLLInt" kindref="compound">LLInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structLLInt" kindref="compound">LLInt</ref></para>
<para><programlisting><codeline><highlight class="normal">LLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_llong_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_llong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>long<sp/>int<sp/>min<sp/>=<sp/>min_llong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>1</highlight></codeline>
<codeline><highlight class="normal">free_llong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4235" column="15" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4235" bodyend="4243"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a10aea428d676da30abd474d11dbab300" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long long int</type>
        <definition>unsigned long long int min_ullong_vector</definition>
        <argsstring>(ULLInt *vec)</argsstring>
        <name>min_ullong_vector</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the min value in a vector data structure of type <ref refid="structULLInt" kindref="compound">ULLInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structULLInt" kindref="compound">ULLInt</ref></para>
<para><programlisting><codeline><highlight class="normal">ULLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ullong_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ullong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>long<sp/>int<sp/>min<sp/>=<sp/>min_ullong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>1</highlight></codeline>
<codeline><highlight class="normal">free_ullong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4246" column="24" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4246" bodyend="4254"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a37e7749c40c9ecefb35c6f677e6e2786" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float min_float_vector</definition>
        <argsstring>(Flt *vec)</argsstring>
        <name>min_float_vector</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the min value in a vector data structure of type <ref refid="structFlt" kindref="compound">Flt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structFlt" kindref="compound">Flt</ref></para>
<para><programlisting><codeline><highlight class="normal">Flt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_float_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>a[5]<sp/>=<sp/>{1.,<sp/>2.,<sp/>3.,<sp/>4.,<sp/>5.};</highlight></codeline>
<codeline><highlight class="normal">insert_float_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>min<sp/>=<sp/>min_float_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>1</highlight></codeline>
<codeline><highlight class="normal">free_float_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4257" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4257" bodyend="4265"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ac870c654ea8b8143650fb8504880d80a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double min_double_vector</definition>
        <argsstring>(Dble *vec)</argsstring>
        <name>min_double_vector</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the min value in a vector data structure of type <ref refid="structDble" kindref="compound">Dble</ref></para>
<para>/param vec A vector data structure of type <ref refid="structDble" kindref="compound">Dble</ref></para>
<para><programlisting><codeline><highlight class="normal">Dble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_double_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>a[5]<sp/>=<sp/>{<sp/>1.,<sp/>2.,<sp/>3.,<sp/>4.,<sp/>5.};</highlight></codeline>
<codeline><highlight class="normal">insert_double_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>min<sp/>=<sp/>min_double_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>1</highlight></codeline>
<codeline><highlight class="normal">free_double_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4268" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4268" bodyend="4276"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1af3eef7302375a05b37b3ae4e0d8251a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long double</type>
        <definition>long double min_ldouble_vector</definition>
        <argsstring>(LDble *vec)</argsstring>
        <name>min_ldouble_vector</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the min value in a vector data structure of type <ref refid="structLDble" kindref="compound">LDble</ref></para>
<para>/param vec A vector data structure of type <ref refid="structLDble" kindref="compound">LDble</ref></para>
<para><programlisting><codeline><highlight class="normal">LDble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ldouble_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>a[5]<sp/>=<sp/>{<sp/>1.,<sp/>2.,<sp/>3.,<sp/>4.,<sp/>5.};</highlight></codeline>
<codeline><highlight class="normal">insert_ldouble_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>min<sp/>=<sp/>min_ldouble_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>1</highlight></codeline>
<codeline><highlight class="normal">free_ldouble_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4279" column="13" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4279" bodyend="4287"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ac3589c6090a8dc24ffe4211dbb42b15f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void range_char_vector</definition>
        <argsstring>(Char *vec, char start, char end, char delta)</argsstring>
        <name>range_char_vector</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>char</type>
          <declname>start</declname>
        </param>
        <param>
          <type>char</type>
          <declname>end</declname>
        </param>
        <param>
          <type>char</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will add a range of data points to a vector data structure that start at a user defined data point and ends at another, or the nearest data point.</para>
<para>/param vec A vector data structure of type <ref refid="structChar" kindref="compound">Char</ref> /param start The start point /param end The end point /param delta The difference between each data point</para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_char_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">range_char_vector(&amp;vec,<sp/>2,<sp/>20,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>[<sp/>2,<sp/>4,<sp/>6,<sp/>8,<sp/>10,<sp/>12,<sp/>14,<sp/>16,<sp/>18,<sp/>20<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4292" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4292" bodyend="4299"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="vector_8c_1ab4f076e9a6e7d0795c2c3a0216c5c97e" compoundref="vector_8c" startline="712" endline="742">push_char_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a14f0626112aa000e6739a14556f761ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void range_uchar_vector</definition>
        <argsstring>(UChar *vec, unsigned char start, unsigned char end, unsigned char delta)</argsstring>
        <name>range_uchar_vector</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>start</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>end</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will add a range of data points to a vector data structure that start at a user defined data point and ends at another, or the nearest data point.</para>
<para>/param vec A vector data structure of type <ref refid="structUChar" kindref="compound">UChar</ref> /param start The start point /param end The end point /param delta The difference between each data point</para>
<para><programlisting><codeline><highlight class="normal">UChar<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uchar_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">range_uchar_vector(&amp;vec,<sp/>2,<sp/>20,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>[<sp/>2,<sp/>4,<sp/>6,<sp/>8,<sp/>10,<sp/>12,<sp/>14,<sp/>16,<sp/>18,<sp/>20<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uchar_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4302" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4302" bodyend="4309"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="vector_8c_1acc6fd3b434ba25d3473adff60160500b" compoundref="vector_8c" startline="745" endline="775">push_uchar_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1adb305706da4585539cd057cfa0ec0e2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void range_short_vector</definition>
        <argsstring>(Short *vec, short int start, short int end, short int delta)</argsstring>
        <name>range_short_vector</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>short int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>short int</type>
          <declname>end</declname>
        </param>
        <param>
          <type>short int</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will add a range of data points to a vector data structure that start at a user defined data point and ends at another, or the nearest data point.</para>
<para>/param vec A vector data structure of type <ref refid="structShort" kindref="compound">Short</ref> /param start The start point /param end The end point /param delta The difference between each data point</para>
<para><programlisting><codeline><highlight class="normal">Short<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_short_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">range_short_vector(&amp;vec,<sp/>2,<sp/>20,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>[<sp/>2,<sp/>4,<sp/>6,<sp/>8,<sp/>10,<sp/>12,<sp/>14,<sp/>16,<sp/>18,<sp/>20<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_short_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4312" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4312" bodyend="4319"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="vector_8c_1a38068c17aa5cf7286175572d43219b8d" compoundref="vector_8c" startline="349" endline="379">push_short_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a062892c86bd6a4934d91c804684cf755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void range_ushort_vector</definition>
        <argsstring>(UShort *vec, unsigned short int start, unsigned short int end, unsigned short int delta)</argsstring>
        <name>range_ushort_vector</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned short int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>unsigned short int</type>
          <declname>end</declname>
        </param>
        <param>
          <type>unsigned short int</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will add a range of data points to a vector data structure that start at a user defined data point and ends at another, or the nearest data point.</para>
<para>/param vec A vector data structure of type <ref refid="structUShort" kindref="compound">UShort</ref> /param start The start point /param end The end point /param delta The difference between each data point</para>
<para><programlisting><codeline><highlight class="normal">UShort<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ushort_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">range_ushort_vector(&amp;vec,<sp/>2,<sp/>20,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>[<sp/>2,<sp/>4,<sp/>6,<sp/>8,<sp/>10,<sp/>12,<sp/>14,<sp/>16,<sp/>18,<sp/>20<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ushort_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4322" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4322" bodyend="4330"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="vector_8c_1a97670c026df2a05dda5b0c85ebeb4d69" compoundref="vector_8c" startline="382" endline="412">push_ushort_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a184898353e0603cd18372448c8a842e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void range_int_vector</definition>
        <argsstring>(Int *vec, int start, int end, int delta)</argsstring>
        <name>range_int_vector</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>end</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will add a range of data points to a vector data structure that start at a user defined data point and ends at another, or the nearest data point.</para>
<para>/param vec A vector data structure of type <ref refid="structInt" kindref="compound">Int</ref> /param start The start point /param end The end point /param delta The difference between each data point</para>
<para><programlisting><codeline><highlight class="normal">Int<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_int_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">range_int_vector(&amp;vec,<sp/>2,<sp/>20,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>[<sp/>2,<sp/>4,<sp/>6,<sp/>8,<sp/>10,<sp/>12,<sp/>14,<sp/>16,<sp/>18,<sp/>20<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_int_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4333" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4333" bodyend="4340"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="vector_8c_1a6baf75dc56de293f3dbdc8ac40934980" compoundref="vector_8c" startline="415" endline="445">push_int_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1adce9ffbf72bc5678dbd702bf9840f363" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void range_uint_vector</definition>
        <argsstring>(UInt *vec, unsigned int start, unsigned int end, unsigned int delta)</argsstring>
        <name>range_uint_vector</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>end</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will add a range of data points to a vector data structure that start at a user defined data point and ends at another, or the nearest data point.</para>
<para>/param vec A vector data structure of type <ref refid="structUInt" kindref="compound">UInt</ref> /param start The start point /param end The end point /param delta The difference between each data point</para>
<para><programlisting><codeline><highlight class="normal">UInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uint_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">range_uint_vector(&amp;vec,<sp/>2,<sp/>20,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>[<sp/>2,<sp/>4,<sp/>6,<sp/>8,<sp/>10,<sp/>12,<sp/>14,<sp/>16,<sp/>18,<sp/>20<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uint_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4343" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4343" bodyend="4351"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="vector_8c_1a787fc2bba6112c4ede10d0ec14ab3825" compoundref="vector_8c" startline="448" endline="478">push_uint_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1aed9932998976a7d3ce615075dd5af09b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void range_long_vector</definition>
        <argsstring>(LInt *vec, long int start, long int end, long int delta)</argsstring>
        <name>range_long_vector</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>end</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will add a range of data points to a vector data structure that start at a user defined data point and ends at another, or the nearest data point.</para>
<para>/param vec A vector data structure of type <ref refid="structLInt" kindref="compound">LInt</ref> /param start The start point /param end The end point /param delta The difference between each data point</para>
<para><programlisting><codeline><highlight class="normal">LInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_long_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">range_long_vector(&amp;vec,<sp/>2,<sp/>20,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>[<sp/>2,<sp/>4,<sp/>6,<sp/>8,<sp/>10,<sp/>12,<sp/>14,<sp/>16,<sp/>18,<sp/>20<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_long_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4354" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4354" bodyend="4361"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="vector_8c_1a6135368684b7d740482cfc775417f255" compoundref="vector_8c" startline="481" endline="511">push_long_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a4fe9caa2febfe85a1107394d8b42c348" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void range_ulong_vector</definition>
        <argsstring>(ULInt *vec, unsigned long int start, unsigned long int end, unsigned long int delta)</argsstring>
        <name>range_ulong_vector</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned long int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>unsigned long int</type>
          <declname>end</declname>
        </param>
        <param>
          <type>unsigned long int</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will add a range of data points to a vector data structure that start at a user defined data point and ends at another, or the nearest data point.</para>
<para>/param vec A vector data structure of type <ref refid="structULInt" kindref="compound">ULInt</ref> /param start The start point /param end The end point /param delta The difference between each data point</para>
<para><programlisting><codeline><highlight class="normal">ULInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ulong_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">range_ulong_vector(&amp;vec,<sp/>2,<sp/>20,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>[<sp/>2,<sp/>4,<sp/>6,<sp/>8,<sp/>10,<sp/>12,<sp/>14,<sp/>16,<sp/>18,<sp/>20<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ulong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4364" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4364" bodyend="4372"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="vector_8c_1aea5f95b56df2836ee553face60351e61" compoundref="vector_8c" startline="514" endline="544">push_ulong_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1afa81d739815cef7056167d48361e0891" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void range_llong_vector</definition>
        <argsstring>(LLInt *vec, long long int start, long long int end, long long int delta)</argsstring>
        <name>range_llong_vector</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long long int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>long long int</type>
          <declname>end</declname>
        </param>
        <param>
          <type>long long int</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will add a range of data points to a vector data structure that start at a user defined data point and ends at another, or the nearest data point.</para>
<para>/param vec A vector data structure of type <ref refid="structLLInt" kindref="compound">LLInt</ref> /param start The start point /param end The end point /param delta The difference between each data point</para>
<para><programlisting><codeline><highlight class="normal">LLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_llong_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">range_llong_vector(&amp;vec,<sp/>2,<sp/>20,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>[<sp/>2,<sp/>4,<sp/>6,<sp/>8,<sp/>10,<sp/>12,<sp/>14,<sp/>16,<sp/>18,<sp/>20<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_llong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4375" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4375" bodyend="4382"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="vector_8c_1a93f7e28f97718d9d7c5c84df61c1466c" compoundref="vector_8c" startline="547" endline="577">push_llong_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a6b8d5f1723a1e5e9a0d03da80e93b68e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void range_ullong_vector</definition>
        <argsstring>(ULLInt *vec, unsigned long long int start, unsigned long long int end, unsigned long long int delta)</argsstring>
        <name>range_ullong_vector</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned long long int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>unsigned long long int</type>
          <declname>end</declname>
        </param>
        <param>
          <type>unsigned long long int</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will add a range of data points to a vector data structure that start at a user defined data point and ends at another, or the nearest data point.</para>
<para>/param vec A vector data structure of type <ref refid="structULLInt" kindref="compound">ULLInt</ref> /param start The start point /param end The end point /param delta The difference between each data point</para>
<para><programlisting><codeline><highlight class="normal">ULLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ullong_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">range_ullong_vector(&amp;vec,<sp/>2,<sp/>20,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>[<sp/>2,<sp/>4,<sp/>6,<sp/>8,<sp/>10,<sp/>12,<sp/>14,<sp/>16,<sp/>18,<sp/>20<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ullong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4385" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4385" bodyend="4393"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="vector_8c_1a3478a298e62d85cb93f11a78f64d6f80" compoundref="vector_8c" startline="580" endline="610">push_ullong_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a85d0392c18b7db31c0a14bc2aa13448c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void range_float_vector</definition>
        <argsstring>(Flt *vec, float start, float end, float delta)</argsstring>
        <name>range_float_vector</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>float</type>
          <declname>start</declname>
        </param>
        <param>
          <type>float</type>
          <declname>end</declname>
        </param>
        <param>
          <type>float</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will add a range of data points to a vector data structure that start at a user defined data point and ends at another, or the nearest data point.</para>
<para>/param vec A vector data structure of type <ref refid="structFlt" kindref="compound">Flt</ref> /param start The start point /param end The end point /param delta The difference between each data point</para>
<para><programlisting><codeline><highlight class="normal">Flt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_float_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">range_float_vector(&amp;vec,<sp/>2,<sp/>20,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>[<sp/>2,<sp/>4,<sp/>6,<sp/>8,<sp/>10,<sp/>12,<sp/>14,<sp/>16,<sp/>18,<sp/>20<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_float_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4396" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4396" bodyend="4403"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="vector_8c_1a31e02f437f4f9f43d1126e017ae1cac3" compoundref="vector_8c" startline="613" endline="643">push_float_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a636afa2f2e2af7dbbd34b7cb42d11163" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void range_double_vector</definition>
        <argsstring>(Dble *vec, double start, double end, double delta)</argsstring>
        <name>range_double_vector</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>double</type>
          <declname>start</declname>
        </param>
        <param>
          <type>double</type>
          <declname>end</declname>
        </param>
        <param>
          <type>double</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will add a range of data points to a vector data structure that start at a user defined data point and ends at another, or the nearest data point.</para>
<para>/param vec A vector data structure of type <ref refid="structDble" kindref="compound">Dble</ref> /param start The start point /param end The end point /param delta The difference between each data point</para>
<para><programlisting><codeline><highlight class="normal">Dble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_double_vectoe(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">range_double_vector(&amp;vec,<sp/>2,<sp/>20,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>[<sp/>2,<sp/>4,<sp/>6,<sp/>8,<sp/>10,<sp/>12,<sp/>14,<sp/>16,<sp/>18,<sp/>20<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_double_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4406" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4406" bodyend="4414"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="vector_8c_1ab312c467d82a0fccc66cbb89a6b8de5c" compoundref="vector_8c" startline="646" endline="676">push_double_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ae5505a9a69a6701bcafa4b92eb06055f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void range_ldouble_vector</definition>
        <argsstring>(LDble *vec, long double start, long double end, long double delta)</argsstring>
        <name>range_ldouble_vector</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>start</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>end</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will add a range of data points to a vector data structure that start at a user defined data point and ends at another, or the nearest data point.</para>
<para>/param vec A vector data structure of type <ref refid="structLDble" kindref="compound">LDble</ref> /param start The start point /param end The end point /param delta The difference between each data point</para>
<para><programlisting><codeline><highlight class="normal">LDble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ldouble_vector(&amp;vec,<sp/>10)</highlight></codeline>
<codeline><highlight class="normal">range_ldouble_vector(&amp;vec,<sp/>2,<sp/>20,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>[<sp/>2,<sp/>4,<sp/>6,<sp/>8,<sp/>10,<sp/>12,<sp/>14,<sp/>16,<sp/>18,<sp/>20<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ldouble_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4417" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4417" bodyend="4425"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="vector_8c_1ad001560a2793c40efb1c64532cefe2e2" compoundref="vector_8c" startline="679" endline="709">push_ldouble_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a34d64d0cfc6dc0e1e5b3ab4d685f9b17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>short int</type>
        <definition>short int short_vector_data</definition>
        <argsstring>(Short *vec, size_t index)</argsstring>
        <name>short_vector_data</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will retireve the data from a user specified index in a vector or array of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para>/param vec A linked list struct of type <ref refid="structShort" kindref="compound">Short</ref> /param index The index from where data will be retrieved /return dat An unsigned bool data point</para>
<para><programlisting><codeline><highlight class="normal">Short<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_short_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">short<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_short_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">PRINT(short_vector_data(&amp;vec,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3</highlight></codeline>
<codeline><highlight class="normal">free_short_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4430" column="11" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4430" bodyend="4430"/>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ae64308782a33a82a606c6463d0511a19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned short int</type>
        <definition>unsigned short int ushort_vector_data</definition>
        <argsstring>(UShort *vec, size_t index)</argsstring>
        <name>ushort_vector_data</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will retireve the data from a user specified index in a vector or array of type <ref refid="structUShort" kindref="compound">UShort</ref></para>
<para>/param vec A linked list struct of type <ref refid="structUShort" kindref="compound">UShort</ref> /param index The index from where data will be retrieved /return dat An unsigned bool data point</para>
<para><programlisting><codeline><highlight class="normal">UShort<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ushort_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>short<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ushort_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">PRINT(ushort_vector_data(&amp;vec,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3</highlight></codeline>
<codeline><highlight class="normal">free_ushort_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4433" column="20" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4433" bodyend="4433"/>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a3804e8951d833849ea5c7333b832bf1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int int_vector_data</definition>
        <argsstring>(Int *vec, size_t index)</argsstring>
        <name>int_vector_data</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will retireve the data from a user specified index in a vector or array of type <ref refid="structInt" kindref="compound">Int</ref></para>
<para>/param vec A linked list struct of type <ref refid="structInt" kindref="compound">Int</ref> /param index The index from where data will be retrieved /return dat An unsigned bool data point</para>
<para><programlisting><codeline><highlight class="normal">Int<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_int_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_int_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">PRINT(int_vector_data(&amp;vec,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3</highlight></codeline>
<codeline><highlight class="normal">free_int_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4436" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4436" bodyend="4436"/>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ac6172e0e9433875fa34c0faaf8647c6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int uint_vector_data</definition>
        <argsstring>(UInt *vec, size_t index)</argsstring>
        <name>uint_vector_data</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will retireve the data from a user specified index in a vector or array of type <ref refid="structUInt" kindref="compound">UInt</ref></para>
<para>/param vec A linked list struct of type <ref refid="structUInt" kindref="compound">UInt</ref> /param index The index from where data will be retrieved /return dat An unsigned bool data point</para>
<para><programlisting><codeline><highlight class="normal">UInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uint_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_uint_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">PRINT(uint_vector_data(&amp;vec,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3</highlight></codeline>
<codeline><highlight class="normal">free_uint_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4439" column="14" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4439" bodyend="4439"/>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a78c08d70ca4769c5fa2e4d87bcd35f4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int long_vector_data</definition>
        <argsstring>(LInt *vec, size_t index)</argsstring>
        <name>long_vector_data</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will retireve the data from a user specified index in a vector or array of type <ref refid="structLInt" kindref="compound">LInt</ref></para>
<para>/param vec A linked list struct of type <ref refid="structLInt" kindref="compound">LInt</ref> /param index The index from where data will be retrieved /return dat An unsigned bool data point</para>
<para><programlisting><codeline><highlight class="normal">LInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_long_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_long_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">PRINT(long_vector_data(&amp;vec,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3</highlight></codeline>
<codeline><highlight class="normal">free_long_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4442" column="10" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4442" bodyend="4442"/>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ae7aed886f0e33fc044d7d7bafcea088b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long int</type>
        <definition>unsigned long int ulong_vector_data</definition>
        <argsstring>(ULInt *vec, size_t index)</argsstring>
        <name>ulong_vector_data</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will retireve the data from a user specified index in a vector or array of type <ref refid="structULInt" kindref="compound">ULInt</ref></para>
<para>/param vec A linked list struct of type <ref refid="structULInt" kindref="compound">ULInt</ref> /param index The index from where data will be retrieved /return dat An unsigned bool data point</para>
<para><programlisting><codeline><highlight class="normal">ULInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ulong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ulong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">PRINT(ulong_vector_data(&amp;vec,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3</highlight></codeline>
<codeline><highlight class="normal">free_ulong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4445" column="19" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4445" bodyend="4445"/>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ac368c61f3aceee6f22f7fdfd9c6866bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long long int</type>
        <definition>long long int llong_vector_data</definition>
        <argsstring>(LLInt *vec, size_t index)</argsstring>
        <name>llong_vector_data</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will retireve the data from a user specified index in a vector or array of type <ref refid="structLLInt" kindref="compound">LLInt</ref></para>
<para>/param vec A linked list struct of type <ref refid="structLLInt" kindref="compound">LLInt</ref> /param index The index from where data will be retrieved /return dat An unsigned bool data point</para>
<para><programlisting><codeline><highlight class="normal">LLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_llong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_llong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">PRINT(llong_vector_data(&amp;vec,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3</highlight></codeline>
<codeline><highlight class="normal">free_llong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4448" column="15" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4448" bodyend="4448"/>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a401a9795be5292f8c20fb032218c4b1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long long int</type>
        <definition>unsigned long long int ullong_vector_data</definition>
        <argsstring>(ULLInt *vec, size_t index)</argsstring>
        <name>ullong_vector_data</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will retireve the data from a user specified index in a vector or array of type <ref refid="structULLInt" kindref="compound">ULLInt</ref></para>
<para>/param vec A linked list struct of type <ref refid="structULLInt" kindref="compound">ULLInt</ref> /param index The index from where data will be retrieved /return dat An unsigned bool data point</para>
<para><programlisting><codeline><highlight class="normal">ULLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ullong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ullong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">PRINT(ullong_vector_data(&amp;vec,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3</highlight></codeline>
<codeline><highlight class="normal">free_ullong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4451" column="24" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4451" bodyend="4451"/>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a84fbf5e526da1adcad6858a643df2462" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float float_vector_data</definition>
        <argsstring>(Flt *vec, size_t index)</argsstring>
        <name>float_vector_data</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will retireve the data from a user specified index in a vector or array of type <ref refid="structFlt" kindref="compound">Flt</ref></para>
<para>/param vec A linked list struct of type <ref refid="structFlt" kindref="compound">Flt</ref> /param index The index from where data will be retrieved /return dat An unsigned bool data point</para>
<para><programlisting><codeline><highlight class="normal">Flt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_float_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_float_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">PRINT(float_vector_data(&amp;vec,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.000</highlight></codeline>
<codeline><highlight class="normal">free_float_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4454" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4454" bodyend="4454"/>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a1c5e11f6eff0482afd6666532c1c150f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double double_vector_data</definition>
        <argsstring>(Dble *vec, size_t index)</argsstring>
        <name>double_vector_data</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will retireve the data from a user specified index in a vector or array of type <ref refid="structDble" kindref="compound">Dble</ref></para>
<para>/param vec A linked list struct of type <ref refid="structDble" kindref="compound">Dble</ref> /param index The index from where data will be retrieved /return dat An unsigned bool data point</para>
<para><programlisting><codeline><highlight class="normal">Dble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_double_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_double_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">PRINT(double_vector_data(&amp;vec,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.000</highlight></codeline>
<codeline><highlight class="normal">free_double_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4457" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4457" bodyend="4457"/>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a4ff7d557d90612b873092b0b9dd82b15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long double</type>
        <definition>long double ldouble_vector_data</definition>
        <argsstring>(LDble *vec, size_t index)</argsstring>
        <name>ldouble_vector_data</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will retireve the data from a user specified index in a vector or array of type <ref refid="structLDble" kindref="compound">LDble</ref></para>
<para>/param vec A linked list struct of type <ref refid="structLDble" kindref="compound">LDble</ref> /param index The index from where data will be retrieved /return dat An unsigned bool data point</para>
<para><programlisting><codeline><highlight class="normal">LDble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ldouble_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ldouble_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">PRINT(ldouble_vector_data(&amp;vec,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.000</highlight></codeline>
<codeline><highlight class="normal">free_ldouble_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4460" column="13" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4460" bodyend="4460"/>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1aa99d3902c062bd4e5e31b85ccd8867bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char char_vector_data</definition>
        <argsstring>(Char *vec, size_t index)</argsstring>
        <name>char_vector_data</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will retireve the data from a user specified index in a vector or array of type <ref refid="structChar" kindref="compound">Char</ref></para>
<para>/param vec A linked list struct of type <ref refid="structChar" kindref="compound">Char</ref> /param index The index from where data will be retrieved /return dat An unsigned bool data point</para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_char_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">char<sp/>a[5]<sp/>=<sp/>{&apos;a&apos;,<sp/>&apos;b&apos;,<sp/>&apos;c&apos;,<sp/>&apos;d&apos;,<sp/>&apos;e&apos;};</highlight></codeline>
<codeline><highlight class="normal">insert_char_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">PRINT(char_vector_data(&amp;vec,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>c</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4463" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4463" bodyend="4463"/>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a5ec8248dfe94805dce29484cf23b9db5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char</type>
        <definition>unsigned char uchar_vector_data</definition>
        <argsstring>(UChar *vec, size_t index)</argsstring>
        <name>uchar_vector_data</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will retireve the data from a user specified index in a vector or array of type <ref refid="structUChar" kindref="compound">UChar</ref></para>
<para>/param vec A linked list struct of type <ref refid="structUChar" kindref="compound">UChar</ref> /param index The index from where data will be retrieved /return dat An unsigned bool data point</para>
<para><programlisting><codeline><highlight class="normal">UChar<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uchar_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>char<sp/>a[5]<sp/>=<sp/>{&apos;a&apos;,<sp/>&apos;b&apos;,<sp/>&apos;c&apos;,<sp/>&apos;d&apos;,<sp/>&apos;e&apos;};</highlight></codeline>
<codeline><highlight class="normal">insert_uchar_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">PRINT(uchar_vector_data(&amp;vec,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>c</highlight></codeline>
<codeline><highlight class="normal">free_uchar_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4466" column="15" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4466" bodyend="4466"/>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ab8ec8940661d127593fab26f02d3961a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bool_vector_data</definition>
        <argsstring>(Bool *vec, size_t index)</argsstring>
        <name>bool_vector_data</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will retireve the data from a user specified index in a vector or array of type <ref refid="structBool" kindref="compound">Bool</ref></para>
<para>/param vec A linked list struct of type <ref refid="structBool" kindref="compound">Bool</ref> /param index The index from where data will be retrieved /return dat An unsigned bool data point</para>
<para><programlisting><codeline><highlight class="normal">Bool<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_bool_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>a[5]<sp/>=<sp/>{true,<sp/>true,<sp/>false,<sp/>false,<sp/>true};</highlight></codeline>
<codeline><highlight class="normal">insert_bool_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">PRINT(bool_vector_data(&amp;vec,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>false</highlight></codeline>
<codeline><highlight class="normal">free_bool_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4469" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4469" bodyend="4469"/>
        <references refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" compoundref="vector_8h" startline="90">Bool::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a1cb0a8bfe346307c5d842d15ffacbc0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * string_vector_data</definition>
        <argsstring>(String *vec, size_t index)</argsstring>
        <name>string_vector_data</name>
        <param>
          <type><ref refid="structString" kindref="compound">String</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will retireve the data from a user specified index in a vector or array of type <ref refid="structString" kindref="compound">String</ref></para>
<para>/param vec A linked list struct of type <ref refid="structString" kindref="compound">String</ref> /param index The index from where data will be retrieved /return dat An unsigned bool data point</para>
<para><programlisting><codeline><highlight class="normal">String<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_string_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(&amp;vec,<sp/>&quot;One&quot;,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(&amp;vec,<sp/>&quot;Two&quot;,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(&amp;vec,<sp/>&quot;Three&quot;,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(string_vector_data(&amp;vec,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>Three</highlight></codeline>
<codeline><highlight class="normal">free_string_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4472" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4472" bodyend="4472"/>
        <references refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" compoundref="vector_8h" startline="96">String::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ab88c9075f7ac94dd8656a8eec4a14a94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structShort" kindref="compound">Short</ref></type>
        <definition>Short copy_short_vector</definition>
        <argsstring>(Short *vec)</argsstring>
        <name>copy_short_vector</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will create and return a deep copy of an <ref refid="structShort" kindref="compound">Short</ref> struct</para>
<para>/param vec A vector struct of type <ref refid="structShort" kindref="compound">Short</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4477" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4477" bodyend="4482"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
        <references refid="vector_8c_1a749211e8a46a8b2297b3c6ebb78aed0e" compoundref="vector_8c" startline="18" endline="30">init_short_vector</references>
        <references refid="vector_8c_1a2ed595a869e30a4c834c1d2cf5b934ee" compoundref="vector_8c" startline="833" endline="866">insert_short_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1af70602cee86af9597513bc67b2878244" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structUShort" kindref="compound">UShort</ref></type>
        <definition>UShort copy_ushort_vector</definition>
        <argsstring>(UShort *vec)</argsstring>
        <name>copy_ushort_vector</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will create and return a deep copy of an <ref refid="structUShort" kindref="compound">UShort</ref> struct</para>
<para>/param vec A vector struct of type <ref refid="structUShort" kindref="compound">UShort</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4485" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4485" bodyend="4490"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
        <references refid="vector_8c_1aa63398bdb55f97b891b93404a89de14d" compoundref="vector_8c" startline="33" endline="45">init_ushort_vector</references>
        <references refid="vector_8c_1aa8495c3a316b6d93c8697d194c86fc2b" compoundref="vector_8c" startline="869" endline="902">insert_ushort_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a5fd73621c9da27949814495f00a3296f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structInt" kindref="compound">Int</ref></type>
        <definition>Int copy_int_vector</definition>
        <argsstring>(Int *vec)</argsstring>
        <name>copy_int_vector</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will create and return a deep copy of an <ref refid="structInt" kindref="compound">Int</ref> struct</para>
<para>/param vec A vector struct of type <ref refid="structInt" kindref="compound">Int</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4493" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4493" bodyend="4498"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
        <references refid="vector_8c_1a9fdb6c5fdd9f0d5a3bfb751f9e82968e" compoundref="vector_8c" startline="48" endline="60">init_int_vector</references>
        <references refid="vector_8c_1a0acf8b86d4a95be517c7af80f8eff4ac" compoundref="vector_8c" startline="905" endline="938">insert_int_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a6bf7c67135858a07103fff23436b7d77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structUInt" kindref="compound">UInt</ref></type>
        <definition>UInt copy_uint_vector</definition>
        <argsstring>(UInt *vec)</argsstring>
        <name>copy_uint_vector</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will create and return a deep copy of an <ref refid="structUInt" kindref="compound">UInt</ref> struct</para>
<para>/param vec A vector struct of type <ref refid="structUInt" kindref="compound">UInt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4501" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4501" bodyend="4506"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
        <references refid="vector_8c_1a9d8eb1d9ce65365d7b044fe684387a3f" compoundref="vector_8c" startline="63" endline="75">init_uint_vector</references>
        <references refid="vector_8c_1ad78d40537dece17df4f506fd6ba7dc34" compoundref="vector_8c" startline="941" endline="974">insert_uint_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1abc614587816c37e5dfd70c2a832da165" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structLInt" kindref="compound">LInt</ref></type>
        <definition>LInt copy_long_vector</definition>
        <argsstring>(LInt *vec)</argsstring>
        <name>copy_long_vector</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will create and return a deep copy of an <ref refid="structLInt" kindref="compound">LInt</ref> struct</para>
<para>/param vec A vector struct of type <ref refid="structLInt" kindref="compound">LInt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4509" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4509" bodyend="4514"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
        <references refid="vector_8c_1ac59c5fed0f4cd6b9aaf4c87b7a997bd3" compoundref="vector_8c" startline="78" endline="90">init_long_vector</references>
        <references refid="vector_8c_1ab5d840518e5e7bbd9ed243681b7124f7" compoundref="vector_8c" startline="977" endline="1010">insert_long_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a31f85f1454385a608eebc7d150417b7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structULInt" kindref="compound">ULInt</ref></type>
        <definition>ULInt copy_ulong_vector</definition>
        <argsstring>(ULInt *vec)</argsstring>
        <name>copy_ulong_vector</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will create and return a deep copy of an <ref refid="structULInt" kindref="compound">ULInt</ref> struct</para>
<para>/param vec A vector struct of type <ref refid="structULInt" kindref="compound">ULInt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4517" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4517" bodyend="4522"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
        <references refid="vector_8c_1af08098b392c0ff01db799bff9c83a521" compoundref="vector_8c" startline="93" endline="105">init_ulong_vector</references>
        <references refid="vector_8c_1aa419c32bb276bfe866787e1744669b94" compoundref="vector_8c" startline="1013" endline="1046">insert_ulong_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a2a8c6a77d383c5251686fc600c829005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structLLInt" kindref="compound">LLInt</ref></type>
        <definition>LLInt copy_llong_vector</definition>
        <argsstring>(LLInt *vec)</argsstring>
        <name>copy_llong_vector</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will create and return a deep copy of an <ref refid="structLLInt" kindref="compound">LLInt</ref> struct</para>
<para>/param vec A vector struct of type <ref refid="structLLInt" kindref="compound">LLInt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4525" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4525" bodyend="4530"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
        <references refid="vector_8c_1a65eda538d3c07a8beb1475c1a214ff67" compoundref="vector_8c" startline="107" endline="119">init_llong_vector</references>
        <references refid="vector_8c_1a9817d90055331624db7529c5d74a80ad" compoundref="vector_8c" startline="1049" endline="1082">insert_llong_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1abe7076983c8f386b305b615137dcd249" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structULLInt" kindref="compound">ULLInt</ref></type>
        <definition>ULLInt copy_ullong_vector</definition>
        <argsstring>(ULLInt *vec)</argsstring>
        <name>copy_ullong_vector</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will create and return a deep copy of an <ref refid="structULLInt" kindref="compound">ULLInt</ref> struct</para>
<para>/param vec A vector struct of type <ref refid="structULLInt" kindref="compound">ULLInt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4533" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4533" bodyend="4538"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
        <references refid="vector_8c_1ab05d31d34c87d8d6cd76f48539bf367f" compoundref="vector_8c" startline="122" endline="134">init_ullong_vector</references>
        <references refid="vector_8c_1afccda80cf8e96d76846df29a256f6974" compoundref="vector_8c" startline="1085" endline="1118">insert_ullong_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a440353dc4ac989fb88b34e7f5649dd05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structFlt" kindref="compound">Flt</ref></type>
        <definition>Flt copy_float_vector</definition>
        <argsstring>(Flt *vec)</argsstring>
        <name>copy_float_vector</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will create and return a deep copy of an <ref refid="structFlt" kindref="compound">Flt</ref> struct</para>
<para>/param vec A vector struct of type <ref refid="structFlt" kindref="compound">Flt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4541" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4541" bodyend="4546"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
        <references refid="vector_8c_1a92bba70874a1570bd9c87a2a7385af35" compoundref="vector_8c" startline="137" endline="149">init_float_vector</references>
        <references refid="vector_8c_1a17ee89c38df38d9d1d5b0cb2e33266d1" compoundref="vector_8c" startline="1121" endline="1154">insert_float_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a2d51a8a92a5c0e73345ade59b126ff35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDble" kindref="compound">Dble</ref></type>
        <definition>Dble copy_double_vector</definition>
        <argsstring>(Dble *vec)</argsstring>
        <name>copy_double_vector</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will create and return a deep copy of an <ref refid="structDble" kindref="compound">Dble</ref> struct</para>
<para>/param vec A vector struct of type <ref refid="structDble" kindref="compound">Dble</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4549" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4549" bodyend="4554"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
        <references refid="vector_8c_1a2c0735f69da8e40535b5ecceace1a399" compoundref="vector_8c" startline="152" endline="164">init_double_vector</references>
        <references refid="vector_8c_1af1e86e2b45b0339cc18ba5b35bf01132" compoundref="vector_8c" startline="1157" endline="1190">insert_double_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a3fa3120b9c06e25fc840f90c7e10c5a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structLDble" kindref="compound">LDble</ref></type>
        <definition>LDble copy_ldouble_vector</definition>
        <argsstring>(LDble *vec)</argsstring>
        <name>copy_ldouble_vector</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will create and return a deep copy of an <ref refid="structLDble" kindref="compound">LDble</ref> struct</para>
<para>/param vec A vector struct of type <ref refid="structLDble" kindref="compound">LDble</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4557" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4557" bodyend="4562"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
        <references refid="vector_8c_1a79d9f9d1d1cb31d09620bc5cdc73e94e" compoundref="vector_8c" startline="167" endline="179">init_ldouble_vector</references>
        <references refid="vector_8c_1a0ec3e3b802f62c5f9cdd9b7d197bd4a1" compoundref="vector_8c" startline="1193" endline="1226">insert_ldouble_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a430a540aea6caac8002281b9a2ddbf7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structChar" kindref="compound">Char</ref></type>
        <definition>Char copy_char_vector</definition>
        <argsstring>(Char *vec)</argsstring>
        <name>copy_char_vector</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will create and return a deep copy of an <ref refid="structChar" kindref="compound">Char</ref> struct</para>
<para>/param vec A vector struct of type <ref refid="structChar" kindref="compound">Char</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4565" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4565" bodyend="4570"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
        <references refid="vector_8c_1aecde718777430d31ec254f8a4f40cce0" compoundref="vector_8c" startline="182" endline="194">init_char_vector</references>
        <references refid="vector_8c_1a9e9db9d87d5a9f3bb6dae1ba5668ef12" compoundref="vector_8c" startline="1229" endline="1262">insert_char_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ac3e7f4298d195586bfc0cf8b0fc1a053" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structUChar" kindref="compound">UChar</ref></type>
        <definition>UChar copy_uchar_vector</definition>
        <argsstring>(UChar *vec)</argsstring>
        <name>copy_uchar_vector</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will create and return a deep copy of an <ref refid="structUChar" kindref="compound">UChar</ref> struct</para>
<para>/param vec A vector struct of type <ref refid="structUChar" kindref="compound">UChar</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4573" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4573" bodyend="4578"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
        <references refid="vector_8c_1a9289ec52674f95ebf45ac81b70dfdc67" compoundref="vector_8c" startline="197" endline="209">init_uchar_vector</references>
        <references refid="vector_8c_1ae5b1c45f4d2083c6d87f217646609a2d" compoundref="vector_8c" startline="1265" endline="1298">insert_uchar_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a2e6c2d82128d66d5fe6800ee6ad9d277" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structBool" kindref="compound">Bool</ref></type>
        <definition>Bool copy_bool_vector</definition>
        <argsstring>(Bool *vec)</argsstring>
        <name>copy_bool_vector</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will create and return a deep copy of an <ref refid="structBool" kindref="compound">Bool</ref> struct</para>
<para>/param vec A vector struct of type <ref refid="structBool" kindref="compound">Bool</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4581" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4581" bodyend="4586"/>
        <references refid="structBool_1a5445f6ef94d239208dc797c289fded75" compoundref="vector_8h" startline="90">Bool::active_length</references>
        <references refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" compoundref="vector_8h" startline="90">Bool::array</references>
        <references refid="vector_8c_1a2e1ea608c0b9b0768ba61facb8df913f" compoundref="vector_8c" startline="212" endline="224">init_bool_vector</references>
        <references refid="vector_8c_1ab344e3b36aa397f037cb2c573e1d3aff" compoundref="vector_8c" startline="1301" endline="1334">insert_bool_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a2cb84d3851679202a04f76066bc80a6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structString" kindref="compound">String</ref></type>
        <definition>String copy_string_vector</definition>
        <argsstring>(String *vec)</argsstring>
        <name>copy_string_vector</name>
        <param>
          <type><ref refid="structString" kindref="compound">String</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will create and return a deep copy of an <ref refid="structString" kindref="compound">String</ref> struct</para>
<para>/param vec A vector struct of type <ref refid="structString" kindref="compound">String</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4589" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4589" bodyend="4596"/>
        <references refid="structString_1a706ffaf2f520d46074dd99e7896d6673" compoundref="vector_8h" startline="97">String::active_length</references>
        <references refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" compoundref="vector_8h" startline="96">String::array</references>
        <references refid="vector_8c_1ad5c4c9d8676c13f1f381b0b6c1119c4d" compoundref="vector_8c" startline="227" endline="231">init_string_vector</references>
        <references refid="vector_8c_1a078616c26d55c1ddb2ec4c551298a4f8" compoundref="vector_8c" startline="811" endline="829">push_string_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1aeec337d3614f9c62cd652fee528e8f10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trim_short_vector</definition>
        <argsstring>(Short *vec)</argsstring>
        <name>trim_short_vector</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will resize the memory allocated to a dynamically allocated vector to the minimum necessary size.</para>
<para>/param vec A vector struct of type <ref refid="structShort" kindref="compound">Short</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4601" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4601" bodyend="4610"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1af0b6f4e61e69b8a2f74d42b09b421d88" compoundref="vector_8h" startline="77">Short::allocated_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a394639166d53eacb53725cf548f596db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trim_ushort_vector</definition>
        <argsstring>(UShort *vec)</argsstring>
        <name>trim_ushort_vector</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will resize the memory allocated to a dynamically allocated vector to the minimum necessary size.</para>
<para>/param vec A vector struct of type <ref refid="structUShort" kindref="compound">UShort</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4613" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4613" bodyend="4622"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a0ef4541f3fd3fcee1c0f5809341c84d6" compoundref="vector_8h" startline="78">UShort::allocated_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a1365d9e27b0080e8e48d9809987e0824" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trim_int_vector</definition>
        <argsstring>(Int *vec)</argsstring>
        <name>trim_int_vector</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will resize the memory allocated to a dynamically allocated vector to the minimum necessary size.</para>
<para>/param vec A vector struct of type <ref refid="structInt" kindref="compound">Int</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4625" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4625" bodyend="4634"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a63bea8755b3ce6be7e83970b9ea3bd68" compoundref="vector_8h" startline="79">Int::allocated_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1aafc05a4201bf2e5129655a7d4db8819c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trim_uint_vector</definition>
        <argsstring>(UInt *vec)</argsstring>
        <name>trim_uint_vector</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will resize the memory allocated to a dynamically allocated vector to the minimum necessary size.</para>
<para>/param vec A vector struct of type <ref refid="structUInt" kindref="compound">UInt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4637" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4637" bodyend="4646"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a05b28efaec93c388e8685403f57a07ce" compoundref="vector_8h" startline="80">UInt::allocated_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a8e0993c9b72acdbb4eec8bdea1687fd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trim_long_vector</definition>
        <argsstring>(LInt *vec)</argsstring>
        <name>trim_long_vector</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will resize the memory allocated to a dynamically allocated vector to the minimum necessary size.</para>
<para>/param vec A vector struct of type <ref refid="structLInt" kindref="compound">LInt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4649" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4649" bodyend="4658"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a21eec79c847025348ad0082aab6dee52" compoundref="vector_8h" startline="81">LInt::allocated_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a2b44394f88268b15dfaf3640cb70f42f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trim_ulong_vector</definition>
        <argsstring>(ULInt *vec)</argsstring>
        <name>trim_ulong_vector</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will resize the memory allocated to a dynamically allocated vector to the minimum necessary size.</para>
<para>/param vec A vector struct of type <ref refid="structULInt" kindref="compound">ULInt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4661" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4661" bodyend="4670"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1acf325510e03976f12c116ad68c4998ec" compoundref="vector_8h" startline="82">ULInt::allocated_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ad500a258d2da444ab4d9a0315a241ab9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trim_llong_vector</definition>
        <argsstring>(LLInt *vec)</argsstring>
        <name>trim_llong_vector</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will resize the memory allocated to a dynamically allocated vector to the minimum necessary size.</para>
<para>/param vec A vector struct of type <ref refid="structLLInt" kindref="compound">LLInt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4673" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4673" bodyend="4682"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1a967c631e7b8192f0016845623ae04759" compoundref="vector_8h" startline="83">LLInt::allocated_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1aa2e26e5c689daa0f13844939ead1e484" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trim_ullong_vector</definition>
        <argsstring>(ULLInt *vec)</argsstring>
        <name>trim_ullong_vector</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will resize the memory allocated to a dynamically allocated vector to the minimum necessary size.</para>
<para>/param vec A vector struct of type <ref refid="structULLInt" kindref="compound">ULLInt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4685" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4685" bodyend="4694"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1ac6210c003919694e4fccfc5885c8fcb4" compoundref="vector_8h" startline="84">ULLInt::allocated_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a78d86f1a5dc7e8f980fecfb2f8d12395" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trim_float_vector</definition>
        <argsstring>(Flt *vec)</argsstring>
        <name>trim_float_vector</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will resize the memory allocated to a dynamically allocated vector to the minimum necessary size.</para>
<para>/param vec A vector struct of type <ref refid="structFlt" kindref="compound">Flt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4697" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4697" bodyend="4706"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a917603eeaae1fb22accbfc8d9252a389" compoundref="vector_8h" startline="85">Flt::allocated_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a4a91fca62c49f8628e3efdc3713be344" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trim_double_vector</definition>
        <argsstring>(Dble *vec)</argsstring>
        <name>trim_double_vector</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will resize the memory allocated to a dynamically allocated vector to the minimum necessary size.</para>
<para>/param vec A vector struct of type <ref refid="structDble" kindref="compound">Dble</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4709" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4709" bodyend="4718"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a83cb29dfe09183032473cc7ffe005f5d" compoundref="vector_8h" startline="86">Dble::allocated_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a7a50f85d6a874afbfdf345ba35b8a62e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trim_ldouble_vector</definition>
        <argsstring>(LDble *vec)</argsstring>
        <name>trim_ldouble_vector</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will resize the memory allocated to a dynamically allocated vector to the minimum necessary size.</para>
<para>/param vec A vector struct of type <ref refid="structLDble" kindref="compound">LDble</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4721" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4721" bodyend="4730"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a1f0f3fd968cab1acdebf0d43f632633f" compoundref="vector_8h" startline="87">LDble::allocated_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a4e9cace11cfb849b013d15d09053b0bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trim_char_vector</definition>
        <argsstring>(Char *vec)</argsstring>
        <name>trim_char_vector</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will resize the memory allocated to a dynamically allocated vector to the minimum necessary size.</para>
<para>/param vec A vector struct of type <ref refid="structChar" kindref="compound">Char</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4733" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4733" bodyend="4742"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1ab59977640c7539e5ae251af86d445257" compoundref="vector_8h" startline="88">Char::allocated_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a03a2814037d5194b5c291edca0155ae9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trim_uchar_vector</definition>
        <argsstring>(UChar *vec)</argsstring>
        <name>trim_uchar_vector</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will resize the memory allocated to a dynamically allocated vector to the minimum necessary size.</para>
<para>/param vec A vector struct of type <ref refid="structUChar" kindref="compound">UChar</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4745" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4745" bodyend="4754"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="structUChar_1a69ec79fc44d9f3b1455705e24a819f4b" compoundref="vector_8h" startline="89">UChar::allocated_length</references>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ae838be1f19558e27f1c9ee40b7f0f368" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trim_bool_vector</definition>
        <argsstring>(Bool *vec)</argsstring>
        <name>trim_bool_vector</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will resize the memory allocated to a dynamically allocated vector to the minimum necessary size.</para>
<para>/param vec A vector struct of type <ref refid="structBool" kindref="compound">Bool</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4757" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4757" bodyend="4766"/>
        <references refid="structBool_1a5445f6ef94d239208dc797c289fded75" compoundref="vector_8h" startline="90">Bool::active_length</references>
        <references refid="structBool_1a4a353f55a013f72befc666e8d0708212" compoundref="vector_8h" startline="90">Bool::allocated_length</references>
        <references refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" compoundref="vector_8h" startline="90">Bool::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ab1de3c266f8b9ed02a1d6ce573da1f9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int replace_short_vector_index</definition>
        <argsstring>(Short *vec, short int new_value, size_t index)</argsstring>
        <name>replace_short_vector_index</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>short int</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace the value of a vector or array at a user specified index. If the user specifies an index that is out of bounds, the function will return -1, or 1 if successfull.</para>
<para>/param vec A vector or array of type <ref refid="structShort" kindref="compound">Short</ref> /param new_value The replacement value of type short int /param index The index where a value will be replaced</para>
<para><programlisting><codeline><highlight class="normal">Short<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_short_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">short<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_short_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">replace_short_vector_index(&amp;vec,<sp/>10,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>10,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_short_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4771" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4771" bodyend="4778"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a7bcc2cf2fbaf836342d35f0afa29eb74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int replace_ushort_vector_index</definition>
        <argsstring>(UShort *vec, unsigned short int new_value, size_t index)</argsstring>
        <name>replace_ushort_vector_index</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned short int</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace the value of a vector or array at a user specified index. If the user specifies an index that is out of bounds, the function will return -1, or 1 if successfull.</para>
<para>/param vec A vector or array of type <ref refid="structUShort" kindref="compound">UShort</ref> /param new_value The replacement value of type unsigned short int /param index The index where a value will be replaced</para>
<para><programlisting><codeline><highlight class="normal">UShort<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ushort_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>short<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_ushort_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">replace_ushort_vector_index(&amp;vec,<sp/>10,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>10,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ushort_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4781" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4781" bodyend="4788"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a0e1744a0448c4e5dd1131593efb609b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int replace_int_vector_index</definition>
        <argsstring>(Int *vec, int new_value, size_t index)</argsstring>
        <name>replace_int_vector_index</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace the value of a vector or array at a user specified index. If the user specifies an index that is out of bounds, the function will return -1, or 1 if successfull.</para>
<para>/param vec A vector or array of type <ref refid="structInt" kindref="compound">Int</ref> /param new_value The replacement value of type int /param index The index where a value will be replaced</para>
<para><programlisting><codeline><highlight class="normal">Int<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_int_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_int_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">replace_int_vector_index(&amp;vec,<sp/>10,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>10,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_int_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4791" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4791" bodyend="4798"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1aa1fc20f1e5fbd217726f0fd27b8b6ed7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int replace_uint_vector_index</definition>
        <argsstring>(UInt *vec, unsigned int new_value, size_t index)</argsstring>
        <name>replace_uint_vector_index</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace the value of a vector or array at a user specified index. If the user specifies an index that is out of bounds, the function will return -1, or 1 if successfull.</para>
<para>/param vec A vector or array of type <ref refid="structUInt" kindref="compound">UInt</ref> /param new_value The replacement value of type unsigned int /param index The index where a value will be replaced</para>
<para><programlisting><codeline><highlight class="normal">UInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uint_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_uint_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">replace_uint_vector_index(&amp;vec,<sp/>10,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>10,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uint_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4801" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4801" bodyend="4808"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a4ea2e9f2401e9cd4d1cbdbec1e149aba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int replace_long_vector_index</definition>
        <argsstring>(LInt *vec, long int new_value, size_t index)</argsstring>
        <name>replace_long_vector_index</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace the value of a vector or array at a user specified index. If the user specifies an index that is out of bounds, the function will return -1, or 1 if successfull.</para>
<para>/param vec A vector or array of type <ref refid="structLInt" kindref="compound">LInt</ref> /param new_value The replacement value of type long int /param index The index where a value will be replaced</para>
<para><programlisting><codeline><highlight class="normal">LInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_long_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_long_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">replace_long_vector_index(&amp;vec,<sp/>10,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>10,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_long_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4811" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4811" bodyend="4818"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1abc7605a0d1c96745f5a21cde7850d646" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int replace_ulong_vector_index</definition>
        <argsstring>(ULInt *vec, unsigned long int new_value, size_t index)</argsstring>
        <name>replace_ulong_vector_index</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned long int</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace the value of a vector or array at a user specified index. If the user specifies an index that is out of bounds, the function will return -1, or 1 if successfull.</para>
<para>/param vec A vector or array of type <ref refid="structULInt" kindref="compound">ULInt</ref> /param new_value The replacement value of type unsigned long int /param index The index where a value will be replaced</para>
<para><programlisting><codeline><highlight class="normal">ULInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ulong_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_ulong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">replace_ulong_vector_index(&amp;vec,<sp/>10,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>10,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ulong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4821" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4821" bodyend="4828"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a3743c4611f8d5bc6f7b50d138349e419" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int replace_llong_vector_index</definition>
        <argsstring>(LLInt *vec, long long int new_value, size_t index)</argsstring>
        <name>replace_llong_vector_index</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long long int</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace the value of a vector or array at a user specified index. If the user specifies an index that is out of bounds, the function will return -1, or 1 if successfull.</para>
<para>/param vec A vector or array of type <ref refid="structLLInt" kindref="compound">LLInt</ref> /param new_value The replacement value of type long long int /param index The index where a value will be replaced</para>
<para><programlisting><codeline><highlight class="normal">LLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_llong_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_llong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">replace_llong_vector_index(&amp;vec,<sp/>10,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>10,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_llong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4831" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4831" bodyend="4838"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1aec90d973d5ddfd94b2be73686077c4cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int replace_ullong_vector_index</definition>
        <argsstring>(ULLInt *vec, unsigned long long int new_value, size_t index)</argsstring>
        <name>replace_ullong_vector_index</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned long long int</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace the value of a vector or array at a user specified index. If the user specifies an index that is out of bounds, the function will return -1, or 1 if successfull.</para>
<para>/param vec A vector or array of type <ref refid="structULLInt" kindref="compound">ULLInt</ref> /param new_value The replacement value of type unsigned long long int /param index The index where a value will be replaced</para>
<para><programlisting><codeline><highlight class="normal">ULLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ullong_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_ullong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">replace_ullong_vector_index(&amp;vec,<sp/>10,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>10,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ullong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4841" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4841" bodyend="4848"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a9a562517abca96c42b1b9fe69469915f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int replace_float_vector_index</definition>
        <argsstring>(Flt *vec, float new_value, size_t index)</argsstring>
        <name>replace_float_vector_index</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>float</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace the value of a vector or array at a user specified index. If the user specifies an index that is out of bounds, the function will return -1, or 1 if successfull.</para>
<para>/param vec A vector or array of type <ref refid="structFlt" kindref="compound">Flt</ref> /param new_value The replacement value of type float /param index The index where a value will be replaced</para>
<para><programlisting><codeline><highlight class="normal">Flt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_float_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_float_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">replace_float_vector_index(&amp;vec,<sp/>10,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>10,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_float_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4851" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4851" bodyend="4858"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a25c9a8f29ce2515cf260c9a50745fc69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int replace_double_vector_index</definition>
        <argsstring>(Dble *vec, double new_value, size_t index)</argsstring>
        <name>replace_double_vector_index</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>double</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace the value of a vector or array at a user specified index. If the user specifies an index that is out of bounds, the function will return -1, or 1 if successfull.</para>
<para>/param vec A vector or array of type <ref refid="structDble" kindref="compound">Dble</ref> /param new_value The replacement value of type unsigned double /param index The index where a value will be replaced</para>
<para><programlisting><codeline><highlight class="normal">Dble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_double_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_double_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">replace_double_vector_index(&amp;vec,<sp/>10,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>10,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_double_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4861" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4861" bodyend="4868"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a81d619ab6affe5d8ffa3e79c099c9bb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int replace_ldouble_vector_index</definition>
        <argsstring>(LDble *vec, long double new_value, size_t index)</argsstring>
        <name>replace_ldouble_vector_index</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace the value of a vector or array at a user specified index. If the user specifies an index that is out of bounds, the function will return -1, or 1 if successfull.</para>
<para>/param vec A vector or array of type <ref refid="structLDble" kindref="compound">LDble</ref> /param new_value The replacement value of type long double /param index The index where a value will be replaced</para>
<para><programlisting><codeline><highlight class="normal">LDble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ldouble_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">ldouble<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_ldouble_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">replace_ldouble_vector_index(&amp;vec,<sp/>10,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>10,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ldouble_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4871" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4871" bodyend="4878"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a5f8e0b70e42100f1ef36d8ba5f9115bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int replace_char_vector_index</definition>
        <argsstring>(Char *vec, char new_value, size_t index)</argsstring>
        <name>replace_char_vector_index</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>char</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace the value of a vector or array at a user specified index. If the user specifies an index that is out of bounds, the function will return -1, or 1 if successfull.</para>
<para>/param vec A vector or array of type <ref refid="structChar" kindref="compound">Char</ref> /param new_value The replacement value of type char /param index The index where a value will be replaced</para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_char_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">char<sp/>a[5]<sp/>=<sp/>{&apos;a&apos;,<sp/>&apos;b&apos;,<sp/>&apos;c&apos;,<sp/>&apos;d&apos;};</highlight></codeline>
<codeline><highlight class="normal">insert_char_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">replace_char_vector_index(&amp;vec,<sp/>&apos;q&apos;,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>a,<sp/>b,<sp/>q,<sp/>d<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4881" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4881" bodyend="4888"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a9eaf5407b4c3a2f3db66ea179836beac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int replace_uchar_vector_index</definition>
        <argsstring>(UChar *vec, unsigned char new_value, size_t index)</argsstring>
        <name>replace_uchar_vector_index</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace the value of a vector or array at a user specified index. If the user specifies an index that is out of bounds, the function will return -1, or 1 if successfull.</para>
<para>/param vec A vector or array of type <ref refid="structUChar" kindref="compound">UChar</ref> /param new_value The replacement value of type unsigned char /param index The index where a value will be replaced</para>
<para><programlisting><codeline><highlight class="normal">UChar<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uchar_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>char<sp/>a[5]<sp/>=<sp/>{&apos;a&apos;,<sp/>&apos;b&apos;,<sp/>&apos;c&apos;,<sp/>&apos;d&apos;};</highlight></codeline>
<codeline><highlight class="normal">insert_uchar_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">replace_uchar_vector_index(&amp;vec,<sp/>&apos;q&apos;,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>a,<sp/>b,<sp/>q,<sp/>d<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uchar_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4891" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4891" bodyend="4898"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1aadfbe9f5e5b78204f55c342826be1cd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int replace_bool_vector_index</definition>
        <argsstring>(Bool *vec, bool new_value, size_t index)</argsstring>
        <name>replace_bool_vector_index</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace the value of a vector or array at a user specified index. If the user specifies an index that is out of bounds, the function will return -1, or 1 if successfull.</para>
<para>/param vec A vector or array of type <ref refid="structBool" kindref="compound">Bool</ref> /param new_value The replacement value of type bool /param index The index where a value will be replaced</para>
<para><programlisting><codeline><highlight class="normal">Bool<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_bool_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_bool_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">replace_bool_vector_index(&amp;vec,<sp/>10,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>10,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_bool_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4901" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4901" bodyend="4908"/>
        <references refid="structBool_1a5445f6ef94d239208dc797c289fded75" compoundref="vector_8h" startline="90">Bool::active_length</references>
        <references refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" compoundref="vector_8h" startline="90">Bool::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a011a6f61257e9d5cc3296475ae8845ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int replace_string_vector_index</definition>
        <argsstring>(String *vec, char *new_value, size_t index)</argsstring>
        <name>replace_string_vector_index</name>
        <param>
          <type><ref refid="structString" kindref="compound">String</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace the value of a vector or array at a user specified index. If the user specifies an index that is out of bounds, the function will return -1, or 1 if successfull.</para>
<para>/param vec A vector or array of type <ref refid="structString" kindref="compound">String</ref> /param new_value The replacement value of type char* /param index The index where a value will be replaced</para>
<para><programlisting><codeline><highlight class="normal">String<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_string_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(&amp;vec,<sp/>&quot;One&quot;,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(&amp;vec,<sp/>&quot;Two&quot;,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(&amp;vec,<sp/>&quot;Three&quot;,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(&amp;vec,<sp/>&quot;Four&quot;,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">replace_ldouble_vector_index(&amp;vec,<sp/>&quot;Five&quot;,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>One,<sp/>Two,<sp/>Five,<sp/>Four<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_string_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4911" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4911" bodyend="4918"/>
        <references refid="structString_1a706ffaf2f520d46074dd99e7896d6673" compoundref="vector_8h" startline="97">String::active_length</references>
        <references refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" compoundref="vector_8h" startline="96">String::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a1fbfbfeed7892cd604ac2175048a1ff3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int repeat_short_vector</definition>
        <argsstring>(Short *vec, short int value, size_t num)</argsstring>
        <name>repeat_short_vector</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>short int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will repeat a user defined value in a vector or array data structure a user defined number of times.</para>
<para>/param vec A vector or array data structure of type <ref refid="structShort" kindref="compound">Short</ref> /param value a value of type short int that be repeated /param num The number of times a value is to be repeated</para>
<para><programlisting><codeline><highlight class="normal">Short<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_short_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">repeat_short_vector(&amp;vec,<sp/>10,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>10,<sp/>10,<sp/>10,<sp/>10,<sp/>10<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_short_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4923" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4923" bodyend="4930"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="vector_8c_1a38068c17aa5cf7286175572d43219b8d" compoundref="vector_8c" startline="349" endline="379">push_short_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a87921615a6088f8e15e74f796abd294e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int repeat_ushort_vector</definition>
        <argsstring>(UShort *vec, unsigned short int value, size_t num)</argsstring>
        <name>repeat_ushort_vector</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned short int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will repeat a user defined value in a vector or array data structure a user defined number of times.</para>
<para>/param vec A vector or array data structure of type <ref refid="structUShort" kindref="compound">UShort</ref> /param value a value of type unsigned short int that be repeated /param num The number of times a value is to be repeated</para>
<para><programlisting><codeline><highlight class="normal">UShort<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ushort_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">repeat_ushort_vector(&amp;vec,<sp/>10,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>10,<sp/>10,<sp/>10,<sp/>10,<sp/>10<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ushort_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4933" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4933" bodyend="4940"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="vector_8c_1a97670c026df2a05dda5b0c85ebeb4d69" compoundref="vector_8c" startline="382" endline="412">push_ushort_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1aeb26b3546bef2bb8e5afc6a8c93d23a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int repeat_int_vector</definition>
        <argsstring>(Int *vec, int value, size_t num)</argsstring>
        <name>repeat_int_vector</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will repeat a user defined value in a vector or array data structure a user defined number of times.</para>
<para>/param vec A vector or array data structure of type <ref refid="structInt" kindref="compound">Int</ref> /param value a value of type int that be repeated /param num The number of times a value is to be repeated</para>
<para><programlisting><codeline><highlight class="normal">Int<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_int_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">repeat_int_vector(&amp;vec,<sp/>10,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>10,<sp/>10,<sp/>10,<sp/>10,<sp/>10<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_int_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4943" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4943" bodyend="4950"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="vector_8c_1a6baf75dc56de293f3dbdc8ac40934980" compoundref="vector_8c" startline="415" endline="445">push_int_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a1aa1df7f7e77404e77862ca75666165c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int repeat_uint_vector</definition>
        <argsstring>(UInt *vec, unsigned int value, size_t num)</argsstring>
        <name>repeat_uint_vector</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will repeat a user defined value in a vector or array data structure a user defined number of times.</para>
<para>/param vec A vector or array data structure of type <ref refid="structUInt" kindref="compound">UInt</ref> /param value a value of type unsigned int that be repeated /param num The number of times a value is to be repeated</para>
<para><programlisting><codeline><highlight class="normal">UInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uint_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">repeat_uint_vector(&amp;vec,<sp/>10,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>10,<sp/>10,<sp/>10,<sp/>10,<sp/>10<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uint_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4953" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4953" bodyend="4960"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="vector_8c_1a787fc2bba6112c4ede10d0ec14ab3825" compoundref="vector_8c" startline="448" endline="478">push_uint_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a1f0914c2c37de3b81b706c77be31e57a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int repeat_long_vector</definition>
        <argsstring>(LInt *vec, long int value, size_t num)</argsstring>
        <name>repeat_long_vector</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will repeat a user defined value in a vector or array data structure a user defined number of times.</para>
<para>/param vec A vector or array data structure of type <ref refid="structLInt" kindref="compound">LInt</ref> /param value a value of type long int that be repeated /param num The number of times a value is to be repeated</para>
<para><programlisting><codeline><highlight class="normal">LInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_long_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">repeat_long_vector(&amp;vec,<sp/>10,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>10,<sp/>10,<sp/>10,<sp/>10,<sp/>10<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_long_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4963" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4963" bodyend="4970"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="vector_8c_1a6135368684b7d740482cfc775417f255" compoundref="vector_8c" startline="481" endline="511">push_long_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a8c9c95f3e41bcaa00e99db959130c509" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int repeat_ulong_vector</definition>
        <argsstring>(ULInt *vec, unsigned long int value, size_t num)</argsstring>
        <name>repeat_ulong_vector</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned long int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will repeat a user defined value in a vector or array data structure a user defined number of times.</para>
<para>/param vec A vector or array data structure of type <ref refid="structULInt" kindref="compound">ULInt</ref> /param value a value of type unsigned long int that be repeated /param num The number of times a value is to be repeated</para>
<para><programlisting><codeline><highlight class="normal">ULInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ulong_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">repeat_ulong_vector(&amp;vec,<sp/>10,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>10,<sp/>10,<sp/>10,<sp/>10,<sp/>10<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ulong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4973" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4973" bodyend="4980"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="vector_8c_1aea5f95b56df2836ee553face60351e61" compoundref="vector_8c" startline="514" endline="544">push_ulong_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a7c24fd593c9332ba1779b780b85cc893" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int repeat_llong_vector</definition>
        <argsstring>(LLInt *vec, long long int value, size_t num)</argsstring>
        <name>repeat_llong_vector</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long long int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will repeat a user defined value in a vector or array data structure a user defined number of times.</para>
<para>/param vec A vector or array data structure of type <ref refid="structLLInt" kindref="compound">LLInt</ref> /param value a value of type long long int that be repeated /param num The number of times a value is to be repeated</para>
<para><programlisting><codeline><highlight class="normal">LLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_llong_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">repeat_llong_vector(&amp;vec,<sp/>10,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>10,<sp/>10,<sp/>10,<sp/>10,<sp/>10<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_llong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4983" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4983" bodyend="4990"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="vector_8c_1a93f7e28f97718d9d7c5c84df61c1466c" compoundref="vector_8c" startline="547" endline="577">push_llong_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a6f8e17e6a8930bf7bf0f7422d65eeab5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int repeat_ullong_vector</definition>
        <argsstring>(ULLInt *vec, unsigned long long int value, size_t num)</argsstring>
        <name>repeat_ullong_vector</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned long long int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will repeat a user defined value in a vector or array data structure a user defined number of times.</para>
<para>/param vec A vector or array data structure of type <ref refid="structULLInt" kindref="compound">ULLInt</ref> /param value a value of type unsigned long long int that be repeated /param num The number of times a value is to be repeated</para>
<para><programlisting><codeline><highlight class="normal">ULLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ullong_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">repeat_ullong_vector(&amp;vec,<sp/>10,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>10,<sp/>10,<sp/>10,<sp/>10,<sp/>10<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ullong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="4993" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4993" bodyend="5000"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="vector_8c_1a3478a298e62d85cb93f11a78f64d6f80" compoundref="vector_8c" startline="580" endline="610">push_ullong_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a58a085c7febff1b1bd9e6ec90510b36a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int repeat_float_vector</definition>
        <argsstring>(Flt *vec, float value, size_t num)</argsstring>
        <name>repeat_float_vector</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will repeat a user defined value in a vector or array data structure a user defined number of times.</para>
<para>/param vec A vector or array data structure of type <ref refid="structFlt" kindref="compound">Flt</ref> /param value a value of type float that be repeated /param num The number of times a value is to be repeated</para>
<para><programlisting><codeline><highlight class="normal">Flt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_float_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">repeat_float_vector(&amp;vec,<sp/>10.f,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>10.000,<sp/>10.000,<sp/>10.000,<sp/>10.000,<sp/>10.000<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_float_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="5003" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="5003" bodyend="5010"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="vector_8c_1a31e02f437f4f9f43d1126e017ae1cac3" compoundref="vector_8c" startline="613" endline="643">push_float_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1ac2a03364dd0dc653854b1f70101514c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int repeat_double_vector</definition>
        <argsstring>(Dble *vec, double value, size_t num)</argsstring>
        <name>repeat_double_vector</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will repeat a user defined value in a vector or array data structure a user defined number of times.</para>
<para>/param vec A vector or array data structure of type <ref refid="structDble" kindref="compound">Dble</ref> /param value a value of type double that be repeated /param num The number of times a value is to be repeated</para>
<para><programlisting><codeline><highlight class="normal">Dble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_double_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">repeat_double_vector(&amp;vec,<sp/>10.,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>10,<sp/>10,<sp/>10,<sp/>10,<sp/>10<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_double_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="5013" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="5013" bodyend="5020"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="vector_8c_1ab312c467d82a0fccc66cbb89a6b8de5c" compoundref="vector_8c" startline="646" endline="676">push_double_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a34a56cde6bc6f420f8b9063bf87232e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int repeat_ldouble_vector</definition>
        <argsstring>(LDble *vec, long double value, size_t num)</argsstring>
        <name>repeat_ldouble_vector</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will repeat a user defined value in a vector or array data structure a user defined number of times.</para>
<para>/param vec A vector or array data structure of type <ref refid="structLDble" kindref="compound">LDble</ref> /param value a value of type long double that be repeated /param num The number of times a value is to be repeated</para>
<para><programlisting><codeline><highlight class="normal">LDble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ldouble_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">repeat_ldouble_vector(&amp;vec,<sp/>10.,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>10,<sp/>10,<sp/>10,<sp/>10,<sp/>10<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ldouble_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="5023" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="5023" bodyend="5030"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="vector_8c_1ad001560a2793c40efb1c64532cefe2e2" compoundref="vector_8c" startline="679" endline="709">push_ldouble_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a10df883121d1f71d331ae6ba273357f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int repeat_bool_vector</definition>
        <argsstring>(Bool *vec, bool value, size_t num)</argsstring>
        <name>repeat_bool_vector</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will repeat a user defined value in a vector or array data structure a user defined number of times.</para>
<para>/param vec A vector or array data structure of type <ref refid="structBool" kindref="compound">Bool</ref> /param value a value of type bool that be repeated /param num The number of times a value is to be repeated</para>
<para><programlisting><codeline><highlight class="normal">Bool<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_bool_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">repeat_bool_vector(&amp;vec,<sp/>true,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>true,<sp/>true,<sp/>true,<sp/>true,<sp/>true<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_bool_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="5033" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="5033" bodyend="5040"/>
        <references refid="structBool_1a5445f6ef94d239208dc797c289fded75" compoundref="vector_8h" startline="90">Bool::active_length</references>
        <references refid="vector_8c_1a66a1a1c291efbab607defa13421167dc" compoundref="vector_8c" startline="778" endline="808">push_bool_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1aece15dcc8e9d3cf0fa0cb65c0b7a05f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int repeat_char_vector</definition>
        <argsstring>(Char *vec, char value, size_t num)</argsstring>
        <name>repeat_char_vector</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>char</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will repeat a user defined value in a vector or array data structure a user defined number of times.</para>
<para>/param vec A vector or array data structure of type <ref refid="structChar" kindref="compound">Char</ref> /param value a value of type char that be repeated /param num The number of times a value is to be repeated</para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_char_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">repeat_char_vector(&amp;vec,<sp/>&apos;h&apos;,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>H,<sp/>H,<sp/>H,<sp/>H,<sp/>H<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="5043" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="5043" bodyend="5050"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="vector_8c_1ab4f076e9a6e7d0795c2c3a0216c5c97e" compoundref="vector_8c" startline="712" endline="742">push_char_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1aa03b84f9a537aa95ab335f38448051a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int repeat_uchar_vector</definition>
        <argsstring>(UChar *vec, unsigned char value, size_t num)</argsstring>
        <name>repeat_uchar_vector</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will repeat a user defined value in a vector or array data structure a user defined number of times.</para>
<para>/param vec A vector or array data structure of type <ref refid="structUChar" kindref="compound">UChar</ref> /param value a value of type char that be repeated /param num The number of times a value is to be repeated</para>
<para><programlisting><codeline><highlight class="normal">UChar<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uchar_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">repeat_uchar_vector(&amp;vec,<sp/>&apos;h&apos;,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>H,<sp/>H,<sp/>H,<sp/>H,<sp/>H<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uchar_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="5053" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="5053" bodyend="5060"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="vector_8c_1acc6fd3b434ba25d3473adff60160500b" compoundref="vector_8c" startline="745" endline="775">push_uchar_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8c_1a9f6bd7ebba53e2d4eb0b8e3d8931029c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int repeat_string_vector</definition>
        <argsstring>(String *vec, char *value, size_t num)</argsstring>
        <name>repeat_string_vector</name>
        <param>
          <type><ref refid="structString" kindref="compound">String</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will repeat a user defined value in a vector or array data structure a user defined number of times.</para>
<para>/param vec A vector or array data structure of type <ref refid="structString" kindref="compound">String</ref> /param value a value of type char* that be repeated /param num The number of times a value is to be repeated</para>
<para><programlisting><codeline><highlight class="normal">String<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_string_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">repeat_string_vector(&amp;vec,<sp/>&quot;Hello&quot;,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>Hello,<sp/>Hello,<sp/>Hello,<sp/>Hello,<sp/>Hello<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_string_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" line="5063" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="5063" bodyend="5070"/>
        <references refid="structString_1a706ffaf2f520d46074dd99e7896d6673" compoundref="vector_8h" startline="97">String::active_length</references>
        <references refid="vector_8c_1a078616c26d55c1ddb2ec4c551298a4f8" compoundref="vector_8c" startline="811" endline="829">push_string_vector</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>File:<sp/><sp/><sp/><sp/>vector.c</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>Purpose:<sp/>Describe<sp/>the<sp/>file<sp/>purpose<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Source<sp/>Metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>Author:<sp/><sp/>Jonathan<sp/>A.<sp/>Webb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>Date:<sp/><sp/><sp/><sp/>March<sp/>31,<sp/>2023</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>Version:<sp/>1.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>Copyright:<sp/>Copyright<sp/>2022,<sp/>Jon<sp/>Webb<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Include<sp/>modules<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="vector_8h" kindref="compound">vector.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="vector_8c_1a749211e8a46a8b2297b3c6ebb78aed0e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a749211e8a46a8b2297b3c6ebb78aed0e" kindref="member">init_short_vector</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>initial<sp/>vector<sp/>allocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>malloc(length<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;malloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>at<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structShort_1a20b9c526866b593e8e1ecdc49515e642" kindref="member">dat_type</ref><sp/>=<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structShort_1af0b6f4e61e69b8a2f74d42b09b421d88" kindref="member">allocated_length</ref><sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="vector_8c_1aa63398bdb55f97b891b93404a89de14d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1aa63398bdb55f97b891b93404a89de14d" kindref="member">init_ushort_vector</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>initial<sp/>vector<sp/>allocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>malloc(length<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;malloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>at<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUShort_1a4c5d40034bbd1e9ee0de773d6be0c31e" kindref="member">dat_type</ref><sp/>=<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUShort_1a0ef4541f3fd3fcee1c0f5809341c84d6" kindref="member">allocated_length</ref><sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="vector_8c_1a9fdb6c5fdd9f0d5a3bfb751f9e82968e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a9fdb6c5fdd9f0d5a3bfb751f9e82968e" kindref="member">init_int_vector</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>initial<sp/>vector<sp/>allocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>malloc(length<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;malloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>at<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structInt_1ae124ac3392878072e49fe64e0d07beff" kindref="member">dat_type</ref><sp/>=<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structInt_1a63bea8755b3ce6be7e83970b9ea3bd68" kindref="member">allocated_length</ref><sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="vector_8c_1a9d8eb1d9ce65365d7b044fe684387a3f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a9d8eb1d9ce65365d7b044fe684387a3f" kindref="member">init_uint_vector</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>initial<sp/>vector<sp/>allocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>malloc(length<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;malloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>at<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUInt_1ab87c8b62b4178bf9bcf59d03b066da1c" kindref="member">dat_type</ref><sp/>=<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUInt_1a05b28efaec93c388e8685403f57a07ce" kindref="member">allocated_length</ref><sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="vector_8c_1ac59c5fed0f4cd6b9aaf4c87b7a997bd3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ac59c5fed0f4cd6b9aaf4c87b7a997bd3" kindref="member">init_long_vector</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>initial<sp/>vector<sp/>allocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>malloc(length<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;malloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>at<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLInt_1a7255bafd2fb6310140aebe36d68b9629" kindref="member">dat_type</ref><sp/>=<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLInt_1a21eec79c847025348ad0082aab6dee52" kindref="member">allocated_length</ref><sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="vector_8c_1af08098b392c0ff01db799bff9c83a521" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1af08098b392c0ff01db799bff9c83a521" kindref="member">init_ulong_vector</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>initial<sp/>vector<sp/>allocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>malloc(length<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;malloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>at<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULInt_1abbab1a9c205c4d86fcc53c55174d1515" kindref="member">dat_type</ref><sp/>=<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULInt_1acf325510e03976f12c116ad68c4998ec" kindref="member">allocated_length</ref><sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="vector_8c_1a65eda538d3c07a8beb1475c1a214ff67" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a65eda538d3c07a8beb1475c1a214ff67" kindref="member">init_llong_vector</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>initial<sp/>vector<sp/>allocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>malloc(length<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;malloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>at<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLLInt_1a2cf879f2b771d70de2ae15401190b50e" kindref="member">dat_type</ref><sp/>=<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLLInt_1a967c631e7b8192f0016845623ae04759" kindref="member">allocated_length</ref><sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="vector_8c_1ab05d31d34c87d8d6cd76f48539bf367f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ab05d31d34c87d8d6cd76f48539bf367f" kindref="member">init_ullong_vector</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>initial<sp/>vector<sp/>allocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>malloc(length<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;malloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>at<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULLInt_1acb153b18423bf9465c6a52aa74745df3" kindref="member">dat_type</ref><sp/>=<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULLInt_1ac6210c003919694e4fccfc5885c8fcb4" kindref="member">allocated_length</ref><sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="vector_8c_1a92bba70874a1570bd9c87a2a7385af35" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a92bba70874a1570bd9c87a2a7385af35" kindref="member">init_float_vector</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>initial<sp/>vector<sp/>allocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>malloc(length<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;malloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>at<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structFlt_1ad98ce16bf2fff8b16351042bd4135629" kindref="member">dat_type</ref><sp/>=<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structFlt_1a917603eeaae1fb22accbfc8d9252a389" kindref="member">allocated_length</ref><sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152" refid="vector_8c_1a2c0735f69da8e40535b5ecceace1a399" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a2c0735f69da8e40535b5ecceace1a399" kindref="member">init_double_vector</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>initial<sp/>vector<sp/>allocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>malloc(length<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;malloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>at<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structDble_1a593e6de4412f110b4ffe6fd87a62aa56" kindref="member">dat_type</ref><sp/>=<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structDble_1a83cb29dfe09183032473cc7ffe005f5d" kindref="member">allocated_length</ref><sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="vector_8c_1a79d9f9d1d1cb31d09620bc5cdc73e94e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a79d9f9d1d1cb31d09620bc5cdc73e94e" kindref="member">init_ldouble_vector</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>initial<sp/>vector<sp/>allocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>malloc(length<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;malloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>at<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLDble_1a25a9e54828403acb6e1e565d00a24582" kindref="member">dat_type</ref><sp/>=<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLDble_1a1f0f3fd968cab1acdebf0d43f632633f" kindref="member">allocated_length</ref><sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="vector_8c_1aecde718777430d31ec254f8a4f40cce0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1aecde718777430d31ec254f8a4f40cce0" kindref="member">init_char_vector</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>initial<sp/>vector<sp/>allocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>malloc(length<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;malloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>at<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structChar_1a7231211c3eec109684271510fb25ffe8" kindref="member">dat_type</ref><sp/>=<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structChar_1ab59977640c7539e5ae251af86d445257" kindref="member">allocated_length</ref><sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197" refid="vector_8c_1a9289ec52674f95ebf45ac81b70dfdc67" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a9289ec52674f95ebf45ac81b70dfdc67" kindref="member">init_uchar_vector</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>initial<sp/>vector<sp/>allocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>malloc(length<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;malloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>at<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUChar_1aa1ea52fa832c84586784bb36c1617e44" kindref="member">dat_type</ref><sp/>=<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUChar_1a69ec79fc44d9f3b1455705e24a819f4b" kindref="member">allocated_length</ref><sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="vector_8c_1a2e1ea608c0b9b0768ba61facb8df913f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a2e1ea608c0b9b0768ba61facb8df913f" kindref="member">init_bool_vector</ref>(<ref refid="structBool" kindref="compound">Bool</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>initial<sp/>vector<sp/>allocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>malloc(length<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;malloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>at<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structBool_1ad781cb2cecf2b060c6337a73ed89def9" kindref="member">dat_type</ref><sp/>=<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structBool_1a4a353f55a013f72befc666e8d0708212" kindref="member">allocated_length</ref><sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structBool_1a5445f6ef94d239208dc797c289fded75" kindref="member">active_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227" refid="vector_8c_1ad5c4c9d8676c13f1f381b0b6c1119c4d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ad5c4c9d8676c13f1f381b0b6c1119c4d" kindref="member">init_string_vector</ref>(<ref refid="structString" kindref="compound">String</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structString_1a706ffaf2f520d46074dd99e7896d6673" kindref="member">active_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INIT_TYPE_ARRAY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236" refid="vector_8c_1acb7b3bcd9252ad84ea9d05436f57bd6c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1acb7b3bcd9252ad84ea9d05436f57bd6c" kindref="member">init_short_array</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>allocated_length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>active_length)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref><sp/>=<sp/>arr;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structShort_1a20b9c526866b593e8e1ecdc49515e642" kindref="member">dat_type</ref><sp/>=<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref><sp/>=<sp/>active_length;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structShort_1af0b6f4e61e69b8a2f74d42b09b421d88" kindref="member">allocated_length</ref><sp/>=<sp/>allocated_length;</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244" refid="vector_8c_1abbac579a20b2655deda9ec8a915fcfb7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1abbac579a20b2655deda9ec8a915fcfb7" kindref="member">init_ushort_array</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>allocated_length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>active_length)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref><sp/>=<sp/>arr;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUShort_1a4c5d40034bbd1e9ee0de773d6be0c31e" kindref="member">dat_type</ref><sp/>=<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref><sp/>=<sp/>active_length;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUShort_1a0ef4541f3fd3fcee1c0f5809341c84d6" kindref="member">allocated_length</ref><sp/>=<sp/>allocated_length;</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252" refid="vector_8c_1a29734ea7a6541b75cd3824bc05e3e589" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a29734ea7a6541b75cd3824bc05e3e589" kindref="member">init_int_array</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>allocated_length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>active_length)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref><sp/>=<sp/>arr;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structInt_1ae124ac3392878072e49fe64e0d07beff" kindref="member">dat_type</ref><sp/>=<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref><sp/>=<sp/>active_length;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structInt_1a63bea8755b3ce6be7e83970b9ea3bd68" kindref="member">allocated_length</ref><sp/>=<sp/>allocated_length;</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260" refid="vector_8c_1a2739fb21bf4216de09c51c393b89ece7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a2739fb21bf4216de09c51c393b89ece7" kindref="member">init_uint_array</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>allocated_length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>active_length)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref><sp/>=<sp/>arr;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUInt_1ab87c8b62b4178bf9bcf59d03b066da1c" kindref="member">dat_type</ref><sp/>=<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref><sp/>=<sp/>active_length;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUInt_1a05b28efaec93c388e8685403f57a07ce" kindref="member">allocated_length</ref><sp/>=<sp/>allocated_length;</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268" refid="vector_8c_1acbddef55e279d25613203d2f14957597" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1acbddef55e279d25613203d2f14957597" kindref="member">init_long_array</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>allocated_length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>active_length)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref><sp/>=<sp/>arr;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLInt_1a7255bafd2fb6310140aebe36d68b9629" kindref="member">dat_type</ref><sp/>=<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref><sp/>=<sp/>active_length;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLInt_1a21eec79c847025348ad0082aab6dee52" kindref="member">allocated_length</ref><sp/>=<sp/>allocated_length;</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276" refid="vector_8c_1acdf31865e9c36adc693dd7fa7fadcacc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1acdf31865e9c36adc693dd7fa7fadcacc" kindref="member">init_ulong_array</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>allocated_length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>active_length)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref><sp/>=<sp/>arr;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULInt_1abbab1a9c205c4d86fcc53c55174d1515" kindref="member">dat_type</ref><sp/>=<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref><sp/>=<sp/>active_length;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULInt_1acf325510e03976f12c116ad68c4998ec" kindref="member">allocated_length</ref><sp/>=<sp/>allocated_length;</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284" refid="vector_8c_1a65e3799f14e154e10bd3ce7a4d4fe184" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a65e3799f14e154e10bd3ce7a4d4fe184" kindref="member">init_llong_array</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>allocated_length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>active_length)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref><sp/>=<sp/>arr;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLLInt_1a2cf879f2b771d70de2ae15401190b50e" kindref="member">dat_type</ref><sp/>=<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref><sp/>=<sp/>active_length;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLLInt_1a967c631e7b8192f0016845623ae04759" kindref="member">allocated_length</ref><sp/>=<sp/>allocated_length;</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292" refid="vector_8c_1a39d896e588ac932b9958b4f2e32d97c2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a39d896e588ac932b9958b4f2e32d97c2" kindref="member">init_ullong_array</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>allocated_length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>active_length)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref><sp/>=<sp/>arr;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULLInt_1acb153b18423bf9465c6a52aa74745df3" kindref="member">dat_type</ref><sp/>=<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref><sp/>=<sp/>active_length;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULLInt_1ac6210c003919694e4fccfc5885c8fcb4" kindref="member">allocated_length</ref><sp/>=<sp/>allocated_length;</highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300" refid="vector_8c_1a5fcc9ae29ce6bd76060856b388992240" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a5fcc9ae29ce6bd76060856b388992240" kindref="member">init_float_array</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>allocated_length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>active_length)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref><sp/>=<sp/>arr;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structFlt_1ad98ce16bf2fff8b16351042bd4135629" kindref="member">dat_type</ref><sp/>=<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref><sp/>=<sp/>active_length;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structFlt_1a917603eeaae1fb22accbfc8d9252a389" kindref="member">allocated_length</ref><sp/>=<sp/>allocated_length;</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308" refid="vector_8c_1af1f590cad5f66c4caded12d7cd92675b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1af1f590cad5f66c4caded12d7cd92675b" kindref="member">init_double_array</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>allocated_length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>active_length)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref><sp/>=<sp/>arr;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structDble_1a593e6de4412f110b4ffe6fd87a62aa56" kindref="member">dat_type</ref><sp/>=<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref><sp/>=<sp/>active_length;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structDble_1a83cb29dfe09183032473cc7ffe005f5d" kindref="member">allocated_length</ref><sp/>=<sp/>allocated_length;</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316" refid="vector_8c_1ae670278f7c9522a0fdc6b261cb76e5e5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ae670278f7c9522a0fdc6b261cb76e5e5" kindref="member">init_ldouble_array</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>allocated_length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>active_length)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref><sp/>=<sp/>arr;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLDble_1a25a9e54828403acb6e1e565d00a24582" kindref="member">dat_type</ref><sp/>=<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref><sp/>=<sp/>active_length;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLDble_1a1f0f3fd968cab1acdebf0d43f632633f" kindref="member">allocated_length</ref><sp/>=<sp/>allocated_length;</highlight></codeline>
<codeline lineno="321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324" refid="vector_8c_1a85ef363e6bfd0897ffc5ccb10c5eb721" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a85ef363e6bfd0897ffc5ccb10c5eb721" kindref="member">init_char_array</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>allocated_length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>active_length)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref><sp/>=<sp/>arr;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structChar_1a7231211c3eec109684271510fb25ffe8" kindref="member">dat_type</ref><sp/>=<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref><sp/>=<sp/>active_length;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structChar_1ab59977640c7539e5ae251af86d445257" kindref="member">allocated_length</ref><sp/>=<sp/>allocated_length;</highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332" refid="vector_8c_1a2f22fc4866a5c4e5ba5cc10fbf73bb5e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a2f22fc4866a5c4e5ba5cc10fbf73bb5e" kindref="member">init_uchar_array</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>allocated_length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>active_length)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref><sp/>=<sp/>arr;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUChar_1aa1ea52fa832c84586784bb36c1617e44" kindref="member">dat_type</ref><sp/>=<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref><sp/>=<sp/>active_length;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUChar_1a69ec79fc44d9f3b1455705e24a819f4b" kindref="member">allocated_length</ref><sp/>=<sp/>allocated_length;</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="vector_8c_1ad2512ad5d79463921401fee2bf996b10" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ad2512ad5d79463921401fee2bf996b10" kindref="member">init_bool_array</ref>(<ref refid="structBool" kindref="compound">Bool</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>allocated_length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>active_length)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" kindref="member">array</ref><sp/>=<sp/>arr;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structBool_1ad781cb2cecf2b060c6337a73ed89def9" kindref="member">dat_type</ref><sp/>=<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structBool_1a5445f6ef94d239208dc797c289fded75" kindref="member">active_length</ref><sp/>=<sp/>active_length;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structBool_1a4a353f55a013f72befc666e8d0708212" kindref="member">allocated_length</ref><sp/>=<sp/>allocated_length;</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349" refid="vector_8c_1a38068c17aa5cf7286175572d43219b8d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a38068c17aa5cf7286175572d43219b8d" kindref="member">push_short_vector</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref><sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d<sp/>is<sp/>out<sp/>of<sp/>bounds\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref><sp/>+<sp/>1<sp/>&gt;<sp/>vec-&gt;<ref refid="structShort_1af0b6f4e61e69b8a2f74d42b09b421d88" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structShort_1a20b9c526866b593e8e1ecdc49515e642" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cannont<sp/>extend<sp/>static<sp/>array<sp/>allocation<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref><sp/>+<sp/>1<sp/>&gt;<sp/>vec-&gt;<ref refid="structShort_1af0b6f4e61e69b8a2f74d42b09b421d88" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structShort_1a20b9c526866b593e8e1ecdc49515e642" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>(vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref><sp/>+<sp/>1)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref>,<sp/>size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Realloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ptr);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structShort_1af0b6f4e61e69b8a2f74d42b09b421d88" kindref="member">allocated_length</ref><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>variables<sp/>and<sp/>update<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref>)<sp/>+<sp/>(index<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref><sp/>-<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref>[index]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref><sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382" refid="vector_8c_1a97670c026df2a05dda5b0c85ebeb4d69" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a97670c026df2a05dda5b0c85ebeb4d69" kindref="member">push_ushort_vector</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref><sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d<sp/>is<sp/>out<sp/>of<sp/>bounds\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref><sp/>+<sp/>1<sp/>&gt;<sp/>vec-&gt;<ref refid="structUShort_1a0ef4541f3fd3fcee1c0f5809341c84d6" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structUShort_1a4c5d40034bbd1e9ee0de773d6be0c31e" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cannont<sp/>extend<sp/>static<sp/>array<sp/>allocation<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref><sp/>+<sp/>1<sp/>&gt;<sp/>vec-&gt;<ref refid="structUShort_1a0ef4541f3fd3fcee1c0f5809341c84d6" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structUShort_1a4c5d40034bbd1e9ee0de773d6be0c31e" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>(vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref><sp/>+<sp/>1)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref>,<sp/>size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Realloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ptr);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUShort_1a0ef4541f3fd3fcee1c0f5809341c84d6" kindref="member">allocated_length</ref><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>variables<sp/>and<sp/>update<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref>)<sp/>+<sp/>(index<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref><sp/>-<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref>[index]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref><sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415" refid="vector_8c_1a6baf75dc56de293f3dbdc8ac40934980" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a6baf75dc56de293f3dbdc8ac40934980" kindref="member">push_int_vector</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref><sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d<sp/>is<sp/>out<sp/>of<sp/>bounds\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref><sp/>+<sp/>1<sp/>&gt;<sp/>vec-&gt;<ref refid="structInt_1a63bea8755b3ce6be7e83970b9ea3bd68" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structInt_1ae124ac3392878072e49fe64e0d07beff" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cannont<sp/>extend<sp/>static<sp/>array<sp/>allocation<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref><sp/>+<sp/>1<sp/>&gt;<sp/>vec-&gt;<ref refid="structInt_1a63bea8755b3ce6be7e83970b9ea3bd68" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structInt_1ae124ac3392878072e49fe64e0d07beff" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>(vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref><sp/>+<sp/>1)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref>,<sp/>size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Realloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ptr);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structInt_1a63bea8755b3ce6be7e83970b9ea3bd68" kindref="member">allocated_length</ref><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>variables<sp/>and<sp/>update<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref>)<sp/>+<sp/>(index<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref><sp/>-<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref>[index]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref><sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448" refid="vector_8c_1a787fc2bba6112c4ede10d0ec14ab3825" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a787fc2bba6112c4ede10d0ec14ab3825" kindref="member">push_uint_vector</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref><sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d<sp/>is<sp/>out<sp/>of<sp/>bounds\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref><sp/>+<sp/>1<sp/>&gt;<sp/>vec-&gt;<ref refid="structUInt_1a05b28efaec93c388e8685403f57a07ce" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structUInt_1ab87c8b62b4178bf9bcf59d03b066da1c" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cannont<sp/>extend<sp/>static<sp/>array<sp/>allocation<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref><sp/>+<sp/>1<sp/>&gt;<sp/>vec-&gt;<ref refid="structUInt_1a05b28efaec93c388e8685403f57a07ce" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structUInt_1ab87c8b62b4178bf9bcf59d03b066da1c" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>(vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref><sp/>+<sp/>1)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref>,<sp/>size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Realloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ptr);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUInt_1a05b28efaec93c388e8685403f57a07ce" kindref="member">allocated_length</ref><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>variables<sp/>and<sp/>update<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref>)<sp/>+<sp/>(index<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref><sp/>-<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref>[index]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref><sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481" refid="vector_8c_1a6135368684b7d740482cfc775417f255" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a6135368684b7d740482cfc775417f255" kindref="member">push_long_vector</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref><sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d<sp/>is<sp/>out<sp/>of<sp/>bounds\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref><sp/>+<sp/>1<sp/>&gt;<sp/>vec-&gt;<ref refid="structLInt_1a21eec79c847025348ad0082aab6dee52" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structLInt_1a7255bafd2fb6310140aebe36d68b9629" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cannont<sp/>extend<sp/>static<sp/>array<sp/>allocation<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref><sp/>+<sp/>1<sp/>&gt;<sp/>vec-&gt;<ref refid="structLInt_1a21eec79c847025348ad0082aab6dee52" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structLInt_1a7255bafd2fb6310140aebe36d68b9629" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>(vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref><sp/>+<sp/>1)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref>,<sp/>size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Realloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ptr);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLInt_1a21eec79c847025348ad0082aab6dee52" kindref="member">allocated_length</ref><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>variables<sp/>and<sp/>update<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref>)<sp/>+<sp/>(index<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref><sp/>-<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref>[index]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref><sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514" refid="vector_8c_1aea5f95b56df2836ee553face60351e61" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1aea5f95b56df2836ee553face60351e61" kindref="member">push_ulong_vector</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref><sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d<sp/>is<sp/>out<sp/>of<sp/>bounds\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref><sp/>+<sp/>1<sp/>&gt;<sp/>vec-&gt;<ref refid="structULInt_1acf325510e03976f12c116ad68c4998ec" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structULInt_1abbab1a9c205c4d86fcc53c55174d1515" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cannont<sp/>extend<sp/>static<sp/>array<sp/>allocation<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref><sp/>+<sp/>1<sp/>&gt;<sp/>vec-&gt;<ref refid="structULInt_1acf325510e03976f12c116ad68c4998ec" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structULInt_1abbab1a9c205c4d86fcc53c55174d1515" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>(vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref><sp/>+<sp/>1)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref>,<sp/>size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Realloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ptr);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULInt_1acf325510e03976f12c116ad68c4998ec" kindref="member">allocated_length</ref><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>variables<sp/>and<sp/>update<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref>)<sp/>+<sp/>(index<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref><sp/>-<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref>[index]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref><sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547" refid="vector_8c_1a93f7e28f97718d9d7c5c84df61c1466c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a93f7e28f97718d9d7c5c84df61c1466c" kindref="member">push_llong_vector</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref><sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d<sp/>is<sp/>out<sp/>of<sp/>bounds\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref><sp/>+<sp/>1<sp/>&gt;<sp/>vec-&gt;<ref refid="structLLInt_1a967c631e7b8192f0016845623ae04759" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structLLInt_1a2cf879f2b771d70de2ae15401190b50e" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cannont<sp/>extend<sp/>static<sp/>array<sp/>allocation<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref><sp/>+<sp/>1<sp/>&gt;<sp/>vec-&gt;<ref refid="structLLInt_1a967c631e7b8192f0016845623ae04759" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structLLInt_1a2cf879f2b771d70de2ae15401190b50e" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>(vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref><sp/>+<sp/>1)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref>,<sp/>size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Realloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ptr);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLLInt_1a967c631e7b8192f0016845623ae04759" kindref="member">allocated_length</ref><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>variables<sp/>and<sp/>update<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref>)<sp/>+<sp/>(index<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref><sp/>-<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref>[index]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref><sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="577"><highlight class="normal">}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580" refid="vector_8c_1a3478a298e62d85cb93f11a78f64d6f80" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a3478a298e62d85cb93f11a78f64d6f80" kindref="member">push_ullong_vector</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref><sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d<sp/>is<sp/>out<sp/>of<sp/>bounds\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref><sp/>+<sp/>1<sp/>&gt;<sp/>vec-&gt;<ref refid="structULLInt_1ac6210c003919694e4fccfc5885c8fcb4" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structULLInt_1acb153b18423bf9465c6a52aa74745df3" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cannont<sp/>extend<sp/>static<sp/>array<sp/>allocation<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref><sp/>+<sp/>1<sp/>&gt;<sp/>vec-&gt;<ref refid="structULLInt_1ac6210c003919694e4fccfc5885c8fcb4" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structULLInt_1acb153b18423bf9465c6a52aa74745df3" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>(vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref><sp/>+<sp/>1)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref>,<sp/>size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Realloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ptr);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULLInt_1ac6210c003919694e4fccfc5885c8fcb4" kindref="member">allocated_length</ref><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>variables<sp/>and<sp/>update<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref>)<sp/>+<sp/>(index<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref><sp/>-<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref>[index]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref><sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="610"><highlight class="normal">}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613" refid="vector_8c_1a31e02f437f4f9f43d1126e017ae1cac3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a31e02f437f4f9f43d1126e017ae1cac3" kindref="member">push_float_vector</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref><sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d<sp/>is<sp/>out<sp/>of<sp/>bounds\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref><sp/>+<sp/>1<sp/>&gt;<sp/>vec-&gt;<ref refid="structFlt_1a917603eeaae1fb22accbfc8d9252a389" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structFlt_1ad98ce16bf2fff8b16351042bd4135629" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cannont<sp/>extend<sp/>static<sp/>array<sp/>allocation<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref><sp/>+<sp/>1<sp/>&gt;<sp/>vec-&gt;<ref refid="structFlt_1a917603eeaae1fb22accbfc8d9252a389" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structFlt_1ad98ce16bf2fff8b16351042bd4135629" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>(vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref><sp/>+<sp/>1)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref>,<sp/>size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Realloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ptr);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structFlt_1a917603eeaae1fb22accbfc8d9252a389" kindref="member">allocated_length</ref><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>variables<sp/>and<sp/>update<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref>)<sp/>+<sp/>(index<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref><sp/>-<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref>[index]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref><sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="643"><highlight class="normal">}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646" refid="vector_8c_1ab312c467d82a0fccc66cbb89a6b8de5c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ab312c467d82a0fccc66cbb89a6b8de5c" kindref="member">push_double_vector</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref><sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d<sp/>is<sp/>out<sp/>of<sp/>bounds\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref><sp/>+<sp/>1<sp/>&gt;<sp/>vec-&gt;<ref refid="structDble_1a83cb29dfe09183032473cc7ffe005f5d" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structDble_1a593e6de4412f110b4ffe6fd87a62aa56" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cannont<sp/>extend<sp/>static<sp/>array<sp/>allocation<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref><sp/>+<sp/>1<sp/>&gt;<sp/>vec-&gt;<ref refid="structDble_1a83cb29dfe09183032473cc7ffe005f5d" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structDble_1a593e6de4412f110b4ffe6fd87a62aa56" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>(vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref><sp/>+<sp/>1)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref>,<sp/>size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Realloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ptr);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structDble_1a83cb29dfe09183032473cc7ffe005f5d" kindref="member">allocated_length</ref><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>variables<sp/>and<sp/>update<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref>)<sp/>+<sp/>(index<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref><sp/>-<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref>[index]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref><sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="676"><highlight class="normal">}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679" refid="vector_8c_1ad001560a2793c40efb1c64532cefe2e2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ad001560a2793c40efb1c64532cefe2e2" kindref="member">push_ldouble_vector</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref><sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d<sp/>is<sp/>out<sp/>of<sp/>bounds\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref><sp/>+<sp/>1<sp/>&gt;<sp/>vec-&gt;<ref refid="structLDble_1a1f0f3fd968cab1acdebf0d43f632633f" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structLDble_1a25a9e54828403acb6e1e565d00a24582" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cannont<sp/>extend<sp/>static<sp/>array<sp/>allocation<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref><sp/>+<sp/>1<sp/>&gt;<sp/>vec-&gt;<ref refid="structLDble_1a1f0f3fd968cab1acdebf0d43f632633f" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structLDble_1a25a9e54828403acb6e1e565d00a24582" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>(vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref><sp/>+<sp/>1)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref>,<sp/>size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Realloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ptr);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLDble_1a1f0f3fd968cab1acdebf0d43f632633f" kindref="member">allocated_length</ref><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>variables<sp/>and<sp/>update<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref>)<sp/>+<sp/>(index<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref><sp/>-<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref>[index]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref><sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="709"><highlight class="normal">}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712" refid="vector_8c_1ab4f076e9a6e7d0795c2c3a0216c5c97e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ab4f076e9a6e7d0795c2c3a0216c5c97e" kindref="member">push_char_vector</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref><sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>in<sp/>fsize_tile<sp/>%s<sp/>on<sp/>line<sp/>%d<sp/>is<sp/>out<sp/>of<sp/>bounds\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref><sp/>+<sp/>1<sp/>&gt;<sp/>vec-&gt;<ref refid="structChar_1ab59977640c7539e5ae251af86d445257" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structChar_1a7231211c3eec109684271510fb25ffe8" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cannont<sp/>extend<sp/>static<sp/>array<sp/>allocation<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref><sp/>+<sp/>1<sp/>&gt;<sp/>vec-&gt;<ref refid="structChar_1ab59977640c7539e5ae251af86d445257" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structChar_1a7231211c3eec109684271510fb25ffe8" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>(vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref><sp/>+<sp/>1)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref>,<sp/>size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Realloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ptr);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structChar_1ab59977640c7539e5ae251af86d445257" kindref="member">allocated_length</ref><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>variables<sp/>and<sp/>update<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref>)<sp/>+<sp/>(index<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref><sp/>-<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref>[index]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref><sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="742"><highlight class="normal">}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745" refid="vector_8c_1acc6fd3b434ba25d3473adff60160500b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1acc6fd3b434ba25d3473adff60160500b" kindref="member">push_uchar_vector</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref><sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>in<sp/>fsize_tile<sp/>%s<sp/>on<sp/>line<sp/>%d<sp/>is<sp/>out<sp/>of<sp/>bounds\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref><sp/>+<sp/>1<sp/>&gt;<sp/>vec-&gt;<ref refid="structUChar_1a69ec79fc44d9f3b1455705e24a819f4b" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structUChar_1aa1ea52fa832c84586784bb36c1617e44" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cannont<sp/>extend<sp/>static<sp/>array<sp/>allocation<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref><sp/>+<sp/>1<sp/>&gt;<sp/>vec-&gt;<ref refid="structUChar_1a69ec79fc44d9f3b1455705e24a819f4b" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structUChar_1aa1ea52fa832c84586784bb36c1617e44" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>(vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref><sp/>+<sp/>1)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref>,<sp/>size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Realloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ptr);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUChar_1a69ec79fc44d9f3b1455705e24a819f4b" kindref="member">allocated_length</ref><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>variables<sp/>and<sp/>update<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref>)<sp/>+<sp/>(index<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref><sp/>-<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref>[index]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref><sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="775"><highlight class="normal">}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778" refid="vector_8c_1a66a1a1c291efbab607defa13421167dc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a66a1a1c291efbab607defa13421167dc" kindref="member">push_bool_vector</ref>(<ref refid="structBool" kindref="compound">Bool</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>vec-&gt;<ref refid="structBool_1a5445f6ef94d239208dc797c289fded75" kindref="member">active_length</ref><sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>in<sp/>fsize_tile<sp/>%s<sp/>on<sp/>line<sp/>%d<sp/>is<sp/>out<sp/>of<sp/>bounds\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structBool_1a5445f6ef94d239208dc797c289fded75" kindref="member">active_length</ref><sp/>+<sp/>1<sp/>&gt;<sp/>vec-&gt;<ref refid="structBool_1a4a353f55a013f72befc666e8d0708212" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structBool_1ad781cb2cecf2b060c6337a73ed89def9" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cannont<sp/>extend<sp/>static<sp/>array<sp/>allocation<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structBool_1a5445f6ef94d239208dc797c289fded75" kindref="member">active_length</ref><sp/>+<sp/>1<sp/>&gt;<sp/>vec-&gt;<ref refid="structBool_1a4a353f55a013f72befc666e8d0708212" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structBool_1ad781cb2cecf2b060c6337a73ed89def9" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>(vec-&gt;<ref refid="structBool_1a5445f6ef94d239208dc797c289fded75" kindref="member">active_length</ref><sp/>+<sp/>1)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" kindref="member">array</ref>,<sp/>size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Realloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ptr);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structBool_1a4a353f55a013f72befc666e8d0708212" kindref="member">allocated_length</ref><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>variables<sp/>and<sp/>update<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" kindref="member">array</ref>)<sp/>+<sp/>(index<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vec-&gt;<ref refid="structBool_1a5445f6ef94d239208dc797c289fded75" kindref="member">active_length</ref><sp/>-<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" kindref="member">array</ref>[index]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structBool_1a5445f6ef94d239208dc797c289fded75" kindref="member">active_length</ref><sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="808"><highlight class="normal">}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811" refid="vector_8c_1a078616c26d55c1ddb2ec4c551298a4f8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a078616c26d55c1ddb2ec4c551298a4f8" kindref="member">push_string_vector</ref>(<ref refid="structString" kindref="compound">String</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>vec-&gt;<ref refid="structString_1a706ffaf2f520d46074dd99e7896d6673" kindref="member">active_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;String<sp/>index<sp/>out<sp/>of<sp/>range<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**resized<sp/>=<sp/>realloc(vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref>)<sp/>*<sp/>(vec-&gt;<ref refid="structString_1a706ffaf2f520d46074dd99e7896d6673" kindref="member">active_length</ref><sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!resized)<sp/>{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;realloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>strdup(value);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref><sp/>=<sp/>resized;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&lt;<sp/>vec-&gt;active_length)<sp/>{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref><sp/>+<sp/>index<sp/>+<sp/>1,<sp/>vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref><sp/>+<sp/>index,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref>)<sp/>*<sp/>(vec-&gt;<ref refid="structString_1a706ffaf2f520d46074dd99e7896d6673" kindref="member">active_length</ref><sp/>-<sp/>index));</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref>[index]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structString_1a706ffaf2f520d46074dd99e7896d6673" kindref="member">active_length</ref>++;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="829"><highlight class="normal">}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833" refid="vector_8c_1a2ed595a869e30a4c834c1d2cf5b934ee" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a2ed595a869e30a4c834c1d2cf5b934ee" kindref="member">insert_short_vector</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*elements,</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_indices,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>that<sp/>the<sp/>index<sp/>is<sp/>within<sp/>the<sp/>active_length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;WARNING:<sp/>The<sp/>selected<sp/>index<sp/>is<sp/>larger<sp/>than<sp/>the<sp/>active<sp/>length\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref><sp/>+<sp/>num_indices<sp/>&gt;<sp/>vec-&gt;<ref refid="structShort_1af0b6f4e61e69b8a2f74d42b09b421d88" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structShort_1a20b9c526866b593e8e1ecdc49515e642" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cannont<sp/>extend<sp/>static<sp/>array<sp/>allocation<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref><sp/>+<sp/>num_indices<sp/>&gt;<sp/>vec-&gt;<ref refid="structShort_1af0b6f4e61e69b8a2f74d42b09b421d88" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structShort_1a20b9c526866b593e8e1ecdc49515e642" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>(vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref><sp/>+<sp/>num_indices)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref>,<sp/>size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Failure<sp/>on<sp/>file=%s,<sp/>line=%d&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ptr);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structShort_1af0b6f4e61e69b8a2f74d42b09b421d88" kindref="member">allocated_length</ref><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>variables<sp/>and<sp/>update<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref>)<sp/>+<sp/>(num_indices<sp/>+<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref><sp/>-<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>elements,</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_indices<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref><sp/>+=<sp/>num_indices;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="866"><highlight class="normal">}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869" refid="vector_8c_1aa8495c3a316b6d93c8697d194c86fc2b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1aa8495c3a316b6d93c8697d194c86fc2b" kindref="member">insert_ushort_vector</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*elements,</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_indices,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>that<sp/>the<sp/>index<sp/>is<sp/>within<sp/>the<sp/>active_length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;WARNING:<sp/>The<sp/>selected<sp/>index<sp/>is<sp/>larger<sp/>than<sp/>the<sp/>active<sp/>length\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref><sp/>+<sp/>num_indices<sp/>&gt;<sp/>vec-&gt;<ref refid="structUShort_1a0ef4541f3fd3fcee1c0f5809341c84d6" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structUShort_1a4c5d40034bbd1e9ee0de773d6be0c31e" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cannont<sp/>extend<sp/>static<sp/>array<sp/>allocation<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref><sp/>+<sp/>num_indices<sp/>&gt;<sp/>vec-&gt;<ref refid="structUShort_1a0ef4541f3fd3fcee1c0f5809341c84d6" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structUShort_1a4c5d40034bbd1e9ee0de773d6be0c31e" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>(vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref><sp/>+<sp/>num_indices)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref>,<sp/>size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Failure<sp/>on<sp/>file=%s,<sp/>line=%d&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ptr);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUShort_1a0ef4541f3fd3fcee1c0f5809341c84d6" kindref="member">allocated_length</ref><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>variables<sp/>and<sp/>update<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref>)<sp/>+<sp/>(num_indices<sp/>+<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref><sp/>-<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>elements,</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_indices<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref><sp/>+=<sp/>num_indices;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="902"><highlight class="normal">}</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905" refid="vector_8c_1a0acf8b86d4a95be517c7af80f8eff4ac" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a0acf8b86d4a95be517c7af80f8eff4ac" kindref="member">insert_int_vector</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*elements,</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_indices,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>that<sp/>the<sp/>index<sp/>is<sp/>within<sp/>the<sp/>active_length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;WARNING:<sp/>The<sp/>selected<sp/>index<sp/>is<sp/>larger<sp/>than<sp/>the<sp/>active<sp/>length\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref><sp/>+<sp/>num_indices<sp/>&gt;<sp/>vec-&gt;<ref refid="structInt_1a63bea8755b3ce6be7e83970b9ea3bd68" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structInt_1ae124ac3392878072e49fe64e0d07beff" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cannont<sp/>extend<sp/>static<sp/>array<sp/>allocation<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref><sp/>+<sp/>num_indices<sp/>&gt;<sp/>vec-&gt;<ref refid="structInt_1a63bea8755b3ce6be7e83970b9ea3bd68" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structInt_1ae124ac3392878072e49fe64e0d07beff" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>(vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref><sp/>+<sp/>num_indices)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref>,<sp/>size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Failure<sp/>on<sp/>file=%s,<sp/>line=%d&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ptr);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structInt_1a63bea8755b3ce6be7e83970b9ea3bd68" kindref="member">allocated_length</ref><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>variables<sp/>and<sp/>update<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref>)<sp/>+<sp/>(num_indices<sp/>+<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref><sp/>-<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>elements,</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_indices<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref><sp/>+=<sp/>num_indices;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="938"><highlight class="normal">}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941" refid="vector_8c_1ad78d40537dece17df4f506fd6ba7dc34" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ad78d40537dece17df4f506fd6ba7dc34" kindref="member">insert_uint_vector</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*elements,</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_indices,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>that<sp/>the<sp/>index<sp/>is<sp/>within<sp/>the<sp/>active_length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;WARNING:<sp/>The<sp/>selected<sp/>index<sp/>is<sp/>larger<sp/>than<sp/>the<sp/>active<sp/>length\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref><sp/>+<sp/>num_indices<sp/>&gt;<sp/>vec-&gt;<ref refid="structUInt_1a05b28efaec93c388e8685403f57a07ce" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structUInt_1ab87c8b62b4178bf9bcf59d03b066da1c" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cannont<sp/>extend<sp/>static<sp/>array<sp/>allocation<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref><sp/>+<sp/>num_indices<sp/>&gt;<sp/>vec-&gt;<ref refid="structUInt_1a05b28efaec93c388e8685403f57a07ce" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structUInt_1ab87c8b62b4178bf9bcf59d03b066da1c" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>(vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref><sp/>+<sp/>num_indices)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref>,<sp/>size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Failure<sp/>on<sp/>file=%s,<sp/>line=%d&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ptr);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUInt_1a05b28efaec93c388e8685403f57a07ce" kindref="member">allocated_length</ref><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>variables<sp/>and<sp/>update<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref>)<sp/>+<sp/>(num_indices<sp/>+<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref><sp/>-<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>elements,</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_indices<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref><sp/>+=<sp/>num_indices;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="974"><highlight class="normal">}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977" refid="vector_8c_1ab5d840518e5e7bbd9ed243681b7124f7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ab5d840518e5e7bbd9ed243681b7124f7" kindref="member">insert_long_vector</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*elements,</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_indices,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>that<sp/>the<sp/>index<sp/>is<sp/>within<sp/>the<sp/>active_length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;WARNING:<sp/>The<sp/>selected<sp/>index<sp/>is<sp/>larger<sp/>than<sp/>the<sp/>active<sp/>length\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref><sp/>+<sp/>num_indices<sp/>&gt;<sp/>vec-&gt;<ref refid="structLInt_1a21eec79c847025348ad0082aab6dee52" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structLInt_1a7255bafd2fb6310140aebe36d68b9629" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cannont<sp/>extend<sp/>static<sp/>array<sp/>allocation<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref><sp/>+<sp/>num_indices<sp/>&gt;<sp/>vec-&gt;<ref refid="structLInt_1a21eec79c847025348ad0082aab6dee52" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structLInt_1a7255bafd2fb6310140aebe36d68b9629" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>(vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref><sp/>+<sp/>num_indices)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref>,<sp/>size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Failure<sp/>on<sp/>file=%s,<sp/>line=%d&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ptr);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLInt_1a21eec79c847025348ad0082aab6dee52" kindref="member">allocated_length</ref><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>variables<sp/>and<sp/>update<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref>)<sp/>+<sp/>(num_indices<sp/>+<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref><sp/>-<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>elements,</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_indices<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref><sp/>+=<sp/>num_indices;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013" refid="vector_8c_1aa419c32bb276bfe866787e1744669b94" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1aa419c32bb276bfe866787e1744669b94" kindref="member">insert_ulong_vector</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*elements,</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_indices,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>that<sp/>the<sp/>index<sp/>is<sp/>within<sp/>the<sp/>active_length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;WARNING:<sp/>The<sp/>selected<sp/>index<sp/>is<sp/>larger<sp/>than<sp/>the<sp/>active<sp/>length\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref><sp/>+<sp/>num_indices<sp/>&gt;<sp/>vec-&gt;<ref refid="structULInt_1acf325510e03976f12c116ad68c4998ec" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structULInt_1abbab1a9c205c4d86fcc53c55174d1515" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cannont<sp/>extend<sp/>static<sp/>array<sp/>allocation<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref><sp/>+<sp/>num_indices<sp/>&gt;<sp/>vec-&gt;<ref refid="structULInt_1acf325510e03976f12c116ad68c4998ec" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structULInt_1abbab1a9c205c4d86fcc53c55174d1515" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>(vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref><sp/>+<sp/>num_indices)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref>,<sp/>size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Failure<sp/>on<sp/>file=%s,<sp/>line=%d&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ptr);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULInt_1acf325510e03976f12c116ad68c4998ec" kindref="member">allocated_length</ref><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>variables<sp/>and<sp/>update<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref>)<sp/>+<sp/>(num_indices<sp/>+<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref><sp/>-<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>elements,</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_indices<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref><sp/>+=<sp/>num_indices;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049" refid="vector_8c_1a9817d90055331624db7529c5d74a80ad" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a9817d90055331624db7529c5d74a80ad" kindref="member">insert_llong_vector</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*elements,</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_indices,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>that<sp/>the<sp/>index<sp/>is<sp/>within<sp/>the<sp/>active_length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;WARNING:<sp/>The<sp/>selected<sp/>index<sp/>is<sp/>larger<sp/>than<sp/>the<sp/>active<sp/>length\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref><sp/>+<sp/>num_indices<sp/>&gt;<sp/>vec-&gt;<ref refid="structLLInt_1a967c631e7b8192f0016845623ae04759" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structLLInt_1a2cf879f2b771d70de2ae15401190b50e" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cannont<sp/>extend<sp/>static<sp/>array<sp/>allocation<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref><sp/>+<sp/>num_indices<sp/>&gt;<sp/>vec-&gt;<ref refid="structLLInt_1a967c631e7b8192f0016845623ae04759" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structLLInt_1a2cf879f2b771d70de2ae15401190b50e" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>(vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref><sp/>+<sp/>num_indices)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref>,<sp/>size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Failure<sp/>on<sp/>file=%s,<sp/>line=%d&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ptr);</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLLInt_1a967c631e7b8192f0016845623ae04759" kindref="member">allocated_length</ref><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>variables<sp/>and<sp/>update<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref>)<sp/>+<sp/>(num_indices<sp/>+<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref><sp/>-<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>elements,</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_indices<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref><sp/>+=<sp/>num_indices;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085" refid="vector_8c_1afccda80cf8e96d76846df29a256f6974" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1afccda80cf8e96d76846df29a256f6974" kindref="member">insert_ullong_vector</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*elements,</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_indices,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>that<sp/>the<sp/>index<sp/>is<sp/>within<sp/>the<sp/>active_length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;WARNING:<sp/>The<sp/>selected<sp/>index<sp/>is<sp/>larger<sp/>than<sp/>the<sp/>active<sp/>length\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref><sp/>+<sp/>num_indices<sp/>&gt;<sp/>vec-&gt;<ref refid="structULLInt_1ac6210c003919694e4fccfc5885c8fcb4" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structULLInt_1acb153b18423bf9465c6a52aa74745df3" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cannont<sp/>extend<sp/>static<sp/>array<sp/>allocation<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref><sp/>+<sp/>num_indices<sp/>&gt;<sp/>vec-&gt;<ref refid="structULLInt_1ac6210c003919694e4fccfc5885c8fcb4" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structULLInt_1acb153b18423bf9465c6a52aa74745df3" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>(vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref><sp/>+<sp/>num_indices)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref>,<sp/>size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Failure<sp/>on<sp/>file=%s,<sp/>line=%d&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ptr);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULLInt_1ac6210c003919694e4fccfc5885c8fcb4" kindref="member">allocated_length</ref><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>variables<sp/>and<sp/>update<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref>)<sp/>+<sp/>(num_indices<sp/>+<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref><sp/>-<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>elements,</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_indices<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref><sp/>+=<sp/>num_indices;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121" refid="vector_8c_1a17ee89c38df38d9d1d5b0cb2e33266d1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a17ee89c38df38d9d1d5b0cb2e33266d1" kindref="member">insert_float_vector</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*elements,</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_indices,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>that<sp/>the<sp/>index<sp/>is<sp/>within<sp/>the<sp/>active_length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;WARNING:<sp/>The<sp/>selected<sp/>index<sp/>is<sp/>larger<sp/>than<sp/>the<sp/>active<sp/>length\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref><sp/>+<sp/>num_indices<sp/>&gt;<sp/>vec-&gt;<ref refid="structFlt_1a917603eeaae1fb22accbfc8d9252a389" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structFlt_1ad98ce16bf2fff8b16351042bd4135629" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cannont<sp/>extend<sp/>static<sp/>array<sp/>allocation<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref><sp/>+<sp/>num_indices<sp/>&gt;<sp/>vec-&gt;<ref refid="structFlt_1a917603eeaae1fb22accbfc8d9252a389" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structFlt_1ad98ce16bf2fff8b16351042bd4135629" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>(vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref><sp/>+<sp/>num_indices)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref>,<sp/>size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Failure<sp/>on<sp/>file=%s,<sp/>line=%d&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ptr);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structFlt_1a917603eeaae1fb22accbfc8d9252a389" kindref="member">allocated_length</ref><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>variables<sp/>and<sp/>update<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref>)<sp/>+<sp/>(num_indices<sp/>+<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref><sp/>-<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),<sp/>elements,</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_indices<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref><sp/>+=<sp/>num_indices;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157" refid="vector_8c_1af1e86e2b45b0339cc18ba5b35bf01132" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1af1e86e2b45b0339cc18ba5b35bf01132" kindref="member">insert_double_vector</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*elements,</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_indices,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>that<sp/>the<sp/>index<sp/>is<sp/>within<sp/>the<sp/>active_length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;WARNING:<sp/>The<sp/>selected<sp/>index<sp/>is<sp/>larger<sp/>than<sp/>the<sp/>active<sp/>length\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref><sp/>+<sp/>num_indices<sp/>&gt;<sp/>vec-&gt;<ref refid="structDble_1a83cb29dfe09183032473cc7ffe005f5d" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structDble_1a593e6de4412f110b4ffe6fd87a62aa56" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cannont<sp/>extend<sp/>static<sp/>array<sp/>allocation<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref><sp/>+<sp/>num_indices<sp/>&gt;<sp/>vec-&gt;<ref refid="structDble_1a83cb29dfe09183032473cc7ffe005f5d" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structDble_1a593e6de4412f110b4ffe6fd87a62aa56" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>(vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref><sp/>+<sp/>num_indices)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref>,<sp/>size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Failure<sp/>on<sp/>file=%s,<sp/>line=%d&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ptr);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structDble_1a83cb29dfe09183032473cc7ffe005f5d" kindref="member">allocated_length</ref><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>variables<sp/>and<sp/>update<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref>)<sp/>+<sp/>(num_indices<sp/>+<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref><sp/>-<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">),<sp/>elements,</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_indices<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref><sp/>+=<sp/>num_indices;</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight></codeline>
<codeline lineno="1193" refid="vector_8c_1a0ec3e3b802f62c5f9cdd9b7d197bd4a1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a0ec3e3b802f62c5f9cdd9b7d197bd4a1" kindref="member">insert_ldouble_vector</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*elements,</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_indices,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>that<sp/>the<sp/>index<sp/>is<sp/>within<sp/>the<sp/>active_length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;WARNING:<sp/>The<sp/>selected<sp/>index<sp/>is<sp/>larger<sp/>than<sp/>the<sp/>active<sp/>length\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref><sp/>+<sp/>num_indices<sp/>&gt;<sp/>vec-&gt;<ref refid="structLDble_1a1f0f3fd968cab1acdebf0d43f632633f" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structLDble_1a25a9e54828403acb6e1e565d00a24582" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cannont<sp/>extend<sp/>static<sp/>array<sp/>allocation<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref><sp/>+<sp/>num_indices<sp/>&gt;<sp/>vec-&gt;<ref refid="structLDble_1a1f0f3fd968cab1acdebf0d43f632633f" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structLDble_1a25a9e54828403acb6e1e565d00a24582" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>(vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref><sp/>+<sp/>num_indices)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref>,<sp/>size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Failure<sp/>on<sp/>file=%s,<sp/>line=%d&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ptr);</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLDble_1a1f0f3fd968cab1acdebf0d43f632633f" kindref="member">allocated_length</ref><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>variables<sp/>and<sp/>update<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref>)<sp/>+<sp/>(num_indices<sp/>+<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref><sp/>-<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">),<sp/>elements,</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_indices<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref><sp/>+=<sp/>num_indices;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229" refid="vector_8c_1a9e9db9d87d5a9f3bb6dae1ba5668ef12" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a9e9db9d87d5a9f3bb6dae1ba5668ef12" kindref="member">insert_char_vector</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*elements,</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_indices,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>that<sp/>the<sp/>index<sp/>is<sp/>within<sp/>the<sp/>active_length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;WARNING:<sp/>The<sp/>selected<sp/>index<sp/>is<sp/>larger<sp/>than<sp/>the<sp/>active<sp/>length\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref><sp/>+<sp/>num_indices<sp/>&gt;<sp/>vec-&gt;<ref refid="structChar_1ab59977640c7539e5ae251af86d445257" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structChar_1a7231211c3eec109684271510fb25ffe8" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cannont<sp/>extend<sp/>static<sp/>array<sp/>allocation<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref><sp/>+<sp/>num_indices<sp/>&gt;<sp/>vec-&gt;<ref refid="structChar_1ab59977640c7539e5ae251af86d445257" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structChar_1a7231211c3eec109684271510fb25ffe8" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>(vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref><sp/>+<sp/>num_indices)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref>,<sp/>size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Failure<sp/>on<sp/>file=%s,<sp/>line=%d&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ptr);</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structChar_1ab59977640c7539e5ae251af86d445257" kindref="member">allocated_length</ref><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>variables<sp/>and<sp/>update<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref>)<sp/>+<sp/>(num_indices<sp/>+<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref><sp/>-<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">),<sp/>elements,</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_indices<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref><sp/>+=<sp/>num_indices;</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight></codeline>
<codeline lineno="1265" refid="vector_8c_1ae5b1c45f4d2083c6d87f217646609a2d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ae5b1c45f4d2083c6d87f217646609a2d" kindref="member">insert_uchar_vector</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*elements,</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_indices,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>that<sp/>the<sp/>index<sp/>is<sp/>within<sp/>the<sp/>active_length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;WARNING:<sp/>The<sp/>selected<sp/>index<sp/>is<sp/>larger<sp/>than<sp/>the<sp/>active<sp/>length\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref><sp/>+<sp/>num_indices<sp/>&gt;<sp/>vec-&gt;<ref refid="structUChar_1a69ec79fc44d9f3b1455705e24a819f4b" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structUChar_1aa1ea52fa832c84586784bb36c1617e44" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cannont<sp/>extend<sp/>static<sp/>array<sp/>allocation<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref><sp/>+<sp/>num_indices<sp/>&gt;<sp/>vec-&gt;<ref refid="structUChar_1a69ec79fc44d9f3b1455705e24a819f4b" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structUChar_1aa1ea52fa832c84586784bb36c1617e44" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>(vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref><sp/>+<sp/>num_indices)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref>,<sp/>size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Failure<sp/>on<sp/>file=%s,<sp/>line=%d&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ptr);</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUChar_1a69ec79fc44d9f3b1455705e24a819f4b" kindref="member">allocated_length</ref><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>variables<sp/>and<sp/>update<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref>)<sp/>+<sp/>(num_indices<sp/>+<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref><sp/>-<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">),<sp/>elements,</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_indices<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref><sp/>+=<sp/>num_indices;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight></codeline>
<codeline lineno="1301" refid="vector_8c_1ab344e3b36aa397f037cb2c573e1d3aff" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ab344e3b36aa397f037cb2c573e1d3aff" kindref="member">insert_bool_vector</ref>(<ref refid="structBool" kindref="compound">Bool</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*elements,</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_indices,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>that<sp/>the<sp/>index<sp/>is<sp/>within<sp/>the<sp/>active_length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>vec-&gt;<ref refid="structBool_1a5445f6ef94d239208dc797c289fded75" kindref="member">active_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;WARNING:<sp/>The<sp/>selected<sp/>index<sp/>is<sp/>larger<sp/>than<sp/>the<sp/>active<sp/>length\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structBool_1a5445f6ef94d239208dc797c289fded75" kindref="member">active_length</ref><sp/>+<sp/>num_indices<sp/>&gt;<sp/>vec-&gt;<ref refid="structBool_1a4a353f55a013f72befc666e8d0708212" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structBool_1ad781cb2cecf2b060c6337a73ed89def9" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cannont<sp/>extend<sp/>static<sp/>array<sp/>allocation<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vec-&gt;<ref refid="structBool_1a5445f6ef94d239208dc797c289fded75" kindref="member">active_length</ref><sp/>+<sp/>num_indices<sp/>&gt;<sp/>vec-&gt;<ref refid="structBool_1a4a353f55a013f72befc666e8d0708212" kindref="member">allocated_length</ref>)<sp/>&amp;&amp;<sp/>vec-&gt;<ref refid="structBool_1ad781cb2cecf2b060c6337a73ed89def9" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>(vec-&gt;<ref refid="structBool_1a5445f6ef94d239208dc797c289fded75" kindref="member">active_length</ref><sp/>+<sp/>num_indices)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" kindref="member">array</ref>,<sp/>size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Failure<sp/>on<sp/>file=%s,<sp/>line=%d&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ptr);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structBool_1a4a353f55a013f72befc666e8d0708212" kindref="member">allocated_length</ref><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>variables<sp/>and<sp/>update<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" kindref="member">array</ref>)<sp/>+<sp/>(num_indices<sp/>+<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vec-&gt;<ref refid="structBool_1a5445f6ef94d239208dc797c289fded75" kindref="member">active_length</ref><sp/>-<sp/>index)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" kindref="member">array</ref>)<sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">),<sp/>elements,</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_indices<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structBool_1a5445f6ef94d239208dc797c289fded75" kindref="member">active_length</ref><sp/>+=<sp/>num_indices;</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight></codeline>
<codeline lineno="1337" refid="vector_8c_1ac5498955b573e63b86b34a1fdd93e391" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ac5498955b573e63b86b34a1fdd93e391" kindref="member">insert_string_vector</ref>(<ref refid="structString" kindref="compound">String</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**values,</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>vec-&gt;<ref refid="structString_1a706ffaf2f520d46074dd99e7896d6673" kindref="member">active_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;String<sp/>index<sp/>out<sp/>of<sp/>range<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**resized<sp/>=<sp/>realloc(vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref>)<sp/>*<sp/>(vec-&gt;<ref refid="structString_1a706ffaf2f520d46074dd99e7896d6673" kindref="member">active_length</ref><sp/>+<sp/>length));</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!resized)<sp/>{</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;realloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref><sp/>=<sp/>resized;</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&lt;<sp/>vec-&gt;active_length)<sp/>{</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref><sp/>+<sp/>index<sp/>+<sp/>length,<sp/>vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref><sp/>+<sp/>index,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref>)<sp/>*<sp/>(vec-&gt;<ref refid="structString_1a706ffaf2f520d46074dd99e7896d6673" kindref="member">active_length</ref><sp/>-<sp/>index));</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref>[index<sp/>+<sp/>i]<sp/>=<sp/>strdup(values[i]);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structString_1a706ffaf2f520d46074dd99e7896d6673" kindref="member">active_length</ref><sp/>+=<sp/>length;</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight></codeline>
<codeline lineno="1365"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1366" refid="vector_8c_1a90c0d394579f3950b22adabb66f153e9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a90c0d394579f3950b22adabb66f153e9" kindref="member">pop_short_vector_index</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;index,<sp/>out<sp/>of<sp/>bounds<sp/>in<sp/>file<sp/>%s<sp/>at<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dst<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref><sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(dst,<sp/>dst<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>*<sp/>(vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref><sp/>-<sp/>index<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref>[vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref><sp/>-<sp/>1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref><sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight></codeline>
<codeline lineno="1379" refid="vector_8c_1ab5f9826948a1e75b6ffa74b2e801f8c5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ab5f9826948a1e75b6ffa74b2e801f8c5" kindref="member">pop_ushort_vector_index</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;index,<sp/>out<sp/>of<sp/>bounds<sp/>in<sp/>file<sp/>%s<sp/>at<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dst<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref><sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(dst,<sp/>dst<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>*<sp/>(vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref><sp/>-<sp/>index<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref>[vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref><sp/>-<sp/>1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref><sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight></codeline>
<codeline lineno="1392" refid="vector_8c_1af0ecebd36b313d07d43f40698bd5508f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1af0ecebd36b313d07d43f40698bd5508f" kindref="member">pop_int_vector_index</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;index,<sp/>out<sp/>of<sp/>bounds<sp/>in<sp/>file<sp/>%s<sp/>at<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dst<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref><sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(dst,<sp/>dst<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>*<sp/>(vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref><sp/>-<sp/>index<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref>[vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref><sp/>-<sp/>1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref><sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight></codeline>
<codeline lineno="1405" refid="vector_8c_1aea61eee2cd7481c1d34d13ba4a27e669" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1aea61eee2cd7481c1d34d13ba4a27e669" kindref="member">pop_uint_vector_index</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;index,<sp/>out<sp/>of<sp/>bounds<sp/>in<sp/>file<sp/>%s<sp/>at<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dst<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref><sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(dst,<sp/>dst<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>*<sp/>(vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref><sp/>-<sp/>index<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref>[vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref><sp/>-<sp/>1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref><sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight></codeline>
<codeline lineno="1418" refid="vector_8c_1ade7d072b4cbbed3560461122ff9bf2d1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ade7d072b4cbbed3560461122ff9bf2d1" kindref="member">pop_long_vector_index</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;index,<sp/>out<sp/>of<sp/>bounds<sp/>in<sp/>file<sp/>%s<sp/>at<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dst<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref><sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(dst,<sp/>dst<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>*<sp/>(vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref><sp/>-<sp/>index<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref>[vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref><sp/>-<sp/>1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref><sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight></codeline>
<codeline lineno="1431" refid="vector_8c_1aee6e8f2b009cc7205dfd8c143b8e9839" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1aee6e8f2b009cc7205dfd8c143b8e9839" kindref="member">pop_ulong_vector_index</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;index,<sp/>out<sp/>of<sp/>bounds<sp/>in<sp/>file<sp/>%s<sp/>at<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dst<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref><sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(dst,<sp/>dst<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>*<sp/>(vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref><sp/>-<sp/>index<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref>[vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref><sp/>-<sp/>1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref><sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight></codeline>
<codeline lineno="1444" refid="vector_8c_1a6475916b10de913b8859fbd0b8312557" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a6475916b10de913b8859fbd0b8312557" kindref="member">pop_llong_vector_index</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;index,<sp/>out<sp/>of<sp/>bounds<sp/>in<sp/>file<sp/>%s<sp/>at<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dst<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref><sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(dst,<sp/>dst<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>*<sp/>(vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref><sp/>-<sp/>index<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref>[vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref><sp/>-<sp/>1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref><sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight></codeline>
<codeline lineno="1457" refid="vector_8c_1a52f4d32e9312b40967f4c0ee3de88e7a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a52f4d32e9312b40967f4c0ee3de88e7a" kindref="member">pop_ullong_vector_index</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;index,<sp/>out<sp/>of<sp/>bounds<sp/>in<sp/>file<sp/>%s<sp/>at<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dst<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref><sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(dst,<sp/>dst<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>*<sp/>(vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref><sp/>-<sp/>index<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref>[vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref><sp/>-<sp/>1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref><sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight></codeline>
<codeline lineno="1470" refid="vector_8c_1a7f179d98deb7852196afc7e3d26ef06d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a7f179d98deb7852196afc7e3d26ef06d" kindref="member">pop_float_vector_index</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;index,<sp/>out<sp/>of<sp/>bounds<sp/>in<sp/>file<sp/>%s<sp/>at<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dst<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref><sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(dst,<sp/>dst<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>*<sp/>(vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref><sp/>-<sp/>index<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref>[vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref><sp/>-<sp/>1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref><sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight></codeline>
<codeline lineno="1483" refid="vector_8c_1a8d2545eb603560d67e5c481075e5d0fc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a8d2545eb603560d67e5c481075e5d0fc" kindref="member">pop_double_vector_index</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;index,<sp/>out<sp/>of<sp/>bounds<sp/>in<sp/>file<sp/>%s<sp/>at<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dst<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref><sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(dst,<sp/>dst<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>*<sp/>(vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref><sp/>-<sp/>index<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref>[vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref><sp/>-<sp/>1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref><sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight></codeline>
<codeline lineno="1496" refid="vector_8c_1a3964e5480d290ac44a95680e52706f9d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a3964e5480d290ac44a95680e52706f9d" kindref="member">pop_ldouble_vector_index</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;index,<sp/>out<sp/>of<sp/>bounds<sp/>in<sp/>file<sp/>%s<sp/>at<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dst<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref><sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(dst,<sp/>dst<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>*<sp/>(vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref><sp/>-<sp/>index<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref>[vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref><sp/>-<sp/>1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref><sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight></codeline>
<codeline lineno="1509" refid="vector_8c_1a4f9d1488d50bc3889fc04afc18fa9958" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a4f9d1488d50bc3889fc04afc18fa9958" kindref="member">pop_char_vector_index</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;index,<sp/>out<sp/>of<sp/>bounds<sp/>in<sp/>file<sp/>%s<sp/>at<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dst<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref><sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(dst,<sp/>dst<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>*<sp/>(vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref><sp/>-<sp/>index<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref>[vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref><sp/>-<sp/>1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref><sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1521" refid="vector_8c_1a7527a193c89c32c07eba99e8abc08574" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a7527a193c89c32c07eba99e8abc08574" kindref="member">pop_uchar_vector_index</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;index,<sp/>out<sp/>of<sp/>bounds<sp/>in<sp/>file<sp/>%s<sp/>at<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dst<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref><sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(dst,<sp/>dst<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>*<sp/>(vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref><sp/>-<sp/>index<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref>[vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref><sp/>-<sp/>1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref><sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1531"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"></highlight></codeline>
<codeline lineno="1534" refid="vector_8c_1a69479bf6e334f44f372305c8b1b13bb3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a69479bf6e334f44f372305c8b1b13bb3" kindref="member">pop_bool_vector_index</ref>(<ref refid="structBool" kindref="compound">Bool</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>vec-&gt;<ref refid="structBool_1a5445f6ef94d239208dc797c289fded75" kindref="member">active_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;index,<sp/>out<sp/>of<sp/>bounds<sp/>in<sp/>file<sp/>%s<sp/>at<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dst<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vec-&gt;<ref refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" kindref="member">array</ref><sp/>+<sp/>index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(dst,<sp/>dst<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)<sp/>*<sp/>(vec-&gt;<ref refid="structBool_1a5445f6ef94d239208dc797c289fded75" kindref="member">active_length</ref><sp/>-<sp/>index<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" kindref="member">array</ref>[vec-&gt;<ref refid="structBool_1a5445f6ef94d239208dc797c289fded75" kindref="member">active_length</ref><sp/>-<sp/>1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structBool_1a5445f6ef94d239208dc797c289fded75" kindref="member">active_length</ref><sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight></codeline>
<codeline lineno="1547" refid="vector_8c_1a4db2688e1c0d0d477c8a7168d811956d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a4db2688e1c0d0d477c8a7168d811956d" kindref="member">pop_string_vector_index</ref>(<ref refid="structString" kindref="compound">String</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>+<sp/>1<sp/>&gt;<sp/>vec-&gt;<ref refid="structString_1a706ffaf2f520d46074dd99e7896d6673" kindref="member">active_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>range<sp/>at<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value<sp/>=<sp/>vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref>[index];</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>+<sp/>1<sp/>&lt;<sp/>vec-&gt;<ref refid="structString_1a706ffaf2f520d46074dd99e7896d6673" kindref="member">active_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref><sp/>+<sp/>index,<sp/>vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref><sp/>+<sp/>index<sp/>+<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref>)<sp/>*<sp/>(vec-&gt;<ref refid="structString_1a706ffaf2f520d46074dd99e7896d6673" kindref="member">active_length</ref><sp/>-<sp/>index<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**resized<sp/>=<sp/>realloc(vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref>)<sp/>*<sp/>(vec-&gt;<ref refid="structString_1a706ffaf2f520d46074dd99e7896d6673" kindref="member">active_length</ref><sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!resized)<sp/>{</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;String<sp/>index<sp/>out<sp/>of<sp/>range<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref><sp/>+<sp/>index<sp/>+<sp/>1,<sp/>vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref><sp/>+<sp/>index,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>*<sp/>(vec-&gt;<ref refid="structString_1a706ffaf2f520d46074dd99e7896d6673" kindref="member">active_length</ref><sp/>-<sp/>index<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref>[index]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref><sp/>=<sp/>resized;</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structString_1a706ffaf2f520d46074dd99e7896d6673" kindref="member">active_length</ref>--;</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/>free(value);</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight><highlight class="comment">//<sp/>REPLACE_TYPE_VALUES<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight></codeline>
<codeline lineno="1573" refid="vector_8c_1a6f10b6c383f01d0f64ccdbedcbf2f9c6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a6f10b6c383f01d0f64ccdbedcbf2f9c6" kindref="member">replace_short_vector_values</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>old_value,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_value)<sp/>{</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref>[i]<sp/>==<sp/>old_value)<sp/>vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref>[i]<sp/>=<sp/>new_value;</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1577"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"></highlight></codeline>
<codeline lineno="1580" refid="vector_8c_1a879f3876d14b47d940dbe55a1eec452e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a879f3876d14b47d940dbe55a1eec452e" kindref="member">replace_ushort_vector_values</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>old_value,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_value)<sp/>{</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref>[i]<sp/>==<sp/>old_value)<sp/>vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref>[i]<sp/>=<sp/>new_value;</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight></codeline>
<codeline lineno="1587" refid="vector_8c_1a7670474ec5b862ec981a62daa995aa3b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a7670474ec5b862ec981a62daa995aa3b" kindref="member">replace_int_vector_values</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>old_value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_value)<sp/>{</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref>[i]<sp/>==<sp/>old_value)<sp/>vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref>[i]<sp/>=<sp/>new_value;</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1591"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight></codeline>
<codeline lineno="1594" refid="vector_8c_1a9d98a8399e52f97b6771d676b3919319" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a9d98a8399e52f97b6771d676b3919319" kindref="member">replace_uint_vector_values</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>old_value,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_value)<sp/>{</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref>[i]<sp/>==<sp/>old_value)<sp/>vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref>[i]<sp/>=<sp/>new_value;</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1600"><highlight class="normal"></highlight></codeline>
<codeline lineno="1601" refid="vector_8c_1a8f344f297fe759011551c5f2bb5e0161" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a8f344f297fe759011551c5f2bb5e0161" kindref="member">replace_long_vector_values</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>old_value,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_value)<sp/>{</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref>[i]<sp/>==<sp/>old_value)<sp/>vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref>[i]<sp/>=<sp/>new_value;</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1605"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight></codeline>
<codeline lineno="1608" refid="vector_8c_1a3354495712d1e3910ca4e6a33ee1c1df" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a3354495712d1e3910ca4e6a33ee1c1df" kindref="member">replace_ulong_vector_values</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>old_value,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_value)<sp/>{</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref>[i]<sp/>==<sp/>old_value)<sp/>vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref>[i]<sp/>=<sp/>new_value;</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"></highlight></codeline>
<codeline lineno="1615" refid="vector_8c_1a6fbef65375cd1143dadb2045d4a4cc82" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a6fbef65375cd1143dadb2045d4a4cc82" kindref="member">replace_llong_vector_values</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>old_value,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_value)<sp/>{</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref>[i]<sp/>==<sp/>old_value)<sp/>vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref>[i]<sp/>=<sp/>new_value;</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight></codeline>
<codeline lineno="1622" refid="vector_8c_1acdb36a4f7fabea5ff887469c25bcaac3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1acdb36a4f7fabea5ff887469c25bcaac3" kindref="member">replace_ullong_vector_values</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>old_value,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_value)<sp/>{</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref>[i]<sp/>==<sp/>old_value)<sp/>vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref>[i]<sp/>=<sp/>new_value;</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight></codeline>
<codeline lineno="1629" refid="vector_8c_1aafe1e760a31236df3e8d9b5d4fedf79e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1aafe1e760a31236df3e8d9b5d4fedf79e" kindref="member">replace_float_vector_values</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>old_value,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>new_value)<sp/>{</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref>[i]<sp/>==<sp/>old_value)<sp/>vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref>[i]<sp/>=<sp/>new_value;</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1633"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight></codeline>
<codeline lineno="1636" refid="vector_8c_1a141f86441673f219db9af026644dee3e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a141f86441673f219db9af026644dee3e" kindref="member">replace_double_vector_values</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>old_value,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>new_value)<sp/>{</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref>[i]<sp/>==<sp/>old_value)<sp/>vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref>[i]<sp/>=<sp/>new_value;</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1640"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight></codeline>
<codeline lineno="1643" refid="vector_8c_1a344c029c451a00a0a90e20b34569db22" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a344c029c451a00a0a90e20b34569db22" kindref="member">replace_ldouble_vector_values</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>old_value,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>new_value)<sp/>{</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref>[i]<sp/>==<sp/>old_value)<sp/>vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref>[i]<sp/>=<sp/>new_value;</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"></highlight></codeline>
<codeline lineno="1650" refid="vector_8c_1a8b7c3baf36c7ef6deca8011f2d622119" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a8b7c3baf36c7ef6deca8011f2d622119" kindref="member">replace_char_vector_values</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>old_value,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>new_value)<sp/>{</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref>[i]<sp/>==<sp/>old_value)<sp/>vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref>[i]<sp/>=<sp/>new_value;</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1654"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"></highlight></codeline>
<codeline lineno="1657" refid="vector_8c_1a8b8b55713c6eeeba3f8bb8fbbb08ad10" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a8b8b55713c6eeeba3f8bb8fbbb08ad10" kindref="member">replace_uchar_vector_values</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>old_value,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>new_value)<sp/>{</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref>[i]<sp/>==<sp/>old_value)<sp/>vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref>[i]<sp/>=<sp/>new_value;</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1661"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"></highlight></codeline>
<codeline lineno="1664" refid="vector_8c_1ab345b0d10cef3cb87e552791440398e9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ab345b0d10cef3cb87e552791440398e9" kindref="member">replace_bool_vector_values</ref>(<ref refid="structBool" kindref="compound">Bool</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>old_value,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>new_value)<sp/>{</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structBool_1a5445f6ef94d239208dc797c289fded75" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" kindref="member">array</ref>[i]<sp/>==<sp/>old_value)<sp/>vec-&gt;<ref refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" kindref="member">array</ref>[i]<sp/>=<sp/>new_value;</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight></codeline>
<codeline lineno="1671" refid="vector_8c_1a1556bb53212c3c454a2ddb3f4c2f4c8a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a1556bb53212c3c454a2ddb3f4c2f4c8a" kindref="member">replace_string_vector_values</ref>(<ref refid="structString" kindref="compound">String</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*old_value,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*new_value)<sp/>{</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmp;</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structString_1a706ffaf2f520d46074dd99e7896d6673" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>strcmp(vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref>[i],<sp/>old_value);</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a4db2688e1c0d0d477c8a7168d811956d" kindref="member">pop_string_vector_index</ref>(vec,<sp/>i);</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a078616c26d55c1ddb2ec4c551298a4f8" kindref="member">push_string_vector</ref>(vec,<sp/>new_value,<sp/>i);</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1680"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FREE_TYPE_VEC<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"></highlight></codeline>
<codeline lineno="1685" refid="vector_8c_1a8a383d2299a326d3c0ded94c19d73393" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a8a383d2299a326d3c0ded94c19d73393" kindref="member">free_short_vector</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structShort_1a20b9c526866b593e8e1ecdc49515e642" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref>);</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structShort_1af0b6f4e61e69b8a2f74d42b09b421d88" kindref="member">allocated_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Struct<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d<sp/>must<sp/>be<sp/>DYNAMIC\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1695"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"></highlight></codeline>
<codeline lineno="1698" refid="vector_8c_1a3765cd4f6e59bada679e05ea6dacfff5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a3765cd4f6e59bada679e05ea6dacfff5" kindref="member">free_ushort_vector</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structUShort_1a4c5d40034bbd1e9ee0de773d6be0c31e" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref>);</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUShort_1a0ef4541f3fd3fcee1c0f5809341c84d6" kindref="member">allocated_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Struct<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d<sp/>must<sp/>be<sp/>DYNAMIC\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1708"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1710"><highlight class="normal"></highlight></codeline>
<codeline lineno="1711" refid="vector_8c_1ab2c13b705440e4d4d53825bb16929ff6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ab2c13b705440e4d4d53825bb16929ff6" kindref="member">free_int_vector</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structInt_1ae124ac3392878072e49fe64e0d07beff" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref>);</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structInt_1a63bea8755b3ce6be7e83970b9ea3bd68" kindref="member">allocated_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Struct<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d<sp/>must<sp/>be<sp/>DYNAMIC\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1721"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"></highlight></codeline>
<codeline lineno="1724" refid="vector_8c_1a6195f400606be104b4461cd9876f93ce" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a6195f400606be104b4461cd9876f93ce" kindref="member">free_uint_vector</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structUInt_1ab87c8b62b4178bf9bcf59d03b066da1c" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref>);</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUInt_1a05b28efaec93c388e8685403f57a07ce" kindref="member">allocated_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Struct<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d<sp/>must<sp/>be<sp/>DYNAMIC\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1734"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal"></highlight></codeline>
<codeline lineno="1737" refid="vector_8c_1af1ab528ebf7f47a278e3be3b02e9acee" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1af1ab528ebf7f47a278e3be3b02e9acee" kindref="member">free_long_vector</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structLInt_1a7255bafd2fb6310140aebe36d68b9629" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref>);</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLInt_1a21eec79c847025348ad0082aab6dee52" kindref="member">allocated_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Struct<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d<sp/>must<sp/>be<sp/>DYNAMIC\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"></highlight></codeline>
<codeline lineno="1750" refid="vector_8c_1a9a05407a3434648f10f4416a7874150d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a9a05407a3434648f10f4416a7874150d" kindref="member">free_ulong_vector</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structULInt_1abbab1a9c205c4d86fcc53c55174d1515" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref>);</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULInt_1acf325510e03976f12c116ad68c4998ec" kindref="member">allocated_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Struct<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d<sp/>must<sp/>be<sp/>DYNAMIC\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1760"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1762"><highlight class="normal"></highlight></codeline>
<codeline lineno="1763" refid="vector_8c_1af92bc034e6f34814eea1008629f41ef9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1af92bc034e6f34814eea1008629f41ef9" kindref="member">free_llong_vector</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structLLInt_1a2cf879f2b771d70de2ae15401190b50e" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref>);</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLLInt_1a967c631e7b8192f0016845623ae04759" kindref="member">allocated_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Struct<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d<sp/>must<sp/>be<sp/>DYNAMIC\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1773"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"></highlight></codeline>
<codeline lineno="1776" refid="vector_8c_1a605f038b309fb25e53f637c9e9b6e4bd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a605f038b309fb25e53f637c9e9b6e4bd" kindref="member">free_ullong_vector</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structULLInt_1acb153b18423bf9465c6a52aa74745df3" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref>);</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULLInt_1ac6210c003919694e4fccfc5885c8fcb4" kindref="member">allocated_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Struct<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d<sp/>must<sp/>be<sp/>DYNAMIC\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"></highlight></codeline>
<codeline lineno="1789" refid="vector_8c_1aa0efda9f361b9e9219f5afc379c7e6cc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1aa0efda9f361b9e9219f5afc379c7e6cc" kindref="member">free_float_vector</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structFlt_1ad98ce16bf2fff8b16351042bd4135629" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref>);</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structFlt_1a917603eeaae1fb22accbfc8d9252a389" kindref="member">allocated_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Struct<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d<sp/>must<sp/>be<sp/>DYNAMIC\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1799"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"></highlight></codeline>
<codeline lineno="1802" refid="vector_8c_1a0d9577d0256e0e006d1c55a12ba1bffd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a0d9577d0256e0e006d1c55a12ba1bffd" kindref="member">free_double_vector</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structDble_1a593e6de4412f110b4ffe6fd87a62aa56" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref>);</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structDble_1a83cb29dfe09183032473cc7ffe005f5d" kindref="member">allocated_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Struct<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d<sp/>must<sp/>be<sp/>DYNAMIC\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1812"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight></codeline>
<codeline lineno="1815" refid="vector_8c_1a89e6af78e123543fefe3333963de0e83" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a89e6af78e123543fefe3333963de0e83" kindref="member">free_ldouble_vector</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structLDble_1a25a9e54828403acb6e1e565d00a24582" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref>);</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLDble_1a1f0f3fd968cab1acdebf0d43f632633f" kindref="member">allocated_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Struct<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d<sp/>must<sp/>be<sp/>DYNAMIC\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1825"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"></highlight></codeline>
<codeline lineno="1828" refid="vector_8c_1afef1cb622b3f54256849a3b5446a7af4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1afef1cb622b3f54256849a3b5446a7af4" kindref="member">free_char_vector</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structChar_1a7231211c3eec109684271510fb25ffe8" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref>);</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structChar_1ab59977640c7539e5ae251af86d445257" kindref="member">allocated_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Struct<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d<sp/>must<sp/>be<sp/>DYNAMIC\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1838"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="normal"></highlight></codeline>
<codeline lineno="1841" refid="vector_8c_1a9f3fcb3deda563d834c9d3d13f097268" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a9f3fcb3deda563d834c9d3d13f097268" kindref="member">free_uchar_vector</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structUChar_1aa1ea52fa832c84586784bb36c1617e44" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref>);</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUChar_1a69ec79fc44d9f3b1455705e24a819f4b" kindref="member">allocated_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Struct<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d<sp/>must<sp/>be<sp/>DYNAMIC\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1851"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1853"><highlight class="normal"></highlight></codeline>
<codeline lineno="1854" refid="vector_8c_1a5783a319298af13236def83e42f00799" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a5783a319298af13236def83e42f00799" kindref="member">free_bool_vector</ref>(<ref refid="structBool" kindref="compound">Bool</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structBool_1ad781cb2cecf2b060c6337a73ed89def9" kindref="member">dat_type</ref><sp/>==<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(vec-&gt;<ref refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" kindref="member">array</ref>);</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" kindref="member">array</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structBool_1a5445f6ef94d239208dc797c289fded75" kindref="member">active_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structBool_1a4a353f55a013f72befc666e8d0708212" kindref="member">allocated_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Struct<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d<sp/>must<sp/>be<sp/>DYNAMIC\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1864"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"></highlight></codeline>
<codeline lineno="1867" refid="vector_8c_1a2975c4c7c36efebc98b926abfc4ba837" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a2975c4c7c36efebc98b926abfc4ba837" kindref="member">free_string_vector</ref>(<ref refid="structString" kindref="compound">String</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structString_1a706ffaf2f520d46074dd99e7896d6673" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref>[i]);</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref>);</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structString_1a706ffaf2f520d46074dd99e7896d6673" kindref="member">active_length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1876"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight><highlight class="comment">//<sp/>delete_type_stack_duplicates<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"></highlight></codeline>
<codeline lineno="1881" refid="vector_8c_1a35b16d98a38d37826ee118f4860d680a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a35b16d98a38d37826ee118f4860d680a" kindref="member">delete_short_vector_duplicates</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref><sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref>[j]<sp/>==<sp/>vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref>[i])<sp/>{</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a90c0d394579f3950b22adabb66f153e9" kindref="member">pop_short_vector_index</ref>(vec,<sp/>j);</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1890"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1892"><highlight class="normal"></highlight></codeline>
<codeline lineno="1893" refid="vector_8c_1a372a58405f86fa4ef22f53af37408017" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a372a58405f86fa4ef22f53af37408017" kindref="member">delete_ushort_vector_duplicates</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref><sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref>[j]<sp/>==<sp/>vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref>[i])<sp/>{</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1ab5f9826948a1e75b6ffa74b2e801f8c5" kindref="member">pop_ushort_vector_index</ref>(vec,<sp/>j);</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1902"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"></highlight></codeline>
<codeline lineno="1905" refid="vector_8c_1a68a325016f45777566e1eae4b15c4238" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a68a325016f45777566e1eae4b15c4238" kindref="member">delete_int_vector_duplicates</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref><sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref>[j]<sp/>==<sp/>vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref>[i])<sp/>{</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1af0ecebd36b313d07d43f40698bd5508f" kindref="member">pop_int_vector_index</ref>(vec,<sp/>j);</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1914"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1916"><highlight class="normal"></highlight></codeline>
<codeline lineno="1917" refid="vector_8c_1ab5a49e7e86d86796744395431d475f74" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ab5a49e7e86d86796744395431d475f74" kindref="member">delete_uint_vector_duplicates</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref><sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref>[j]<sp/>==<sp/>vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref>[i])<sp/>{</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1aea61eee2cd7481c1d34d13ba4a27e669" kindref="member">pop_uint_vector_index</ref>(vec,<sp/>j);</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1926"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight></codeline>
<codeline lineno="1929" refid="vector_8c_1a10ee633f27cbd6252d41ffd0761f6392" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a10ee633f27cbd6252d41ffd0761f6392" kindref="member">delete_long_vector_duplicates</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref><sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref>[j]<sp/>==<sp/>vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref>[i])<sp/>{</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1ade7d072b4cbbed3560461122ff9bf2d1" kindref="member">pop_long_vector_index</ref>(vec,<sp/>j);</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1938"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1940"><highlight class="normal"></highlight></codeline>
<codeline lineno="1941" refid="vector_8c_1aa7b0890be4e8157712930fedaf437c8a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1aa7b0890be4e8157712930fedaf437c8a" kindref="member">delete_ulong_vector_duplicates</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref><sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref>[j]<sp/>==<sp/>vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref>[i])<sp/>{</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1aee6e8f2b009cc7205dfd8c143b8e9839" kindref="member">pop_ulong_vector_index</ref>(vec,<sp/>j);</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1950"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1952"><highlight class="normal"></highlight></codeline>
<codeline lineno="1953" refid="vector_8c_1a8f895e83e3b4e24dfdd253508da61875" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a8f895e83e3b4e24dfdd253508da61875" kindref="member">delete_llong_vector_duplicates</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref><sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref>[j]<sp/>==<sp/>vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref>[i])<sp/>{</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a6475916b10de913b8859fbd0b8312557" kindref="member">pop_llong_vector_index</ref>(vec,<sp/>j);</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1962"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1964"><highlight class="normal"></highlight></codeline>
<codeline lineno="1965" refid="vector_8c_1a91794ceff19b304073f15ca82fe38b0b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a91794ceff19b304073f15ca82fe38b0b" kindref="member">delete_ullong_vector_duplicates</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref><sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref>[j]<sp/>==<sp/>vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref>[i])<sp/>{</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a52f4d32e9312b40967f4c0ee3de88e7a" kindref="member">pop_ullong_vector_index</ref>(vec,<sp/>j);</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1974"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1976"><highlight class="normal"></highlight></codeline>
<codeline lineno="1977" refid="vector_8c_1a49e7b8e0e17f4570f95875965ea8c2d6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a49e7b8e0e17f4570f95875965ea8c2d6" kindref="member">delete_float_vector_duplicates</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref><sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref>[j]<sp/>==<sp/>vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref>[i])<sp/>{</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a7f179d98deb7852196afc7e3d26ef06d" kindref="member">pop_float_vector_index</ref>(vec,<sp/>j);</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1986"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"></highlight></codeline>
<codeline lineno="1989" refid="vector_8c_1a0bf0ceecb4ef742811c3b2ed8384d432" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a0bf0ceecb4ef742811c3b2ed8384d432" kindref="member">delete_double_vector_duplicates</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref><sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref>[j]<sp/>==<sp/>vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref>[i])<sp/>{</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a8d2545eb603560d67e5c481075e5d0fc" kindref="member">pop_double_vector_index</ref>(vec,<sp/>j);</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1998"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal"></highlight></codeline>
<codeline lineno="2001" refid="vector_8c_1a915b5e5eff06f5a04ff068c94cdcffb4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a915b5e5eff06f5a04ff068c94cdcffb4" kindref="member">delete_ldouble_vector_duplicates</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref><sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref>[j]<sp/>==<sp/>vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref>[i])<sp/>{</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a3964e5480d290ac44a95680e52706f9d" kindref="member">pop_ldouble_vector_index</ref>(vec,<sp/>j);</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2010"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2012"><highlight class="normal"></highlight></codeline>
<codeline lineno="2013" refid="vector_8c_1a5a01cb2f66c78b55858a0941ad9459af" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a5a01cb2f66c78b55858a0941ad9459af" kindref="member">delete_char_vector_duplicates</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref><sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref>[j]<sp/>==<sp/>vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref>[i])<sp/>{</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a4f9d1488d50bc3889fc04afc18fa9958" kindref="member">pop_char_vector_index</ref>(vec,<sp/>j);</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2022"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2024"><highlight class="normal"></highlight></codeline>
<codeline lineno="2025" refid="vector_8c_1a51740972d62e96e248d8a07eb65e48aa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a51740972d62e96e248d8a07eb65e48aa" kindref="member">delete_uchar_vector_duplicates</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref><sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref>[j]<sp/>==<sp/>vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref>[i])<sp/>{</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a7527a193c89c32c07eba99e8abc08574" kindref="member">pop_uchar_vector_index</ref>(vec,<sp/>j);</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2034"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2036"><highlight class="normal"></highlight></codeline>
<codeline lineno="2037" refid="vector_8c_1a1fe7315ba2394e61b43b99bfc765bd75" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a1fe7315ba2394e61b43b99bfc765bd75" kindref="member">delete_bool_vector_duplicates</ref>(<ref refid="structBool" kindref="compound">Bool</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structBool_1a5445f6ef94d239208dc797c289fded75" kindref="member">active_length</ref><sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>vec-&gt;<ref refid="structBool_1a5445f6ef94d239208dc797c289fded75" kindref="member">active_length</ref>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" kindref="member">array</ref>[j]<sp/>==<sp/>vec-&gt;<ref refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" kindref="member">array</ref>[i])<sp/>{</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a69479bf6e334f44f372305c8b1b13bb3" kindref="member">pop_bool_vector_index</ref>(vec,<sp/>j);</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2046"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2048"><highlight class="normal"></highlight></codeline>
<codeline lineno="2049" refid="vector_8c_1a1b3482060f9c607f98dbef4845db335f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a1b3482060f9c607f98dbef4845db335f" kindref="member">delete_string_vector_duplicates</ref>(<ref refid="structString" kindref="compound">String</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test;</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structString_1a706ffaf2f520d46074dd99e7896d6673" kindref="member">active_length</ref><sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>vec-&gt;<ref refid="structString_1a706ffaf2f520d46074dd99e7896d6673" kindref="member">active_length</ref>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test<sp/>=<sp/>strcmp(vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref>[i],<sp/>vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref>[j]);</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a4db2688e1c0d0d477c8a7168d811956d" kindref="member">pop_string_vector_index</ref>(vec,<sp/>j);</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2060"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2062"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"></highlight><highlight class="comment">//<sp/>REVERSE_TYPE<sp/>VEC<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"></highlight></codeline>
<codeline lineno="2065" refid="vector_8c_1a6388f663263c0c5a219bc2da551d0584" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a6388f663263c0c5a219bc2da551d0584" kindref="member">reverse_short_vector</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&lt;<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref>[start];</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref>[end];</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp=<sp/>*a;</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++start;</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--end;</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2077"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2079"><highlight class="normal"></highlight></codeline>
<codeline lineno="2080" refid="vector_8c_1a15f75e9b6b4192aa83d95635419865da" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a15f75e9b6b4192aa83d95635419865da" kindref="member">reverse_ushort_vector</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&lt;<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref>[start];</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref>[end];</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp=<sp/>*a;</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++start;</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--end;</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2092"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2094"><highlight class="normal"></highlight></codeline>
<codeline lineno="2095" refid="vector_8c_1a0ee6d80508a610096b84893a0edd7e82" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a0ee6d80508a610096b84893a0edd7e82" kindref="member">reverse_int_vector</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&lt;<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref>[start];</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref>[end];</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp=<sp/>*a;</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++start;</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--end;</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2109"><highlight class="normal"></highlight></codeline>
<codeline lineno="2110" refid="vector_8c_1a58e127cf5386ca2152ebafcf4dbb8bbd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a58e127cf5386ca2152ebafcf4dbb8bbd" kindref="member">reverse_uint_vector</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unsigned<sp/>int<sp/>*a<sp/>=<sp/>&amp;vec-&gt;array[start];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unsigned<sp/>int<sp/>*b<sp/>=<sp/>&amp;vec-&gt;array[end];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&lt;<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref>[start];</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref>[end];</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp=<sp/>*a;</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++start;</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--end;</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2126"><highlight class="normal"></highlight></codeline>
<codeline lineno="2127" refid="vector_8c_1a0d89b67e906a169f63e1bfc679df018f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a0d89b67e906a169f63e1bfc679df018f" kindref="member">reverse_long_vector</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&lt;<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref>[start];</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref>[end];</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp=<sp/>*a;</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++start;</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--end;</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2141"><highlight class="normal"></highlight></codeline>
<codeline lineno="2142" refid="vector_8c_1a6196a5bfffe22d6493b2bda77a9340fb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a6196a5bfffe22d6493b2bda77a9340fb" kindref="member">reverse_ulong_vector</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&lt;<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref>[start];</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref>[end];</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp=<sp/>*a;</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++start;</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--end;</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2156"><highlight class="normal"></highlight></codeline>
<codeline lineno="2157" refid="vector_8c_1a3247bcffd4ad7a9f75c9a2e88ff7bd81" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a3247bcffd4ad7a9f75c9a2e88ff7bd81" kindref="member">reverse_llong_vector</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&lt;<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref>[start];</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref>[end];</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp=<sp/>*a;</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++start;</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--end;</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2171"><highlight class="normal"></highlight></codeline>
<codeline lineno="2172" refid="vector_8c_1aa77d55a8f5e4ab149edb6c75d98a94ce" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1aa77d55a8f5e4ab149edb6c75d98a94ce" kindref="member">reverse_ullong_vector</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&lt;<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref>[start];</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref>[end];</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp=<sp/>*a;</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++start;</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--end;</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2186"><highlight class="normal"></highlight></codeline>
<codeline lineno="2187" refid="vector_8c_1a086bbd995dc83d50532944330a44c450" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a086bbd995dc83d50532944330a44c450" kindref="member">reverse_float_vector</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&lt;<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref>[start];</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref>[end];</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>temp=<sp/>*a;</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++start;</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--end;</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2201"><highlight class="normal"></highlight></codeline>
<codeline lineno="2202" refid="vector_8c_1a628e48950294512d38556f8b194284d4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a628e48950294512d38556f8b194284d4" kindref="member">reverse_double_vector</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&lt;<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref>[start];</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref>[end];</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>temp=<sp/>*a;</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++start;</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--end;</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2216"><highlight class="normal"></highlight></codeline>
<codeline lineno="2217" refid="vector_8c_1a8a72b2219830bacf2a5ec926241ed924" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a8a72b2219830bacf2a5ec926241ed924" kindref="member">reverse_ldouble_vector</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&lt;<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref>[start];</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref>[end];</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>temp=<sp/>*a;</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++start;</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--end;</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal"></highlight></codeline>
<codeline lineno="2232" refid="vector_8c_1a06faa32f223a79c02cb771b19cc02a07" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a06faa32f223a79c02cb771b19cc02a07" kindref="member">reverse_char_vector</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&lt;<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref>[start];</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref>[end];</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>temp=<sp/>*a;</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++start;</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--end;</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2246"><highlight class="normal"></highlight></codeline>
<codeline lineno="2247" refid="vector_8c_1a42deacd361fac959a84262a54ebddcb0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a42deacd361fac959a84262a54ebddcb0" kindref="member">reverse_uchar_vector</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&lt;<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref>[start];</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref>[end];</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>temp=<sp/>*a;</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++start;</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--end;</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2261"><highlight class="normal"></highlight></codeline>
<codeline lineno="2262" refid="vector_8c_1a9b58a773830487b8a8f1973221e93366" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a9b58a773830487b8a8f1973221e93366" kindref="member">reverse_bool_vector</ref>(<ref refid="structBool" kindref="compound">Bool</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>vec-&gt;<ref refid="structBool_1a5445f6ef94d239208dc797c289fded75" kindref="member">active_length</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&lt;<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;vec-&gt;<ref refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" kindref="member">array</ref>[start];</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;vec-&gt;<ref refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" kindref="member">array</ref>[end];</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>temp=<sp/>*a;</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++start;</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--end;</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2276"><highlight class="normal"></highlight></codeline>
<codeline lineno="2277" refid="vector_8c_1a6297710c0ac2122db93e47a260e96ad8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a6297710c0ac2122db93e47a260e96ad8" kindref="member">reverse_string_vector</ref>(<ref refid="structString" kindref="compound">String</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>vec-&gt;<ref refid="structString_1a706ffaf2f520d46074dd99e7896d6673" kindref="member">active_length</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&lt;<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a078616c26d55c1ddb2ec4c551298a4f8" kindref="member">push_string_vector</ref>(vec,<sp/>vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref>[end],<sp/>start);</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a078616c26d55c1ddb2ec4c551298a4f8" kindref="member">push_string_vector</ref>(vec,<sp/>vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref>[start+1],<sp/>end+1);</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a4db2688e1c0d0d477c8a7168d811956d" kindref="member">pop_string_vector_index</ref>(vec,<sp/>start+1);</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a4db2688e1c0d0d477c8a7168d811956d" kindref="member">pop_string_vector_index</ref>(vec,<sp/>end+1);</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++start;</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--end;</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2290"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2291"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SORT_TYPE<sp/>VEC<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2292"><highlight class="normal"></highlight></codeline>
<codeline lineno="2293" refid="vector_8c_1a733f65fe54a66141bb719d0e949f61d3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a733f65fe54a66141bb719d0e949f61d3" kindref="member">partition_short_vec</ref>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order)<sp/>{</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>low;</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>high;</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pivot<sp/>=<sp/>arr[low];</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>j)</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>high<sp/>&amp;&amp;<sp/>pivot<sp/>&gt;=<sp/>arr[i]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" kindref="member">FORWARD</ref>)</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>low<sp/>&amp;&amp;<sp/>pivot<sp/>&lt;<sp/>arr[j]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" kindref="member">FORWARD</ref>)</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>high<sp/>&amp;&amp;<sp/>pivot<sp/>&lt;=<sp/>arr[i]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" kindref="member">REVERSE</ref>)</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>low<sp/>&amp;&amp;<sp/>pivot<sp/>&gt;<sp/>arr[j]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" kindref="member">REVERSE</ref>)</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;arr[i];</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;arr[j];</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;arr[low];</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;arr[j];</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="2321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"></highlight></codeline>
<codeline lineno="2323" refid="vector_8c_1a04f50afe6c127edeea202b08ad65f36a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a04f50afe6c127edeea202b08ad65f36a" kindref="member">sort_short_vector</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order)<sp/>{</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(low<sp/>&lt;<sp/>high)</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pivot<sp/>=<sp/><ref refid="vector_8c_1a733f65fe54a66141bb719d0e949f61d3" kindref="member">partition_short_vec</ref>(vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref>,<sp/>low,<sp/>high,<sp/>order);</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a04f50afe6c127edeea202b08ad65f36a" kindref="member">sort_short_vector</ref>(vec,<sp/>low,<sp/>pivot<sp/>-<sp/>1,<sp/>order);</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a04f50afe6c127edeea202b08ad65f36a" kindref="member">sort_short_vector</ref>(vec,<sp/>pivot<sp/>+<sp/>1,<sp/>high,<sp/>order);</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2332"><highlight class="normal"></highlight></codeline>
<codeline lineno="2333" refid="vector_8c_1ac3a8bea84161a65f8360d4eeb093cbd3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ac3a8bea84161a65f8360d4eeb093cbd3" kindref="member">partition_ushort_vec</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order)<sp/>{</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>low;</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>high;</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pivot<sp/>=<sp/>arr[low];</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>j)</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>high<sp/>&amp;&amp;<sp/>pivot<sp/>&gt;=<sp/>arr[i]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" kindref="member">FORWARD</ref>)</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>low<sp/>&amp;&amp;<sp/>pivot<sp/>&lt;<sp/>arr[j]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" kindref="member">FORWARD</ref>)</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>high<sp/>&amp;&amp;<sp/>pivot<sp/>&lt;=<sp/>arr[i]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" kindref="member">REVERSE</ref>)</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>low<sp/>&amp;&amp;<sp/>pivot<sp/>&gt;<sp/>arr[j]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" kindref="member">REVERSE</ref>)</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;arr[i];</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;arr[j];</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;arr[low];</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;arr[j];</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="2361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"></highlight></codeline>
<codeline lineno="2363" refid="vector_8c_1a68df688dc04c74d9e826b629ef0f98c3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a68df688dc04c74d9e826b629ef0f98c3" kindref="member">sort_ushort_vector</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order)<sp/>{</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(low<sp/>&lt;<sp/>high)</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pivot<sp/>=<sp/><ref refid="vector_8c_1ac3a8bea84161a65f8360d4eeb093cbd3" kindref="member">partition_ushort_vec</ref>(vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref>,<sp/>low,<sp/>high,<sp/>order);</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a68df688dc04c74d9e826b629ef0f98c3" kindref="member">sort_ushort_vector</ref>(vec,<sp/>low,<sp/>pivot<sp/>-<sp/>1,<sp/>order);</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a68df688dc04c74d9e826b629ef0f98c3" kindref="member">sort_ushort_vector</ref>(vec,<sp/>pivot<sp/>+<sp/>1,<sp/>high,<sp/>order);</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2372"><highlight class="normal"></highlight></codeline>
<codeline lineno="2373" refid="vector_8c_1a9291e007042fe27de97889aae04af104" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a9291e007042fe27de97889aae04af104" kindref="member">partition_int_vec</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order)<sp/>{</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>low;</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>high;</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pivot<sp/>=<sp/>arr[low];</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>j)</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>high<sp/>&amp;&amp;<sp/>pivot<sp/>&gt;=<sp/>arr[i]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" kindref="member">FORWARD</ref>)</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>low<sp/>&amp;&amp;<sp/>pivot<sp/>&lt;<sp/>arr[j]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" kindref="member">FORWARD</ref>)</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>high<sp/>&amp;&amp;<sp/>pivot<sp/>&lt;=<sp/>arr[i]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" kindref="member">REVERSE</ref>)</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>high<sp/>&amp;&amp;<sp/>pivot<sp/>&gt;<sp/>arr[j]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" kindref="member">REVERSE</ref>)</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;arr[i];</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;arr[j];</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;arr[low];</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;arr[j];</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="2401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"></highlight></codeline>
<codeline lineno="2403" refid="vector_8c_1a722d90a04d08a5ece84ba7a2b8d04d6d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a722d90a04d08a5ece84ba7a2b8d04d6d" kindref="member">sort_int_vector</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order)<sp/>{</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(low<sp/>&lt;<sp/>high)</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pivot<sp/>=<sp/><ref refid="vector_8c_1a9291e007042fe27de97889aae04af104" kindref="member">partition_int_vec</ref>(vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref>,<sp/>low,<sp/>high,<sp/>order);</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a722d90a04d08a5ece84ba7a2b8d04d6d" kindref="member">sort_int_vector</ref>(vec,<sp/>low,<sp/>pivot<sp/>-<sp/>1,<sp/>order);</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a722d90a04d08a5ece84ba7a2b8d04d6d" kindref="member">sort_int_vector</ref>(vec,<sp/>pivot<sp/>+<sp/>1,<sp/>high,<sp/>order);</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2412"><highlight class="normal"></highlight></codeline>
<codeline lineno="2413" refid="vector_8c_1af66367b43aad62db18cd1e46cc4b7cec" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1af66367b43aad62db18cd1e46cc4b7cec" kindref="member">partition_uint_vec</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order)<sp/>{</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>low;</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>high;</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pivot<sp/>=<sp/>arr[low];</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>j)</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>high<sp/>&amp;&amp;<sp/>pivot<sp/>&gt;=<sp/>arr[i]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" kindref="member">FORWARD</ref>)</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>low<sp/>&amp;&amp;<sp/>pivot<sp/>&lt;<sp/>arr[j]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" kindref="member">FORWARD</ref>)</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>high<sp/>&amp;&amp;<sp/>pivot<sp/>&lt;=<sp/>arr[i]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" kindref="member">REVERSE</ref>)</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>low<sp/>&amp;&amp;<sp/>pivot<sp/>&gt;<sp/>arr[j]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" kindref="member">REVERSE</ref>)</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;arr[i];</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;arr[j];</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;arr[low];</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;arr[j];</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="2441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"></highlight></codeline>
<codeline lineno="2443" refid="vector_8c_1a451f6cb1a5b4b2e77c1170c85656c3c6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a451f6cb1a5b4b2e77c1170c85656c3c6" kindref="member">sort_uint_vector</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order)<sp/>{</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(low<sp/>&lt;<sp/>high)</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pivot<sp/>=<sp/><ref refid="vector_8c_1af66367b43aad62db18cd1e46cc4b7cec" kindref="member">partition_uint_vec</ref>(vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref>,<sp/>low,<sp/>high,<sp/>order);</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a451f6cb1a5b4b2e77c1170c85656c3c6" kindref="member">sort_uint_vector</ref>(vec,<sp/>low,<sp/>pivot<sp/>-<sp/>1,<sp/>order);</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a451f6cb1a5b4b2e77c1170c85656c3c6" kindref="member">sort_uint_vector</ref>(vec,<sp/>pivot<sp/>+<sp/>1,<sp/>high,<sp/>order);</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2452"><highlight class="normal"></highlight></codeline>
<codeline lineno="2453" refid="vector_8c_1a71e22c969cc1802f99227e9bcf1d700c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a71e22c969cc1802f99227e9bcf1d700c" kindref="member">partition_long_vec</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order)<sp/>{</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>low;</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>high;</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pivot<sp/>=<sp/>arr[low];</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>j)</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>high<sp/>&amp;&amp;<sp/>pivot<sp/>&gt;=<sp/>arr[i]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" kindref="member">FORWARD</ref>)</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>low<sp/>&amp;&amp;<sp/>pivot<sp/>&lt;<sp/>arr[j]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" kindref="member">FORWARD</ref>)</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>high<sp/>&amp;&amp;<sp/>pivot<sp/>&lt;=<sp/>arr[i]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" kindref="member">REVERSE</ref>)</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>low<sp/>&amp;&amp;<sp/>pivot<sp/>&gt;<sp/>arr[j]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" kindref="member">REVERSE</ref>)</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;arr[i];</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;arr[j];</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;arr[low];</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;arr[j];</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="2481"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"></highlight></codeline>
<codeline lineno="2483" refid="vector_8c_1a573e6f77db28f1a05eefd8a982f850c7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a573e6f77db28f1a05eefd8a982f850c7" kindref="member">sort_long_vector</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order)<sp/>{</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(low<sp/>&lt;<sp/>high)</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pivot<sp/>=<sp/><ref refid="vector_8c_1a71e22c969cc1802f99227e9bcf1d700c" kindref="member">partition_long_vec</ref>(vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref>,<sp/>low,<sp/>high,<sp/>order);</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a573e6f77db28f1a05eefd8a982f850c7" kindref="member">sort_long_vector</ref>(vec,<sp/>low,<sp/>pivot<sp/>-<sp/>1,<sp/>order);</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a573e6f77db28f1a05eefd8a982f850c7" kindref="member">sort_long_vector</ref>(vec,<sp/>pivot<sp/>+<sp/>1,<sp/>high,<sp/>order);</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2492"><highlight class="normal"></highlight></codeline>
<codeline lineno="2493" refid="vector_8c_1a2c22f32a95c9b5810e941f4f646cc3a6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a2c22f32a95c9b5810e941f4f646cc3a6" kindref="member">partition_ulong_vec</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order)<sp/>{</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>low;</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>high;</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pivot<sp/>=<sp/>arr[low];</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>j)</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>high<sp/>&amp;&amp;<sp/>pivot<sp/>&gt;=<sp/>arr[i]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" kindref="member">FORWARD</ref>)</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>low<sp/>&amp;&amp;<sp/>pivot<sp/>&lt;<sp/>arr[j]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" kindref="member">FORWARD</ref>)</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>high<sp/>&amp;&amp;<sp/>pivot<sp/>&lt;=<sp/>arr[i]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" kindref="member">REVERSE</ref>)</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>low<sp/>&amp;&amp;<sp/>pivot<sp/>&gt;<sp/>arr[j]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" kindref="member">REVERSE</ref>)</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;arr[i];</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;arr[j];</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;arr[low];</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;arr[j];</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="2521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"></highlight></codeline>
<codeline lineno="2523" refid="vector_8c_1adf53d931d4b9c3ab9d62298b6d3df5cd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1adf53d931d4b9c3ab9d62298b6d3df5cd" kindref="member">sort_ulong_vector</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order)<sp/>{</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(low<sp/>&lt;<sp/>high)</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pivot<sp/>=<sp/><ref refid="vector_8c_1a2c22f32a95c9b5810e941f4f646cc3a6" kindref="member">partition_ulong_vec</ref>(vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref>,<sp/>low,<sp/>high,<sp/>order);</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1adf53d931d4b9c3ab9d62298b6d3df5cd" kindref="member">sort_ulong_vector</ref>(vec,<sp/>low,<sp/>pivot<sp/>-<sp/>1,<sp/>order);</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1adf53d931d4b9c3ab9d62298b6d3df5cd" kindref="member">sort_ulong_vector</ref>(vec,<sp/>pivot<sp/>+<sp/>1,<sp/>high,<sp/>order);</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2532"><highlight class="normal"></highlight></codeline>
<codeline lineno="2533" refid="vector_8c_1a4004e007143a87427417e8da73d54230" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a4004e007143a87427417e8da73d54230" kindref="member">partition_llong_vec</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order)<sp/>{</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>low;</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>high;</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pivot<sp/>=<sp/>arr[low];</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>j)</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>high<sp/>&amp;&amp;<sp/>pivot<sp/>&gt;=<sp/>arr[i]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" kindref="member">FORWARD</ref>)</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>low<sp/>&amp;&amp;<sp/>pivot<sp/>&lt;<sp/>arr[j]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" kindref="member">FORWARD</ref>)</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>high<sp/>&amp;&amp;<sp/>pivot<sp/>&lt;=<sp/>arr[i]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" kindref="member">REVERSE</ref>)</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>low<sp/>&amp;&amp;<sp/>pivot<sp/>&gt;<sp/>arr[j]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" kindref="member">REVERSE</ref>)</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;arr[i];</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;arr[j];</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;arr[low];</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;arr[j];</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="2561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"></highlight></codeline>
<codeline lineno="2563" refid="vector_8c_1ab1183f9c1a6c8a6d60b4457421e3072a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ab1183f9c1a6c8a6d60b4457421e3072a" kindref="member">sort_llong_vector</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order)<sp/>{</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(low<sp/>&lt;<sp/>high)</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pivot<sp/>=<sp/><ref refid="vector_8c_1a4004e007143a87427417e8da73d54230" kindref="member">partition_llong_vec</ref>(vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref>,<sp/>low,<sp/>high,<sp/>order);</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1ab1183f9c1a6c8a6d60b4457421e3072a" kindref="member">sort_llong_vector</ref>(vec,<sp/>low,<sp/>pivot<sp/>-<sp/>1,<sp/>order);</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1ab1183f9c1a6c8a6d60b4457421e3072a" kindref="member">sort_llong_vector</ref>(vec,<sp/>pivot<sp/>+<sp/>1,<sp/>high,<sp/>order);</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2570"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2572"><highlight class="normal"></highlight></codeline>
<codeline lineno="2573" refid="vector_8c_1ae3896d0e36902ed7dbe6ff6be0ad0bdb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ae3896d0e36902ed7dbe6ff6be0ad0bdb" kindref="member">partition_ullong_vec</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order)<sp/>{</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>low;</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>high;</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pivot<sp/>=<sp/>arr[low];</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>j)</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>high<sp/>&amp;&amp;<sp/>pivot<sp/>&gt;=<sp/>arr[i]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" kindref="member">FORWARD</ref>)</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>low<sp/>&amp;&amp;<sp/>pivot<sp/>&lt;<sp/>arr[j]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" kindref="member">FORWARD</ref>)</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>high<sp/>&amp;&amp;<sp/>pivot<sp/>&lt;=<sp/>arr[i]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" kindref="member">REVERSE</ref>)</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>low<sp/>&amp;&amp;<sp/>pivot<sp/>&gt;<sp/>arr[j]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" kindref="member">REVERSE</ref>)</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;arr[i];</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;arr[j];</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;arr[low];</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;arr[j];</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="2601"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"></highlight></codeline>
<codeline lineno="2603" refid="vector_8c_1a3d45fbf7b754bf4bad8be3cbb6241a84" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a3d45fbf7b754bf4bad8be3cbb6241a84" kindref="member">sort_ullong_vector</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order)<sp/>{</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(low<sp/>&lt;<sp/>high)</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pivot<sp/>=<sp/><ref refid="vector_8c_1ae3896d0e36902ed7dbe6ff6be0ad0bdb" kindref="member">partition_ullong_vec</ref>(vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref>,<sp/>low,<sp/>high,<sp/>order);</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a3d45fbf7b754bf4bad8be3cbb6241a84" kindref="member">sort_ullong_vector</ref>(vec,<sp/>low,<sp/>pivot<sp/>-<sp/>1,<sp/>order);</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a3d45fbf7b754bf4bad8be3cbb6241a84" kindref="member">sort_ullong_vector</ref>(vec,<sp/>pivot<sp/>+<sp/>1,<sp/>high,<sp/>order);</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2610"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2612"><highlight class="normal"></highlight></codeline>
<codeline lineno="2613" refid="vector_8c_1ab0096154a48a231a8822d6fc801374f2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ab0096154a48a231a8822d6fc801374f2" kindref="member">partition_float_vec</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order)<sp/>{</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>low;</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>high;</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>pivot<sp/>=<sp/>arr[low];</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>j)</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>high<sp/>&amp;&amp;<sp/>pivot<sp/>&gt;=<sp/>arr[i]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" kindref="member">FORWARD</ref>)</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>low<sp/>&amp;&amp;<sp/>pivot<sp/>&lt;<sp/>arr[j]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" kindref="member">FORWARD</ref>)</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>high<sp/>&amp;&amp;<sp/>pivot<sp/>&lt;=<sp/>arr[i]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" kindref="member">REVERSE</ref>)</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>low<sp/>&amp;&amp;<sp/>pivot<sp/>&gt;<sp/>arr[j]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" kindref="member">REVERSE</ref>)</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;arr[i];</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;arr[j];</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;arr[low];</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;arr[j];</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="2641"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"></highlight></codeline>
<codeline lineno="2643" refid="vector_8c_1aa3e927c35eb4eb79cb87d6df026e01a1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1aa3e927c35eb4eb79cb87d6df026e01a1" kindref="member">sort_float_vector</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order)<sp/>{</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(low<sp/>&lt;<sp/>high)</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pivot<sp/>=<sp/><ref refid="vector_8c_1ab0096154a48a231a8822d6fc801374f2" kindref="member">partition_float_vec</ref>(vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref>,<sp/>low,<sp/>high,<sp/>order);</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1aa3e927c35eb4eb79cb87d6df026e01a1" kindref="member">sort_float_vector</ref>(vec,<sp/>low,<sp/>pivot<sp/>-<sp/>1,<sp/>order);</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1aa3e927c35eb4eb79cb87d6df026e01a1" kindref="member">sort_float_vector</ref>(vec,<sp/>pivot<sp/>+<sp/>1,<sp/>high,<sp/>order);</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2652"><highlight class="normal"></highlight></codeline>
<codeline lineno="2653" refid="vector_8c_1a4e98e06a0ba8a79c81fece259b4bba7a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a4e98e06a0ba8a79c81fece259b4bba7a" kindref="member">partition_double_vec</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order)<sp/>{</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>low;</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>high;</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pivot<sp/>=<sp/>arr[low];</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>j)</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>high<sp/>&amp;&amp;<sp/>pivot<sp/>&gt;=<sp/>arr[i]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" kindref="member">FORWARD</ref>)</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>low<sp/>&amp;&amp;<sp/>pivot<sp/>&lt;<sp/>arr[j]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" kindref="member">FORWARD</ref>)</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>high<sp/>&amp;&amp;<sp/>pivot<sp/>&lt;=<sp/>arr[i]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" kindref="member">REVERSE</ref>)</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>low<sp/>&amp;&amp;<sp/>pivot<sp/>&gt;<sp/>arr[j]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" kindref="member">REVERSE</ref>)</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;arr[i];</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;arr[j];</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;arr[low];</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;arr[j];</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="2681"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"></highlight></codeline>
<codeline lineno="2683" refid="vector_8c_1aa461bbfa3be53bc5dc4c56c94fb7fa62" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1aa461bbfa3be53bc5dc4c56c94fb7fa62" kindref="member">sort_double_vector</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order)<sp/>{</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(low<sp/>&lt;<sp/>high)</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pivot<sp/>=<sp/><ref refid="vector_8c_1a4e98e06a0ba8a79c81fece259b4bba7a" kindref="member">partition_double_vec</ref>(vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref>,<sp/>low,<sp/>high,<sp/>order);</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1aa461bbfa3be53bc5dc4c56c94fb7fa62" kindref="member">sort_double_vector</ref>(vec,<sp/>low,<sp/>pivot<sp/>-<sp/>1,<sp/>order);</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1aa461bbfa3be53bc5dc4c56c94fb7fa62" kindref="member">sort_double_vector</ref>(vec,<sp/>pivot<sp/>+<sp/>1,<sp/>high,<sp/>order);</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2690"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2692"><highlight class="normal"></highlight></codeline>
<codeline lineno="2693" refid="vector_8c_1a849b2e9bd838ba45444b89a094e09c93" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a849b2e9bd838ba45444b89a094e09c93" kindref="member">partition_ldouble_vec</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order)<sp/>{</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>low;</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>high;</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pivot<sp/>=<sp/>arr[low];</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>j)</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>high<sp/>&amp;&amp;<sp/>pivot<sp/>&gt;=<sp/>arr[i]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" kindref="member">FORWARD</ref>)</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>low<sp/>&amp;&amp;<sp/>pivot<sp/>&lt;<sp/>arr[j]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" kindref="member">FORWARD</ref>)</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>high<sp/>&amp;&amp;<sp/>pivot<sp/>&lt;=<sp/>arr[i]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" kindref="member">REVERSE</ref>)</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>low<sp/>&amp;&amp;<sp/>pivot<sp/>&gt;<sp/>arr[j]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" kindref="member">REVERSE</ref>)</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;arr[i];</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;arr[j];</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;arr[low];</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;arr[j];</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="2721"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"></highlight></codeline>
<codeline lineno="2723" refid="vector_8c_1a3745eaf35ed1dfbae01e83d5b93e185d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a3745eaf35ed1dfbae01e83d5b93e185d" kindref="member">sort_ldouble_vector</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order)<sp/>{</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(low<sp/>&lt;<sp/>high)</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pivot<sp/>=<sp/><ref refid="vector_8c_1a849b2e9bd838ba45444b89a094e09c93" kindref="member">partition_ldouble_vec</ref>(vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref>,<sp/>low,<sp/>high,<sp/>order);</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a3745eaf35ed1dfbae01e83d5b93e185d" kindref="member">sort_ldouble_vector</ref>(vec,<sp/>low,<sp/>pivot<sp/>-<sp/>1,<sp/>order);</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a3745eaf35ed1dfbae01e83d5b93e185d" kindref="member">sort_ldouble_vector</ref>(vec,<sp/>pivot<sp/>+<sp/>1,<sp/>high,<sp/>order);</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2730"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2732"><highlight class="normal"></highlight></codeline>
<codeline lineno="2733" refid="vector_8c_1a57c275128b0df646fc41ada5fd04777c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a57c275128b0df646fc41ada5fd04777c" kindref="member">partition_char_vec</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order)<sp/>{</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>low;</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>high;</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pivot<sp/>=<sp/>arr[low];</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>j)</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>high<sp/>&amp;&amp;<sp/>pivot<sp/>&gt;=<sp/>arr[i]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" kindref="member">FORWARD</ref>)</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>low<sp/>&amp;&amp;<sp/>pivot<sp/>&lt;<sp/>arr[j]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" kindref="member">FORWARD</ref>)</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>high<sp/>&amp;&amp;<sp/>pivot<sp/>&lt;=<sp/>arr[i]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" kindref="member">REVERSE</ref>)</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>low<sp/>&amp;&amp;<sp/>pivot<sp/>&gt;<sp/>arr[j]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" kindref="member">REVERSE</ref>)</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;arr[i];</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;arr[j];</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;arr[low];</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;arr[j];</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="2761"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"></highlight></codeline>
<codeline lineno="2763" refid="vector_8c_1a0c29cab75728310a3b5b78681af2df21" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a0c29cab75728310a3b5b78681af2df21" kindref="member">sort_char_vector</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order)<sp/>{</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(low<sp/>&lt;<sp/>high)</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pivot<sp/>=<sp/><ref refid="vector_8c_1a57c275128b0df646fc41ada5fd04777c" kindref="member">partition_char_vec</ref>(vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref>,<sp/>low,<sp/>high,<sp/>order);</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a0c29cab75728310a3b5b78681af2df21" kindref="member">sort_char_vector</ref>(vec,<sp/>low,<sp/>pivot<sp/>-<sp/>1,<sp/>order);</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a0c29cab75728310a3b5b78681af2df21" kindref="member">sort_char_vector</ref>(vec,<sp/>pivot<sp/>+<sp/>1,<sp/>high,<sp/>order);</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2770"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2772"><highlight class="normal"></highlight></codeline>
<codeline lineno="2773" refid="vector_8c_1aa8bc922ebe7bc36d428a6578886c3e37" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1aa8bc922ebe7bc36d428a6578886c3e37" kindref="member">partition_bool_vec</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order)<sp/>{</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>low;</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>high;</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pivot<sp/>=<sp/>arr[low];</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>j)</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>high<sp/>&amp;&amp;<sp/>pivot<sp/>&gt;=<sp/>arr[i]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" kindref="member">FORWARD</ref>)</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>low<sp/>&amp;&amp;<sp/>pivot<sp/>&lt;<sp/>arr[j]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" kindref="member">FORWARD</ref>)</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>high<sp/>&amp;&amp;<sp/>pivot<sp/>&lt;=<sp/>arr[i]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" kindref="member">REVERSE</ref>)</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>low<sp/>&amp;&amp;<sp/>pivot<sp/>&gt;<sp/>arr[j]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" kindref="member">REVERSE</ref>)</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;arr[i];</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;arr[j];</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;arr[low];</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;arr[j];</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="2801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"></highlight></codeline>
<codeline lineno="2803" refid="vector_8c_1a68744cde4b7c17a0305d9cf512494a20" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a68744cde4b7c17a0305d9cf512494a20" kindref="member">sort_bool_vector</ref>(<ref refid="structBool" kindref="compound">Bool</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order)<sp/>{</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(low<sp/>&lt;<sp/>high)</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pivot<sp/>=<sp/><ref refid="vector_8c_1aa8bc922ebe7bc36d428a6578886c3e37" kindref="member">partition_bool_vec</ref>(vec-&gt;<ref refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" kindref="member">array</ref>,<sp/>low,<sp/>high,<sp/>order);</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a68744cde4b7c17a0305d9cf512494a20" kindref="member">sort_bool_vector</ref>(vec,<sp/>low,<sp/>pivot<sp/>-<sp/>1,<sp/>order);</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a68744cde4b7c17a0305d9cf512494a20" kindref="member">sort_bool_vector</ref>(vec,<sp/>pivot<sp/>+<sp/>1,<sp/>high,<sp/>order);</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2810"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2812"><highlight class="normal"></highlight></codeline>
<codeline lineno="2813" refid="vector_8c_1ae854e33b1f9bfc9230078cdd22f90179" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ae854e33b1f9bfc9230078cdd22f90179" kindref="member">partition_uchar_vec</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order)<sp/>{</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>low;</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>high;</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pivot<sp/>=<sp/>arr[low];</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>j)</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>high<sp/>&amp;&amp;<sp/>pivot<sp/>&gt;=<sp/>arr[i]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" kindref="member">FORWARD</ref>)</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>low<sp/>&amp;&amp;<sp/>pivot<sp/>&lt;<sp/>arr[j]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" kindref="member">FORWARD</ref>)</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>high<sp/>&amp;&amp;<sp/>pivot<sp/>&lt;=<sp/>arr[i]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" kindref="member">REVERSE</ref>)</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>low<sp/>&amp;&amp;<sp/>pivot<sp/>&gt;<sp/>arr[j]<sp/>&amp;&amp;<sp/>order<sp/>==<sp/><ref refid="data__structures_8h_1ae5f2dc1bcc130da5504af4d09d54864c" kindref="member">REVERSE</ref>)</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;arr[i];</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;arr[j];</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>&amp;arr[low];</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>&amp;arr[j];</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="2841"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"></highlight></codeline>
<codeline lineno="2843" refid="vector_8c_1a88af2cb1285800957b1de71e783ee93a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a88af2cb1285800957b1de71e783ee93a" kindref="member">sort_uchar_vector</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order)<sp/>{</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(low<sp/>&lt;<sp/>high)</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pivot<sp/>=<sp/><ref refid="vector_8c_1ae854e33b1f9bfc9230078cdd22f90179" kindref="member">partition_uchar_vec</ref>(vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref>,<sp/>low,<sp/>high,<sp/>order);</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a88af2cb1285800957b1de71e783ee93a" kindref="member">sort_uchar_vector</ref>(vec,<sp/>low,<sp/>pivot<sp/>-<sp/>1,<sp/>order);</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a88af2cb1285800957b1de71e783ee93a" kindref="member">sort_uchar_vector</ref>(vec,<sp/>pivot<sp/>+<sp/>1,<sp/>high,<sp/>order);</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2850"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2852"><highlight class="normal"></highlight></codeline>
<codeline lineno="2853" refid="vector_8c_1a18f583c57c4938edf4ea7374eddf069e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a18f583c57c4938edf4ea7374eddf069e" kindref="member">forward_comparator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>str1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>str2)<sp/>{</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)<sp/>str1,<sp/>*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)str2)<sp/>&gt;=0)</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2858"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"></highlight></codeline>
<codeline lineno="2860" refid="vector_8c_1aff059eec91dab02d46903ebe9591e061" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1aff059eec91dab02d46903ebe9591e061" kindref="member">reverse_comparator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>str1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>str2)<sp/>{</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)<sp/>str1,<sp/>*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)str2)<sp/>&lt;=0)</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2865"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"></highlight></codeline>
<codeline lineno="2867" refid="vector_8c_1aead9f94df495db661d185ef0363ec1d6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1aead9f94df495db661d185ef0363ec1d6" kindref="member">sort_string_vector</ref>(<ref refid="structString" kindref="compound">String</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order)<sp/>{</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(order<sp/>==<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" kindref="member">FORWARD</ref>)</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qsort(vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref>,<sp/>vec-&gt;<ref refid="structString_1a706ffaf2f520d46074dd99e7896d6673" kindref="member">active_length</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*),<sp/><ref refid="vector_8c_1a18f583c57c4938edf4ea7374eddf069e" kindref="member">forward_comparator</ref>);</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qsort(vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref>,<sp/>vec-&gt;<ref refid="structString_1a706ffaf2f520d46074dd99e7896d6673" kindref="member">active_length</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*),<sp/><ref refid="vector_8c_1aff059eec91dab02d46903ebe9591e061" kindref="member">reverse_comparator</ref>);</highlight></codeline>
<codeline lineno="2872"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2874"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2875"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FREE_TYPE_VEC<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2876"><highlight class="normal"></highlight></codeline>
<codeline lineno="2877" refid="vector_8c_1a0684e2f1aee143f1769dd8ff908c852c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a0684e2f1aee143f1769dd8ff908c852c" kindref="member">sum_char_vector</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="2883"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2885"><highlight class="normal"></highlight></codeline>
<codeline lineno="2886" refid="vector_8c_1a643cb8d97c368f436a0010dacfca2401" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a643cb8d97c368f436a0010dacfca2401" kindref="member">sum_uchar_vector</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="2892"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2894"><highlight class="normal"></highlight></codeline>
<codeline lineno="2895" refid="vector_8c_1a54d410de6d79f482b3d560bcb78fd2ff" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a54d410de6d79f482b3d560bcb78fd2ff" kindref="member">sum_short_vector</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="2901"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2903"><highlight class="normal"></highlight></codeline>
<codeline lineno="2904" refid="vector_8c_1a67f48de636722d00447f21d5040f8d81" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a67f48de636722d00447f21d5040f8d81" kindref="member">sum_ushort_vector</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="2910"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2912"><highlight class="normal"></highlight></codeline>
<codeline lineno="2913" refid="vector_8c_1aaf01dd9c2caec4100d4315bd8d525a30" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1aaf01dd9c2caec4100d4315bd8d525a30" kindref="member">sum_int_vector</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="2919"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2921"><highlight class="normal"></highlight></codeline>
<codeline lineno="2922" refid="vector_8c_1a791fe9c8f9bd1d04158b01c3aa022edd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a791fe9c8f9bd1d04158b01c3aa022edd" kindref="member">sum_uint_vector</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="2928"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2930"><highlight class="normal"></highlight></codeline>
<codeline lineno="2931" refid="vector_8c_1af2ca62fb5fa87cccef8750d24b3979da" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1af2ca62fb5fa87cccef8750d24b3979da" kindref="member">sum_long_vector</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="2937"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2939"><highlight class="normal"></highlight></codeline>
<codeline lineno="2940" refid="vector_8c_1a3233da20e23c20659dd5aba81307b58d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a3233da20e23c20659dd5aba81307b58d" kindref="member">sum_ulong_vector</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="2946"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2948"><highlight class="normal"></highlight></codeline>
<codeline lineno="2949" refid="vector_8c_1a838510507e7f386e844fd1e5e3ae494a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a838510507e7f386e844fd1e5e3ae494a" kindref="member">sum_llong_vector</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="2955"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2957"><highlight class="normal"></highlight></codeline>
<codeline lineno="2958" refid="vector_8c_1af1cc1dfd0470ab00fc1537ebcbb5c089" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1af1cc1dfd0470ab00fc1537ebcbb5c089" kindref="member">sum_ullong_vector</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="2964"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2966"><highlight class="normal"></highlight></codeline>
<codeline lineno="2967" refid="vector_8c_1ab9177b68251ddf43f4a245afd559e462" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ab9177b68251ddf43f4a245afd559e462" kindref="member">sum_float_vector</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="2973"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2975"><highlight class="normal"></highlight></codeline>
<codeline lineno="2976" refid="vector_8c_1a98a70f4f173d451a1ff5357f4779289d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a98a70f4f173d451a1ff5357f4779289d" kindref="member">sum_double_vector</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="2982"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2984"><highlight class="normal"></highlight></codeline>
<codeline lineno="2985" refid="vector_8c_1af2df2f0fe19814004ab61a91521d7b21" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1af2df2f0fe19814004ab61a91521d7b21" kindref="member">sum_ldouble_vector</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="2991"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2993"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2994"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CUMSUM_TYPE_VEC<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2995"><highlight class="normal"></highlight></codeline>
<codeline lineno="2996" refid="vector_8c_1a877296aab1e625bc7b103322f6b93b14" refkind="member"><highlight class="normal"><ref refid="structChar" kindref="compound">Char</ref><sp/><ref refid="vector_8c_1a877296aab1e625bc7b103322f6b93b14" kindref="member">cumsum_char_vector</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structChar" kindref="compound">Char</ref><sp/>new_vec;</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1aecde718777430d31ec254f8a4f40cce0" kindref="member">init_char_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1ab4f076e9a6e7d0795c2c3a0216c5c97e" kindref="member">push_char_vector</ref>(&amp;new_vec,<sp/>sum,<sp/>new_vec.<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_vec;</highlight></codeline>
<codeline lineno="3005"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3007"><highlight class="normal"></highlight></codeline>
<codeline lineno="3008" refid="vector_8c_1a2850df1b78d17fd2e45847e8bf1e51c2" refkind="member"><highlight class="normal"><ref refid="structUChar" kindref="compound">UChar</ref><sp/><ref refid="vector_8c_1a2850df1b78d17fd2e45847e8bf1e51c2" kindref="member">cumsum_uchar_vector</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structUChar" kindref="compound">UChar</ref><sp/>new_vec;</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a9289ec52674f95ebf45ac81b70dfdc67" kindref="member">init_uchar_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1acc6fd3b434ba25d3473adff60160500b" kindref="member">push_uchar_vector</ref>(&amp;new_vec,<sp/>sum,<sp/>new_vec.<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_vec;</highlight></codeline>
<codeline lineno="3017"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-----------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3019"><highlight class="normal"></highlight></codeline>
<codeline lineno="3020" refid="vector_8c_1a588f2bea0a2ac3d8bf87184d873a2804" refkind="member"><highlight class="normal"><ref refid="structShort" kindref="compound">Short</ref><sp/><ref refid="vector_8c_1a588f2bea0a2ac3d8bf87184d873a2804" kindref="member">cumsum_short_vector</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShort" kindref="compound">Short</ref><sp/>new_vec;</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a749211e8a46a8b2297b3c6ebb78aed0e" kindref="member">init_short_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a38068c17aa5cf7286175572d43219b8d" kindref="member">push_short_vector</ref>(&amp;new_vec,<sp/>sum,<sp/>new_vec.<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_vec;</highlight></codeline>
<codeline lineno="3029"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3031"><highlight class="normal"></highlight></codeline>
<codeline lineno="3032" refid="vector_8c_1a94f7fe260f499b1a18150332e1a0e427" refkind="member"><highlight class="normal"><ref refid="structUShort" kindref="compound">UShort</ref><sp/><ref refid="vector_8c_1a94f7fe260f499b1a18150332e1a0e427" kindref="member">cumsum_ushort_vector</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structUShort" kindref="compound">UShort</ref><sp/>new_vec;</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1aa63398bdb55f97b891b93404a89de14d" kindref="member">init_ushort_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a97670c026df2a05dda5b0c85ebeb4d69" kindref="member">push_ushort_vector</ref>(&amp;new_vec,<sp/>sum,<sp/>new_vec.<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_vec;</highlight></codeline>
<codeline lineno="3041"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3043"><highlight class="normal"></highlight></codeline>
<codeline lineno="3044" refid="vector_8c_1acaf8f7f369483e4dcb9a7af53e79492c" refkind="member"><highlight class="normal"><ref refid="structInt" kindref="compound">Int</ref><sp/><ref refid="vector_8c_1acaf8f7f369483e4dcb9a7af53e79492c" kindref="member">cumsum_int_vector</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structInt" kindref="compound">Int</ref><sp/>new_vec;</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a9fdb6c5fdd9f0d5a3bfb751f9e82968e" kindref="member">init_int_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a6baf75dc56de293f3dbdc8ac40934980" kindref="member">push_int_vector</ref>(&amp;new_vec,<sp/>sum,<sp/>new_vec.<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_vec;</highlight></codeline>
<codeline lineno="3053"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3055"><highlight class="normal"></highlight></codeline>
<codeline lineno="3056" refid="vector_8c_1abe44138d94c38f7d65d62f63dddf668b" refkind="member"><highlight class="normal"><ref refid="structUInt" kindref="compound">UInt</ref><sp/><ref refid="vector_8c_1abe44138d94c38f7d65d62f63dddf668b" kindref="member">cumsum_uint_vector</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structUInt" kindref="compound">UInt</ref><sp/>new_vec;</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a9d8eb1d9ce65365d7b044fe684387a3f" kindref="member">init_uint_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a787fc2bba6112c4ede10d0ec14ab3825" kindref="member">push_uint_vector</ref>(&amp;new_vec,<sp/>sum,<sp/>new_vec.<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_vec;</highlight></codeline>
<codeline lineno="3065"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3067"><highlight class="normal"></highlight></codeline>
<codeline lineno="3068" refid="vector_8c_1aacdbfadbd42e44ba909b315b43152012" refkind="member"><highlight class="normal"><ref refid="structLInt" kindref="compound">LInt</ref><sp/><ref refid="vector_8c_1aacdbfadbd42e44ba909b315b43152012" kindref="member">cumsum_long_vector</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structLInt" kindref="compound">LInt</ref><sp/>new_vec;</highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1ac59c5fed0f4cd6b9aaf4c87b7a997bd3" kindref="member">init_long_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a6135368684b7d740482cfc775417f255" kindref="member">push_long_vector</ref>(&amp;new_vec,<sp/>sum,<sp/>new_vec.<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_vec;</highlight></codeline>
<codeline lineno="3077"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3079"><highlight class="normal"></highlight></codeline>
<codeline lineno="3080" refid="vector_8c_1ae856339059aa7e6f5db1d5bd7de43306" refkind="member"><highlight class="normal"><ref refid="structULInt" kindref="compound">ULInt</ref><sp/><ref refid="vector_8c_1ae856339059aa7e6f5db1d5bd7de43306" kindref="member">cumsum_ulong_vector</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structULInt" kindref="compound">ULInt</ref><sp/>new_vec;</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1af08098b392c0ff01db799bff9c83a521" kindref="member">init_ulong_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1aea5f95b56df2836ee553face60351e61" kindref="member">push_ulong_vector</ref>(&amp;new_vec,<sp/>sum,<sp/>new_vec.<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_vec;</highlight></codeline>
<codeline lineno="3089"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3091"><highlight class="normal"></highlight></codeline>
<codeline lineno="3092" refid="vector_8c_1a531b30e8b67bc20cad9865cc3d8afe50" refkind="member"><highlight class="normal"><ref refid="structLLInt" kindref="compound">LLInt</ref><sp/><ref refid="vector_8c_1a531b30e8b67bc20cad9865cc3d8afe50" kindref="member">cumsum_llong_vector</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>new_vec;</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a65eda538d3c07a8beb1475c1a214ff67" kindref="member">init_llong_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a93f7e28f97718d9d7c5c84df61c1466c" kindref="member">push_llong_vector</ref>(&amp;new_vec,<sp/>sum,<sp/>new_vec.<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_vec;</highlight></codeline>
<codeline lineno="3101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3103"><highlight class="normal"></highlight></codeline>
<codeline lineno="3104" refid="vector_8c_1a07bde722230b2f57f1b14304054d1d6a" refkind="member"><highlight class="normal"><ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/><ref refid="vector_8c_1a07bde722230b2f57f1b14304054d1d6a" kindref="member">cumsum_ullong_vector</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>new_vec;</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1ab05d31d34c87d8d6cd76f48539bf367f" kindref="member">init_ullong_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a3478a298e62d85cb93f11a78f64d6f80" kindref="member">push_ullong_vector</ref>(&amp;new_vec,<sp/>sum,<sp/>new_vec.<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_vec;</highlight></codeline>
<codeline lineno="3113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3115"><highlight class="normal"></highlight></codeline>
<codeline lineno="3116" refid="vector_8c_1a9ddb912a129b46a9a2f2d147b4a1ddc8" refkind="member"><highlight class="normal"><ref refid="structFlt" kindref="compound">Flt</ref><sp/><ref refid="vector_8c_1a9ddb912a129b46a9a2f2d147b4a1ddc8" kindref="member">cumsum_float_vector</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structFlt" kindref="compound">Flt</ref><sp/>new_vec;</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a92bba70874a1570bd9c87a2a7385af35" kindref="member">init_float_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a31e02f437f4f9f43d1126e017ae1cac3" kindref="member">push_float_vector</ref>(&amp;new_vec,<sp/>sum,<sp/>new_vec.<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_vec;</highlight></codeline>
<codeline lineno="3125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3127"><highlight class="normal"></highlight></codeline>
<codeline lineno="3128" refid="vector_8c_1ae8512eab3bf15409bda6bce1d6ec0380" refkind="member"><highlight class="normal"><ref refid="structDble" kindref="compound">Dble</ref><sp/><ref refid="vector_8c_1ae8512eab3bf15409bda6bce1d6ec0380" kindref="member">cumsum_double_vector</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structDble" kindref="compound">Dble</ref><sp/>new_vec;</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a2c0735f69da8e40535b5ecceace1a399" kindref="member">init_double_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1ab312c467d82a0fccc66cbb89a6b8de5c" kindref="member">push_double_vector</ref>(&amp;new_vec,<sp/>sum,<sp/>new_vec.<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_vec;</highlight></codeline>
<codeline lineno="3137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3139"><highlight class="normal"></highlight></codeline>
<codeline lineno="3140" refid="vector_8c_1ae0f64fd00879ff39b5ffbca0e80c197b" refkind="member"><highlight class="normal"><ref refid="structLDble" kindref="compound">LDble</ref><sp/><ref refid="vector_8c_1ae0f64fd00879ff39b5ffbca0e80c197b" kindref="member">cumsum_ldouble_vector</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structLDble" kindref="compound">LDble</ref><sp/>new_vec;</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a79d9f9d1d1cb31d09620bc5cdc73e94e" kindref="member">init_ldouble_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1ad001560a2793c40efb1c64532cefe2e2" kindref="member">push_ldouble_vector</ref>(&amp;new_vec,<sp/>sum,<sp/>new_vec.<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_vec;</highlight></codeline>
<codeline lineno="3149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3151"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AVERAGE_TYPE_VEC<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3153"><highlight class="normal"></highlight></codeline>
<codeline lineno="3154" refid="vector_8c_1a0a47e22454ec90b6c959915dbc3c87a6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a0a47e22454ec90b6c959915dbc3c87a6" kindref="member">average_char_vector</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/><ref refid="vector_8c_1a0684e2f1aee143f1769dd8ff908c852c" kindref="member">sum_char_vector</ref>(vec);</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>avg<sp/>=<sp/>sum<sp/>/<sp/>(char)vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref>;</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>avg;</highlight></codeline>
<codeline lineno="3158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3160"><highlight class="normal"></highlight></codeline>
<codeline lineno="3161" refid="vector_8c_1ad821bfcf3659a78a11a5c9c7fd72a277" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ad821bfcf3659a78a11a5c9c7fd72a277" kindref="member">average_uchar_vector</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/><ref refid="vector_8c_1a643cb8d97c368f436a0010dacfca2401" kindref="member">sum_uchar_vector</ref>(vec);</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>avg<sp/>=<sp/>sum<sp/>/<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref>;</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>avg;</highlight></codeline>
<codeline lineno="3165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3167" refid="vector_8c_1a5a553d82722c04ec4b613014fa1d0688" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a5a553d82722c04ec4b613014fa1d0688" kindref="member">average_short_vector</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/><ref refid="vector_8c_1a54d410de6d79f482b3d560bcb78fd2ff" kindref="member">sum_short_vector</ref>(vec);</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>avg<sp/>=<sp/>sum<sp/>/<sp/>(float)vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref>;</highlight></codeline>
<codeline lineno="3170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>avg;</highlight></codeline>
<codeline lineno="3171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3173"><highlight class="normal"></highlight></codeline>
<codeline lineno="3174" refid="vector_8c_1a96018578b7bce5eb04f4b4dbbd63b582" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a96018578b7bce5eb04f4b4dbbd63b582" kindref="member">average_ushort_vector</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/><ref refid="vector_8c_1a67f48de636722d00447f21d5040f8d81" kindref="member">sum_ushort_vector</ref>(vec);</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>avg<sp/>=<sp/>sum<sp/>/<sp/>(float)vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref>;</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>avg;</highlight></codeline>
<codeline lineno="3178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3180"><highlight class="normal"></highlight></codeline>
<codeline lineno="3181" refid="vector_8c_1a2e384c1e58cf1f6486ae0a8bc2e46379" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a2e384c1e58cf1f6486ae0a8bc2e46379" kindref="member">average_int_vector</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/><ref refid="vector_8c_1aaf01dd9c2caec4100d4315bd8d525a30" kindref="member">sum_int_vector</ref>(vec);</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>avg<sp/>=<sp/>sum<sp/>/<sp/>(float)vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref>;</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>avg;</highlight></codeline>
<codeline lineno="3185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3187"><highlight class="normal"></highlight></codeline>
<codeline lineno="3188" refid="vector_8c_1a35959e6bd4010b04681750611d00a7b7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a35959e6bd4010b04681750611d00a7b7" kindref="member">average_uint_vector</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/><ref refid="vector_8c_1a791fe9c8f9bd1d04158b01c3aa022edd" kindref="member">sum_uint_vector</ref>(vec);</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>avg<sp/>=<sp/>sum<sp/>/<sp/>(float)vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref>;</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>avg;</highlight></codeline>
<codeline lineno="3192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3194"><highlight class="normal"></highlight></codeline>
<codeline lineno="3195" refid="vector_8c_1ad1feee1c2712401a20fbe6699f5c4bc7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ad1feee1c2712401a20fbe6699f5c4bc7" kindref="member">average_long_vector</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/><ref refid="vector_8c_1af2ca62fb5fa87cccef8750d24b3979da" kindref="member">sum_long_vector</ref>(vec);</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>avg<sp/>=<sp/>sum<sp/>/<sp/>(double)vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref>;</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>avg;</highlight></codeline>
<codeline lineno="3199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3201"><highlight class="normal"></highlight></codeline>
<codeline lineno="3202" refid="vector_8c_1aa94c4a725c6ab558c748baa93b652363" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1aa94c4a725c6ab558c748baa93b652363" kindref="member">average_ulong_vector</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/><ref refid="vector_8c_1a3233da20e23c20659dd5aba81307b58d" kindref="member">sum_ulong_vector</ref>(vec);</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>avg<sp/>=<sp/>sum<sp/>/<sp/>(double)vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref>;</highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>avg;</highlight></codeline>
<codeline lineno="3206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3208"><highlight class="normal"></highlight></codeline>
<codeline lineno="3209" refid="vector_8c_1ae3782b50d088b4488da3a8283670ffcc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ae3782b50d088b4488da3a8283670ffcc" kindref="member">average_llong_vector</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/><ref refid="vector_8c_1a838510507e7f386e844fd1e5e3ae494a" kindref="member">sum_llong_vector</ref>(vec);</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>avg<sp/>=<sp/>sum<sp/>/<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double)vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref>;</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>avg;</highlight></codeline>
<codeline lineno="3213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3215"><highlight class="normal"></highlight></codeline>
<codeline lineno="3216" refid="vector_8c_1abb879670618c44d1259b4cb689d36698" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1abb879670618c44d1259b4cb689d36698" kindref="member">average_ullong_vector</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/><ref refid="vector_8c_1af1cc1dfd0470ab00fc1537ebcbb5c089" kindref="member">sum_ullong_vector</ref>(vec);</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>avg<sp/>=<sp/>sum<sp/>/<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double)vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref>;</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>avg;</highlight></codeline>
<codeline lineno="3220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3222"><highlight class="normal"></highlight></codeline>
<codeline lineno="3223" refid="vector_8c_1a95e8f18d7457adb1784ca850c7afa01e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a95e8f18d7457adb1784ca850c7afa01e" kindref="member">average_float_vector</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/><ref refid="vector_8c_1ab9177b68251ddf43f4a245afd559e462" kindref="member">sum_float_vector</ref>(vec);</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>avg<sp/>=<sp/>sum<sp/>/<sp/>(float)vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref>;</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>avg;</highlight></codeline>
<codeline lineno="3227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3229"><highlight class="normal"></highlight></codeline>
<codeline lineno="3230" refid="vector_8c_1ab0985989db7774a2f4ccf0f6bc7fd0ed" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ab0985989db7774a2f4ccf0f6bc7fd0ed" kindref="member">average_double_vector</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/><ref refid="vector_8c_1a98a70f4f173d451a1ff5357f4779289d" kindref="member">sum_double_vector</ref>(vec);</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>avg<sp/>=<sp/>sum<sp/>/<sp/>(double)vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref>;</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>avg;</highlight></codeline>
<codeline lineno="3234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3236"><highlight class="normal"></highlight></codeline>
<codeline lineno="3237" refid="vector_8c_1a136fac1692146b0fc1dd1f548b6a07a4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a136fac1692146b0fc1dd1f548b6a07a4" kindref="member">average_ldouble_vector</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/><ref refid="vector_8c_1af2df2f0fe19814004ab61a91521d7b21" kindref="member">sum_ldouble_vector</ref>(vec);</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>avg<sp/>=<sp/>sum<sp/>/<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double)vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref>;</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>avg;</highlight></codeline>
<codeline lineno="3241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3243"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3244"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STDEV_TYPE_VEC<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3245"><highlight class="normal"></highlight></codeline>
<codeline lineno="3246" refid="vector_8c_1a918b7824d676e70026969bf6af72dba7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a918b7824d676e70026969bf6af72dba7" kindref="member">stdev_char_vector</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>average<sp/>=<sp/><ref refid="vector_8c_1a0a47e22454ec90b6c959915dbc3c87a6" kindref="member">average_char_vector</ref>(vec);</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>(float)vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>+=<sp/>((value<sp/>-<sp/>average)<sp/>*<sp/>(value<sp/>-<sp/>average));</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>interm<sp/>=<sp/>(1.0f<sp/>/<sp/>((float)vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref><sp/>-<sp/>1.0f))<sp/>*<sp/>var;</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"></highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>number<sp/>=<sp/>interm;</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0.0f,<sp/>end<sp/>=<sp/>number;</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mid;</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"></highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>store<sp/>the<sp/>answer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ans<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>find<sp/>integral<sp/>part<sp/>of<sp/>square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>root<sp/>of<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&lt;=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mid<sp/>=<sp/>(start<sp/>+<sp/>end)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>number<sp/>is<sp/>perfect<sp/>square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mid<sp/>*<sp/>mid<sp/>==<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>mid;</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Increment<sp/>start<sp/>if<sp/>integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>part<sp/>lies<sp/>on<sp/>right<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mid<sp/>*<sp/>mid<sp/>&lt;<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//first<sp/>start<sp/>value<sp/>should<sp/>be<sp/>added<sp/>to<sp/>answer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans=start;</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//then<sp/>start<sp/>should<sp/>be<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>mid<sp/>+<sp/>1.f;</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decrement<sp/>end<sp/>if<sp/>integral<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lies<sp/>on<sp/>the<sp/>left<sp/>side<sp/>of<sp/>the<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>mid<sp/>-<sp/>1.f;</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>find<sp/>the<sp/>fractional<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>square<sp/>root<sp/>upto<sp/>5<sp/>decimal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>increment<sp/>=<sp/>0.1f;</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>5;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ans<sp/>*<sp/>ans<sp/>&lt;=<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>+=<sp/>increment;</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>terminates,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>ans<sp/>*<sp/>ans<sp/>&gt;<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>ans<sp/>-<sp/>increment;</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>increment<sp/>=<sp/>increment<sp/>/<sp/>10;</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ans;</highlight></codeline>
<codeline lineno="3301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3303"><highlight class="normal"></highlight></codeline>
<codeline lineno="3304" refid="vector_8c_1a9315ed5e7e8966f095ee8d334c5e10a4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a9315ed5e7e8966f095ee8d334c5e10a4" kindref="member">stdev_uchar_vector</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>average<sp/>=<sp/><ref refid="vector_8c_1ad821bfcf3659a78a11a5c9c7fd72a277" kindref="member">average_uchar_vector</ref>(vec);</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>(float)vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>+=<sp/>((value<sp/>-<sp/>average)<sp/>*<sp/>(value<sp/>-<sp/>average));</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>interm<sp/>=<sp/>(1.0f<sp/>/<sp/>((float)vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref><sp/>-<sp/>1.0f))<sp/>*<sp/>var;</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"></highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>number<sp/>=<sp/>interm;</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0.0f,<sp/>end<sp/>=<sp/>number;</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mid;</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"></highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>store<sp/>the<sp/>answer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ans<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>find<sp/>integral<sp/>part<sp/>of<sp/>square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>root<sp/>of<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&lt;=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mid<sp/>=<sp/>(start<sp/>+<sp/>end)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>number<sp/>is<sp/>perfect<sp/>square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mid<sp/>*<sp/>mid<sp/>==<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>mid;</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Increment<sp/>start<sp/>if<sp/>integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>part<sp/>lies<sp/>on<sp/>right<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mid<sp/>*<sp/>mid<sp/>&lt;<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//first<sp/>start<sp/>value<sp/>should<sp/>be<sp/>added<sp/>to<sp/>answer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans=start;</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//then<sp/>start<sp/>should<sp/>be<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>mid<sp/>+<sp/>1.f;</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decrement<sp/>end<sp/>if<sp/>integral<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lies<sp/>on<sp/>the<sp/>left<sp/>side<sp/>of<sp/>the<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>mid<sp/>-<sp/>1.f;</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>find<sp/>the<sp/>fractional<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>square<sp/>root<sp/>upto<sp/>5<sp/>decimal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>increment<sp/>=<sp/>0.1f;</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>5;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ans<sp/>*<sp/>ans<sp/>&lt;=<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>+=<sp/>increment;</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>terminates,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>ans<sp/>*<sp/>ans<sp/>&gt;<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>ans<sp/>-<sp/>increment;</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>increment<sp/>=<sp/>increment<sp/>/<sp/>10;</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ans;</highlight></codeline>
<codeline lineno="3359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3360"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3361"><highlight class="normal"></highlight></codeline>
<codeline lineno="3362" refid="vector_8c_1a193f4372f93ae17ab490841af7e508c3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a193f4372f93ae17ab490841af7e508c3" kindref="member">stdev_short_vector</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>average<sp/>=<sp/><ref refid="vector_8c_1a5a553d82722c04ec4b613014fa1d0688" kindref="member">average_short_vector</ref>(vec);</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>(float)vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>+=<sp/>((value<sp/>-<sp/>average)<sp/>*<sp/>(value<sp/>-<sp/>average));</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>interm<sp/>=<sp/>(1.0f<sp/>/<sp/>((float)vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref><sp/>-<sp/>1.0f))<sp/>*<sp/>var;</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"></highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>number<sp/>=<sp/>interm;</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0.0f,<sp/>end<sp/>=<sp/>number;</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mid;</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"></highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>store<sp/>the<sp/>answer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ans<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>find<sp/>integral<sp/>part<sp/>of<sp/>square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>root<sp/>of<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&lt;=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mid<sp/>=<sp/>(start<sp/>+<sp/>end)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>number<sp/>is<sp/>perfect<sp/>square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mid<sp/>*<sp/>mid<sp/>==<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>mid;</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Increment<sp/>start<sp/>if<sp/>integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>part<sp/>lies<sp/>on<sp/>right<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mid<sp/>*<sp/>mid<sp/>&lt;<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//first<sp/>start<sp/>value<sp/>should<sp/>be<sp/>added<sp/>to<sp/>answer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans=start;</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//then<sp/>start<sp/>should<sp/>be<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>mid<sp/>+<sp/>1.f;</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decrement<sp/>end<sp/>if<sp/>integral<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lies<sp/>on<sp/>the<sp/>left<sp/>side<sp/>of<sp/>the<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>mid<sp/>-<sp/>1.f;</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>find<sp/>the<sp/>fractional<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>square<sp/>root<sp/>upto<sp/>5<sp/>decimal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>increment<sp/>=<sp/>0.1f;</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>5;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ans<sp/>*<sp/>ans<sp/>&lt;=<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>+=<sp/>increment;</highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>terminates,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>ans<sp/>*<sp/>ans<sp/>&gt;<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>ans<sp/>-<sp/>increment;</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>increment<sp/>=<sp/>increment<sp/>/<sp/>10;</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ans;</highlight></codeline>
<codeline lineno="3417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3419"><highlight class="normal"></highlight></codeline>
<codeline lineno="3420" refid="vector_8c_1ae0c29568372c468d83c1a5f33d4c60c6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ae0c29568372c468d83c1a5f33d4c60c6" kindref="member">stdev_ushort_vector</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>average<sp/>=<sp/><ref refid="vector_8c_1a96018578b7bce5eb04f4b4dbbd63b582" kindref="member">average_ushort_vector</ref>(vec);</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>(float)vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>+=<sp/>((value<sp/>-<sp/>average)<sp/>*<sp/>(value<sp/>-<sp/>average));</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>interm<sp/>=<sp/>(1.0f<sp/>/<sp/>((float)vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref><sp/>-<sp/>1.0f))<sp/>*<sp/>var;</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"></highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>number<sp/>=<sp/>interm;</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0.0f,<sp/>end<sp/>=<sp/>number;</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mid;</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"></highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>store<sp/>the<sp/>answer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ans<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>find<sp/>integral<sp/>part<sp/>of<sp/>square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>root<sp/>of<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&lt;=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mid<sp/>=<sp/>(start<sp/>+<sp/>end)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>number<sp/>is<sp/>perfect<sp/>square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mid<sp/>*<sp/>mid<sp/>==<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>mid;</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Increment<sp/>start<sp/>if<sp/>integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>part<sp/>lies<sp/>on<sp/>right<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mid<sp/>*<sp/>mid<sp/>&lt;<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//first<sp/>start<sp/>value<sp/>should<sp/>be<sp/>added<sp/>to<sp/>answer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans=start;</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//then<sp/>start<sp/>should<sp/>be<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>mid<sp/>+<sp/>1.f;</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decrement<sp/>end<sp/>if<sp/>integral<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lies<sp/>on<sp/>the<sp/>left<sp/>side<sp/>of<sp/>the<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>mid<sp/>-<sp/>1.f;</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>find<sp/>the<sp/>fractional<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>square<sp/>root<sp/>upto<sp/>5<sp/>decimal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>increment<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>5;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ans<sp/>*<sp/>ans<sp/>&lt;=<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>+=<sp/>increment;</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>terminates,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>ans<sp/>*<sp/>ans<sp/>&gt;<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>ans<sp/>-<sp/>increment;</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>increment<sp/>=<sp/>increment<sp/>/<sp/>10;</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ans;</highlight></codeline>
<codeline lineno="3475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3477"><highlight class="normal"></highlight></codeline>
<codeline lineno="3478" refid="vector_8c_1aa469dd50aa2a8cd43ad5c577016145e8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1aa469dd50aa2a8cd43ad5c577016145e8" kindref="member">stdev_int_vector</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>average<sp/>=<sp/><ref refid="vector_8c_1a2e384c1e58cf1f6486ae0a8bc2e46379" kindref="member">average_int_vector</ref>(vec);</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>(float)vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>+=<sp/>((value<sp/>-<sp/>average)<sp/>*<sp/>(value<sp/>-<sp/>average));</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>interm<sp/>=<sp/>(1.0f<sp/>/<sp/>((float)vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref><sp/>-<sp/>1.0f))<sp/>*<sp/>var;</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"></highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>number<sp/>=<sp/>interm;</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0.0f,<sp/>end<sp/>=<sp/>number;</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mid;</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"></highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>store<sp/>the<sp/>answer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ans<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>find<sp/>integral<sp/>part<sp/>of<sp/>square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>root<sp/>of<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&lt;=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mid<sp/>=<sp/>(start<sp/>+<sp/>end)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>number<sp/>is<sp/>perfect<sp/>square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mid<sp/>*<sp/>mid<sp/>==<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>mid;</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Increment<sp/>start<sp/>if<sp/>integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>part<sp/>lies<sp/>on<sp/>right<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mid<sp/>*<sp/>mid<sp/>&lt;<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//first<sp/>start<sp/>value<sp/>should<sp/>be<sp/>added<sp/>to<sp/>answer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans=start;</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//then<sp/>start<sp/>should<sp/>be<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>mid<sp/>+<sp/>1.f;</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decrement<sp/>end<sp/>if<sp/>integral<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lies<sp/>on<sp/>the<sp/>left<sp/>side<sp/>of<sp/>the<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>mid<sp/>-<sp/>1.f;</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>find<sp/>the<sp/>fractional<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>square<sp/>root<sp/>upto<sp/>5<sp/>decimal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>increment<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>5;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ans<sp/>*<sp/>ans<sp/>&lt;=<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>+=<sp/>increment;</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>terminates,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>ans<sp/>*<sp/>ans<sp/>&gt;<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>ans<sp/>-<sp/>increment;</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>increment<sp/>=<sp/>increment<sp/>/<sp/>10;</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ans;</highlight></codeline>
<codeline lineno="3533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3534"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3535"><highlight class="normal"></highlight></codeline>
<codeline lineno="3536" refid="vector_8c_1a2a72fa8e25403401326d07853c45c7fe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a2a72fa8e25403401326d07853c45c7fe" kindref="member">stdev_uint_vector</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>average<sp/>=<sp/><ref refid="vector_8c_1a35959e6bd4010b04681750611d00a7b7" kindref="member">average_uint_vector</ref>(vec);</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>(float)vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>+=<sp/>((value<sp/>-<sp/>average)<sp/>*<sp/>(value<sp/>-<sp/>average));</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>interm<sp/>=<sp/>(1.0f<sp/>/<sp/>((float)vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref><sp/>-<sp/>1.0f))<sp/>*<sp/>var;</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"></highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>number<sp/>=<sp/>interm;</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0.0f,<sp/>end<sp/>=<sp/>number;</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mid;</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"></highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>store<sp/>the<sp/>answer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ans<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>find<sp/>integral<sp/>part<sp/>of<sp/>square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>root<sp/>of<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&lt;=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mid<sp/>=<sp/>(start<sp/>+<sp/>end)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>number<sp/>is<sp/>perfect<sp/>square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mid<sp/>*<sp/>mid<sp/>==<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>mid;</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Increment<sp/>start<sp/>if<sp/>integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>part<sp/>lies<sp/>on<sp/>right<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mid<sp/>*<sp/>mid<sp/>&lt;<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//first<sp/>start<sp/>value<sp/>should<sp/>be<sp/>added<sp/>to<sp/>answer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans=start;</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//then<sp/>start<sp/>should<sp/>be<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>mid<sp/>+<sp/>1.f;</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decrement<sp/>end<sp/>if<sp/>integral<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lies<sp/>on<sp/>the<sp/>left<sp/>side<sp/>of<sp/>the<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>mid<sp/>-<sp/>1.f;</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>find<sp/>the<sp/>fractional<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>square<sp/>root<sp/>upto<sp/>5<sp/>decimal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>increment<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>5;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ans<sp/>*<sp/>ans<sp/>&lt;=<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>+=<sp/>increment;</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>terminates,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>ans<sp/>*<sp/>ans<sp/>&gt;<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>ans<sp/>-<sp/>increment;</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>increment<sp/>=<sp/>increment<sp/>/<sp/>10;</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ans;</highlight></codeline>
<codeline lineno="3591"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3592"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3593"><highlight class="normal"></highlight></codeline>
<codeline lineno="3594" refid="vector_8c_1ab875bc51d7595b4e6fe536770cfe62c5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ab875bc51d7595b4e6fe536770cfe62c5" kindref="member">stdev_long_vector</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>average<sp/>=<sp/><ref refid="vector_8c_1ad1feee1c2712401a20fbe6699f5c4bc7" kindref="member">average_long_vector</ref>(vec);</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>(double)vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>+=<sp/>((value<sp/>-<sp/>average)<sp/>*<sp/>(value<sp/>-<sp/>average));</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>interm<sp/>=<sp/>(1.0<sp/>/<sp/>((double)vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref><sp/>-<sp/>1.0))<sp/>*<sp/>var;</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"></highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>number<sp/>=<sp/>interm;</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0.0,<sp/>end<sp/>=<sp/>number;</highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mid;</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"></highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>store<sp/>the<sp/>answer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ans<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>find<sp/>integral<sp/>part<sp/>of<sp/>square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>root<sp/>of<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&lt;=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mid<sp/>=<sp/>(start<sp/>+<sp/>end)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>number<sp/>is<sp/>perfect<sp/>square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mid<sp/>*<sp/>mid<sp/>==<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>mid;</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Increment<sp/>start<sp/>if<sp/>integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>part<sp/>lies<sp/>on<sp/>right<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mid<sp/>*<sp/>mid<sp/>&lt;<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//first<sp/>start<sp/>value<sp/>should<sp/>be<sp/>added<sp/>to<sp/>answer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans=start;</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//then<sp/>start<sp/>should<sp/>be<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>mid<sp/>+<sp/>1.;</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decrement<sp/>end<sp/>if<sp/>integral<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lies<sp/>on<sp/>the<sp/>left<sp/>side<sp/>of<sp/>the<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>mid<sp/>-<sp/>1.;</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>find<sp/>the<sp/>fractional<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>square<sp/>root<sp/>upto<sp/>5<sp/>decimal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>increment<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>5;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ans<sp/>*<sp/>ans<sp/>&lt;=<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>+=<sp/>increment;</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>terminates,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>ans<sp/>*<sp/>ans<sp/>&gt;<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>ans<sp/>-<sp/>increment;</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>increment<sp/>=<sp/>increment<sp/>/<sp/>10;</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ans;</highlight></codeline>
<codeline lineno="3649"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3650"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3651"><highlight class="normal"></highlight></codeline>
<codeline lineno="3652" refid="vector_8c_1a3cd9fa1fbe73338e380ccc9b98a6b768" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a3cd9fa1fbe73338e380ccc9b98a6b768" kindref="member">stdev_ulong_vector</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>average<sp/>=<sp/><ref refid="vector_8c_1aa94c4a725c6ab558c748baa93b652363" kindref="member">average_ulong_vector</ref>(vec);</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>(double)vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>+=<sp/>((value<sp/>-<sp/>average)<sp/>*<sp/>(value<sp/>-<sp/>average));</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>interm<sp/>=<sp/>(1.0<sp/>/<sp/>((double)vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref><sp/>-<sp/>1.0))<sp/>*<sp/>var;</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"></highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>number<sp/>=<sp/>interm;</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0.0,<sp/>end<sp/>=<sp/>number;</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mid;</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"></highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>store<sp/>the<sp/>answer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ans<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>find<sp/>integral<sp/>part<sp/>of<sp/>square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>root<sp/>of<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&lt;=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mid<sp/>=<sp/>(start<sp/>+<sp/>end)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>number<sp/>is<sp/>perfect<sp/>square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mid<sp/>*<sp/>mid<sp/>==<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>mid;</highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Increment<sp/>start<sp/>if<sp/>integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>part<sp/>lies<sp/>on<sp/>right<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mid<sp/>*<sp/>mid<sp/>&lt;<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//first<sp/>start<sp/>value<sp/>should<sp/>be<sp/>added<sp/>to<sp/>answer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans=start;</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//then<sp/>start<sp/>should<sp/>be<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>mid<sp/>+<sp/>1.;</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decrement<sp/>end<sp/>if<sp/>integral<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lies<sp/>on<sp/>the<sp/>left<sp/>side<sp/>of<sp/>the<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>mid<sp/>-<sp/>1.;</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>find<sp/>the<sp/>fractional<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>square<sp/>root<sp/>upto<sp/>5<sp/>decimal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>increment<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>5;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ans<sp/>*<sp/>ans<sp/>&lt;=<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>+=<sp/>increment;</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>terminates,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>ans<sp/>*<sp/>ans<sp/>&gt;<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>ans<sp/>-<sp/>increment;</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>increment<sp/>=<sp/>increment<sp/>/<sp/>10;</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ans;</highlight></codeline>
<codeline lineno="3707"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3709"><highlight class="normal"></highlight></codeline>
<codeline lineno="3710" refid="vector_8c_1a5b29dc6f20528b67a4a53208c5beefe7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a5b29dc6f20528b67a4a53208c5beefe7" kindref="member">stdev_llong_vector</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>average<sp/>=<sp/><ref refid="vector_8c_1ae3782b50d088b4488da3a8283670ffcc" kindref="member">average_llong_vector</ref>(vec);</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double)vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>+=<sp/>((value<sp/>-<sp/>average)<sp/>*<sp/>(value<sp/>-<sp/>average));</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>interm<sp/>=<sp/>(1.0<sp/>/<sp/>((</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double)vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref><sp/>-<sp/>1.0))<sp/>*<sp/>var;</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"></highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>number<sp/>=<sp/>interm;</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0.0,<sp/>end<sp/>=<sp/>number;</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mid;</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"></highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>store<sp/>the<sp/>answer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ans<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>find<sp/>integral<sp/>part<sp/>of<sp/>square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>root<sp/>of<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&lt;=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mid<sp/>=<sp/>(start<sp/>+<sp/>end)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>number<sp/>is<sp/>perfect<sp/>square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mid<sp/>*<sp/>mid<sp/>==<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>mid;</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Increment<sp/>start<sp/>if<sp/>integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>part<sp/>lies<sp/>on<sp/>right<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mid<sp/>*<sp/>mid<sp/>&lt;<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//first<sp/>start<sp/>value<sp/>should<sp/>be<sp/>added<sp/>to<sp/>answer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans=start;</highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//then<sp/>start<sp/>should<sp/>be<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>mid<sp/>+<sp/>1.;</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decrement<sp/>end<sp/>if<sp/>integral<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lies<sp/>on<sp/>the<sp/>left<sp/>side<sp/>of<sp/>the<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>mid<sp/>-<sp/>1.;</highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3751"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>find<sp/>the<sp/>fractional<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>square<sp/>root<sp/>upto<sp/>5<sp/>decimal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>increment<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>5;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ans<sp/>*<sp/>ans<sp/>&lt;=<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>+=<sp/>increment;</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>terminates,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>ans<sp/>*<sp/>ans<sp/>&gt;<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>ans<sp/>-<sp/>increment;</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>increment<sp/>=<sp/>increment<sp/>/<sp/>10;</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ans;</highlight></codeline>
<codeline lineno="3765"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3767"><highlight class="normal"></highlight></codeline>
<codeline lineno="3768" refid="vector_8c_1a9cb0b02a7bedef69397ef758fd36baa6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a9cb0b02a7bedef69397ef758fd36baa6" kindref="member">stdev_ullong_vector</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>average<sp/>=<sp/><ref refid="vector_8c_1abb879670618c44d1259b4cb689d36698" kindref="member">average_ullong_vector</ref>(vec);</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="3771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double)vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="3774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>+=<sp/>((value<sp/>-<sp/>average)<sp/>*<sp/>(value<sp/>-<sp/>average));</highlight></codeline>
<codeline lineno="3775"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>interm<sp/>=<sp/>(1.0<sp/>/<sp/>((</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double)vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref><sp/>-<sp/>1.0))<sp/>*<sp/>var;</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"></highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>number<sp/>=<sp/>interm;</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0.0,<sp/>end<sp/>=<sp/>number;</highlight></codeline>
<codeline lineno="3780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mid;</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"></highlight></codeline>
<codeline lineno="3782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>store<sp/>the<sp/>answer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ans<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>find<sp/>integral<sp/>part<sp/>of<sp/>square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>root<sp/>of<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&lt;=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mid<sp/>=<sp/>(start<sp/>+<sp/>end)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>number<sp/>is<sp/>perfect<sp/>square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mid<sp/>*<sp/>mid<sp/>==<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>mid;</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Increment<sp/>start<sp/>if<sp/>integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>part<sp/>lies<sp/>on<sp/>right<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mid<sp/>*<sp/>mid<sp/>&lt;<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//first<sp/>start<sp/>value<sp/>should<sp/>be<sp/>added<sp/>to<sp/>answer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans=start;</highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//then<sp/>start<sp/>should<sp/>be<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>mid<sp/>+<sp/>1.;</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decrement<sp/>end<sp/>if<sp/>integral<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lies<sp/>on<sp/>the<sp/>left<sp/>side<sp/>of<sp/>the<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>mid<sp/>-<sp/>1.;</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>find<sp/>the<sp/>fractional<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>square<sp/>root<sp/>upto<sp/>5<sp/>decimal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>increment<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>5;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ans<sp/>*<sp/>ans<sp/>&lt;=<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>+=<sp/>increment;</highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>terminates,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>ans<sp/>*<sp/>ans<sp/>&gt;<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>ans<sp/>-<sp/>increment;</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>increment<sp/>=<sp/>increment<sp/>/<sp/>10;</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ans;</highlight></codeline>
<codeline lineno="3823"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3824"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3825"><highlight class="normal"></highlight></codeline>
<codeline lineno="3826" refid="vector_8c_1abb791f292ea37822fa3c8f20749b8571" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1abb791f292ea37822fa3c8f20749b8571" kindref="member">stdev_float_vector</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>average<sp/>=<sp/><ref refid="vector_8c_1a95e8f18d7457adb1784ca850c7afa01e" kindref="member">average_float_vector</ref>(vec);</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="3830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>(float)vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="3832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>+=<sp/>((value<sp/>-<sp/>average)<sp/>*<sp/>(value<sp/>-<sp/>average));</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>interm<sp/>=<sp/>(1.0f<sp/>/<sp/>((float)vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref><sp/>-<sp/>1.0f))<sp/>*<sp/>var;</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"></highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>number<sp/>=<sp/>interm;</highlight></codeline>
<codeline lineno="3837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0.0,<sp/>end<sp/>=<sp/>number;</highlight></codeline>
<codeline lineno="3838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mid;</highlight></codeline>
<codeline lineno="3839"><highlight class="normal"></highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>store<sp/>the<sp/>answer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ans<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>find<sp/>integral<sp/>part<sp/>of<sp/>square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>root<sp/>of<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&lt;=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mid<sp/>=<sp/>(start<sp/>+<sp/>end)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>number<sp/>is<sp/>perfect<sp/>square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mid<sp/>*<sp/>mid<sp/>==<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>mid;</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Increment<sp/>start<sp/>if<sp/>integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>part<sp/>lies<sp/>on<sp/>right<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mid<sp/>*<sp/>mid<sp/>&lt;<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//first<sp/>start<sp/>value<sp/>should<sp/>be<sp/>added<sp/>to<sp/>answer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans=start;</highlight></codeline>
<codeline lineno="3859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//then<sp/>start<sp/>should<sp/>be<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>mid<sp/>+<sp/>1.f;</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decrement<sp/>end<sp/>if<sp/>integral<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lies<sp/>on<sp/>the<sp/>left<sp/>side<sp/>of<sp/>the<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>mid<sp/>-<sp/>1.f;</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>find<sp/>the<sp/>fractional<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>square<sp/>root<sp/>upto<sp/>5<sp/>decimal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>increment<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>5;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ans<sp/>*<sp/>ans<sp/>&lt;=<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>+=<sp/>increment;</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>terminates,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>ans<sp/>*<sp/>ans<sp/>&gt;<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>ans<sp/>-<sp/>increment;</highlight></codeline>
<codeline lineno="3878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>increment<sp/>=<sp/>increment<sp/>/<sp/>10;</highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ans;</highlight></codeline>
<codeline lineno="3881"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3882"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3883"><highlight class="normal"></highlight></codeline>
<codeline lineno="3884" refid="vector_8c_1aa05c06bd35f0e74c8a07ef0257a8aa67" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1aa05c06bd35f0e74c8a07ef0257a8aa67" kindref="member">stdev_double_vector</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>average<sp/>=<sp/><ref refid="vector_8c_1ab0985989db7774a2f4ccf0f6bc7fd0ed" kindref="member">average_double_vector</ref>(vec);</highlight></codeline>
<codeline lineno="3886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>(double)vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>+=<sp/>((value<sp/>-<sp/>average)<sp/>*<sp/>(value<sp/>-<sp/>average));</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>interm<sp/>=<sp/>(1.0<sp/>/<sp/>((double)vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref><sp/>-<sp/>1.0))<sp/>*<sp/>var;</highlight></codeline>
<codeline lineno="3893"><highlight class="normal"></highlight></codeline>
<codeline lineno="3894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>number<sp/>=<sp/>interm;</highlight></codeline>
<codeline lineno="3895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0.0,<sp/>end<sp/>=<sp/>number;</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mid;</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"></highlight></codeline>
<codeline lineno="3898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>store<sp/>the<sp/>answer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ans<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>find<sp/>integral<sp/>part<sp/>of<sp/>square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>root<sp/>of<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&lt;=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="3903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mid<sp/>=<sp/>(start<sp/>+<sp/>end)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="3905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>number<sp/>is<sp/>perfect<sp/>square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mid<sp/>*<sp/>mid<sp/>==<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>mid;</highlight></codeline>
<codeline lineno="3909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Increment<sp/>start<sp/>if<sp/>integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>part<sp/>lies<sp/>on<sp/>right<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mid<sp/>*<sp/>mid<sp/>&lt;<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//first<sp/>start<sp/>value<sp/>should<sp/>be<sp/>added<sp/>to<sp/>answer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans=start;</highlight></codeline>
<codeline lineno="3917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//then<sp/>start<sp/>should<sp/>be<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>mid<sp/>+<sp/>1.;</highlight></codeline>
<codeline lineno="3919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decrement<sp/>end<sp/>if<sp/>integral<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lies<sp/>on<sp/>the<sp/>left<sp/>side<sp/>of<sp/>the<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>mid<sp/>-<sp/>1.;</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>find<sp/>the<sp/>fractional<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>square<sp/>root<sp/>upto<sp/>5<sp/>decimal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>increment<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>5;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ans<sp/>*<sp/>ans<sp/>&lt;=<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>+=<sp/>increment;</highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>terminates,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>ans<sp/>*<sp/>ans<sp/>&gt;<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>ans<sp/>-<sp/>increment;</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>increment<sp/>=<sp/>increment<sp/>/<sp/>10;</highlight></codeline>
<codeline lineno="3937"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ans;</highlight></codeline>
<codeline lineno="3939"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3940"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3941"><highlight class="normal"></highlight></codeline>
<codeline lineno="3942" refid="vector_8c_1abf8b31942231ba26f9f5d4729cdd5370" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1abf8b31942231ba26f9f5d4729cdd5370" kindref="member">stdev_ldouble_vector</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="3943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>average<sp/>=<sp/><ref refid="vector_8c_1a136fac1692146b0fc1dd1f548b6a07a4" kindref="member">average_ldouble_vector</ref>(vec);</highlight></codeline>
<codeline lineno="3944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="3945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="3946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double)vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>+=<sp/>((value<sp/>-<sp/>average)<sp/>*<sp/>(value<sp/>-<sp/>average));</highlight></codeline>
<codeline lineno="3949"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>interm<sp/>=<sp/>(1.0<sp/>/<sp/>((</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double)vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref><sp/>-<sp/>1.0))<sp/>*<sp/>var;</highlight></codeline>
<codeline lineno="3951"><highlight class="normal"></highlight></codeline>
<codeline lineno="3952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>number<sp/>=<sp/>interm;</highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0.0,<sp/>end<sp/>=<sp/>number;</highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mid;</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"></highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>store<sp/>the<sp/>answer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ans<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>find<sp/>integral<sp/>part<sp/>of<sp/>square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>root<sp/>of<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&lt;=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="3961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mid<sp/>=<sp/>(start<sp/>+<sp/>end)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="3963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>number<sp/>is<sp/>perfect<sp/>square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mid<sp/>*<sp/>mid<sp/>==<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>mid;</highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Increment<sp/>start<sp/>if<sp/>integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>part<sp/>lies<sp/>on<sp/>right<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mid<sp/>*<sp/>mid<sp/>&lt;<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//first<sp/>start<sp/>value<sp/>should<sp/>be<sp/>added<sp/>to<sp/>answer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans=start;</highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//then<sp/>start<sp/>should<sp/>be<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>mid<sp/>+<sp/>1.;</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decrement<sp/>end<sp/>if<sp/>integral<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lies<sp/>on<sp/>the<sp/>left<sp/>side<sp/>of<sp/>the<sp/>mid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>mid<sp/>-<sp/>1.;</highlight></codeline>
<codeline lineno="3982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3983"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>find<sp/>the<sp/>fractional<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>square<sp/>root<sp/>upto<sp/>5<sp/>decimal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>increment<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="3987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>5;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ans<sp/>*<sp/>ans<sp/>&lt;=<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>+=<sp/>increment;</highlight></codeline>
<codeline lineno="3990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>terminates,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>ans<sp/>*<sp/>ans<sp/>&gt;<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>ans<sp/>-<sp/>increment;</highlight></codeline>
<codeline lineno="3994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>increment<sp/>=<sp/>increment<sp/>/<sp/>10;</highlight></codeline>
<codeline lineno="3995"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ans;</highlight></codeline>
<codeline lineno="3997"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3998"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3999"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4000"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MAX_TYPE_VEC<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4001"><highlight class="normal"></highlight></codeline>
<codeline lineno="4002" refid="vector_8c_1ac45503684793e5582c2bdac1d7d52ba3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ac45503684793e5582c2bdac1d7d52ba3" kindref="member">max_char_vector</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref><sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"></highlight></codeline>
<codeline lineno="4005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max<sp/>&lt;<sp/>vec-&gt;array[i])<sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="4010"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4011"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4012"><highlight class="normal"></highlight></codeline>
<codeline lineno="4013" refid="vector_8c_1a20c0c3f6f0baca86dd48608bbf4fb02e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a20c0c3f6f0baca86dd48608bbf4fb02e" kindref="member">max_uchar_vector</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref><sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4015"><highlight class="normal"></highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max<sp/>&lt;<sp/>vec-&gt;array[i])<sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="4021"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4022"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4023"><highlight class="normal"></highlight></codeline>
<codeline lineno="4024" refid="vector_8c_1a9322308e4f52e03ae336549fd42b7934" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a9322308e4f52e03ae336549fd42b7934" kindref="member">max_short_vector</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref><sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4026"><highlight class="normal"></highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max<sp/>&lt;<sp/>vec-&gt;array[i])<sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="4030"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="4032"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4033"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4034"><highlight class="normal"></highlight></codeline>
<codeline lineno="4035" refid="vector_8c_1a60d805f5dc29474286fb04c939b5c509" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a60d805f5dc29474286fb04c939b5c509" kindref="member">max_ushort_vector</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref><sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4037"><highlight class="normal"></highlight></codeline>
<codeline lineno="4038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max<sp/>&lt;<sp/>vec-&gt;array[i])<sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="4041"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="4043"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4044"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4045"><highlight class="normal"></highlight></codeline>
<codeline lineno="4046" refid="vector_8c_1a2b015405abe5287fffe31e5dc0e31808" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a2b015405abe5287fffe31e5dc0e31808" kindref="member">max_int_vector</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref><sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4048"><highlight class="normal"></highlight></codeline>
<codeline lineno="4049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max<sp/>&lt;<sp/>vec-&gt;array[i])<sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="4052"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="4054"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4055"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4056"><highlight class="normal"></highlight></codeline>
<codeline lineno="4057" refid="vector_8c_1a174988fd6cd94257cb6332b91429839d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a174988fd6cd94257cb6332b91429839d" kindref="member">max_uint_vector</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref><sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"></highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max<sp/>&lt;<sp/>vec-&gt;array[i])<sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="4065"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4067"><highlight class="normal"></highlight></codeline>
<codeline lineno="4068" refid="vector_8c_1a3b06accf11f120a22aec6d59ed16d9db" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a3b06accf11f120a22aec6d59ed16d9db" kindref="member">max_long_vector</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref><sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4070"><highlight class="normal"></highlight></codeline>
<codeline lineno="4071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max<sp/>&lt;<sp/>vec-&gt;array[i])<sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="4076"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4077"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4078"><highlight class="normal"></highlight></codeline>
<codeline lineno="4079" refid="vector_8c_1ab73b0a00fcc4f391123628e2913a19bb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ab73b0a00fcc4f391123628e2913a19bb" kindref="member">max_ulong_vector</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref><sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4081"><highlight class="normal"></highlight></codeline>
<codeline lineno="4082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max<sp/>&lt;<sp/>vec-&gt;array[i])<sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="4085"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="4087"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4088"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4089"><highlight class="normal"></highlight></codeline>
<codeline lineno="4090" refid="vector_8c_1a812e8c27f2970204cc8460728d13c96f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a812e8c27f2970204cc8460728d13c96f" kindref="member">max_llong_vector</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref><sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4092"><highlight class="normal"></highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max<sp/>&lt;<sp/>vec-&gt;array[i])<sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="4096"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="4098"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4099"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4100"><highlight class="normal"></highlight></codeline>
<codeline lineno="4101" refid="vector_8c_1a1960c8508e6fe43960e240626c497764" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a1960c8508e6fe43960e240626c497764" kindref="member">max_ullong_vector</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref><sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4103"><highlight class="normal"></highlight></codeline>
<codeline lineno="4104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max<sp/>&lt;<sp/>vec-&gt;array[i])<sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="4109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4111"><highlight class="normal"></highlight></codeline>
<codeline lineno="4112" refid="vector_8c_1a6a09841dc59b5a463a167ee7c2911efe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a6a09841dc59b5a463a167ee7c2911efe" kindref="member">max_float_vector</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref><sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4114"><highlight class="normal"></highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max<sp/>&lt;<sp/>vec-&gt;array[i])<sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="4118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="4120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4122"><highlight class="normal"></highlight></codeline>
<codeline lineno="4123" refid="vector_8c_1a2da642346c710d417636ad41cd99b9a9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a2da642346c710d417636ad41cd99b9a9" kindref="member">max_double_vector</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref><sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"></highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max<sp/>&lt;<sp/>vec-&gt;array[i])<sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="4131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4133"><highlight class="normal"></highlight></codeline>
<codeline lineno="4134" refid="vector_8c_1adcda6720fac922e691d3bf4927edb42a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1adcda6720fac922e691d3bf4927edb42a" kindref="member">max_ldouble_vector</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref><sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4136"><highlight class="normal"></highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max<sp/>&lt;<sp/>vec-&gt;array[i])<sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="4142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4144"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4145"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MIN_TYPE_VEC<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4146"><highlight class="normal"></highlight></codeline>
<codeline lineno="4147" refid="vector_8c_1a891486b9b55a8c3ac25a1225553fb0c7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a891486b9b55a8c3ac25a1225553fb0c7" kindref="member">min_char_vector</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref><sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4149"><highlight class="normal"></highlight></codeline>
<codeline lineno="4150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max<sp/>&gt;<sp/>vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref>[i])<sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="4153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="4155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4157"><highlight class="normal"></highlight></codeline>
<codeline lineno="4158" refid="vector_8c_1a1dbc7c797a21eb6c44d009cb497b50ae" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a1dbc7c797a21eb6c44d009cb497b50ae" kindref="member">min_uchar_vector</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref><sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4160"><highlight class="normal"></highlight></codeline>
<codeline lineno="4161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max<sp/>&gt;<sp/>vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref>[i])<sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="4164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="4166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4167"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4168"><highlight class="normal"></highlight></codeline>
<codeline lineno="4169" refid="vector_8c_1a21be2c6c074005bfa1c33603299f3181" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a21be2c6c074005bfa1c33603299f3181" kindref="member">min_short_vector</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref><sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"></highlight></codeline>
<codeline lineno="4172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max<sp/>&gt;<sp/>vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref>[i])<sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="4175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="4177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4179"><highlight class="normal"></highlight></codeline>
<codeline lineno="4180" refid="vector_8c_1a3b2bb12ccbe4e256ec4da071673dd601" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a3b2bb12ccbe4e256ec4da071673dd601" kindref="member">min_ushort_vector</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref><sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4182"><highlight class="normal"></highlight></codeline>
<codeline lineno="4183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max<sp/>&gt;<sp/>vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref>[i])<sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="4188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4189"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4190"><highlight class="normal"></highlight></codeline>
<codeline lineno="4191" refid="vector_8c_1aad99e117541f381f0c14f5620507f6e1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1aad99e117541f381f0c14f5620507f6e1" kindref="member">min_int_vector</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref><sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4193"><highlight class="normal"></highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max<sp/>&gt;<sp/>vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref>[i])<sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="4199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4200"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4201"><highlight class="normal"></highlight></codeline>
<codeline lineno="4202" refid="vector_8c_1a449905d346deae4f4a83314c592a5b80" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a449905d346deae4f4a83314c592a5b80" kindref="member">min_uint_vector</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref><sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4204"><highlight class="normal"></highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max<sp/>&gt;<sp/>vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref>[i])<sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="4208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="4210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4212"><highlight class="normal"></highlight></codeline>
<codeline lineno="4213" refid="vector_8c_1aaff52778fc2f05ace6de3570530e9068" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1aaff52778fc2f05ace6de3570530e9068" kindref="member">min_long_vector</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref><sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4215"><highlight class="normal"></highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max<sp/>&gt;<sp/>vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref>[i])<sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="4219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="4221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4222"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4223"><highlight class="normal"></highlight></codeline>
<codeline lineno="4224" refid="vector_8c_1a98b9ea464f1a6e1012f3aae9031a8a13" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a98b9ea464f1a6e1012f3aae9031a8a13" kindref="member">min_ulong_vector</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref><sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4226"><highlight class="normal"></highlight></codeline>
<codeline lineno="4227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max<sp/>&gt;<sp/>vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref>[i])<sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="4230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="4232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4234"><highlight class="normal"></highlight></codeline>
<codeline lineno="4235" refid="vector_8c_1ad1a7c046cbcac65a71e5442ec5680bdc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ad1a7c046cbcac65a71e5442ec5680bdc" kindref="member">min_llong_vector</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref><sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4237"><highlight class="normal"></highlight></codeline>
<codeline lineno="4238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max<sp/>&gt;<sp/>vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref>[i])<sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="4241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="4243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4244"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4245"><highlight class="normal"></highlight></codeline>
<codeline lineno="4246" refid="vector_8c_1a10aea428d676da30abd474d11dbab300" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a10aea428d676da30abd474d11dbab300" kindref="member">min_ullong_vector</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref><sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4248"><highlight class="normal"></highlight></codeline>
<codeline lineno="4249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max<sp/>&gt;<sp/>vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref>[i])<sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="4254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4255"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4256"><highlight class="normal"></highlight></codeline>
<codeline lineno="4257" refid="vector_8c_1a37e7749c40c9ecefb35c6f677e6e2786" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a37e7749c40c9ecefb35c6f677e6e2786" kindref="member">min_float_vector</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref><sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4259"><highlight class="normal"></highlight></codeline>
<codeline lineno="4260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max<sp/>&gt;<sp/>vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref>[i])<sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="4265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4266"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4267"><highlight class="normal"></highlight></codeline>
<codeline lineno="4268" refid="vector_8c_1ac870c654ea8b8143650fb8504880d80a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ac870c654ea8b8143650fb8504880d80a" kindref="member">min_double_vector</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref><sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4270"><highlight class="normal"></highlight></codeline>
<codeline lineno="4271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max<sp/>&gt;<sp/>vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref>[i])<sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="4274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="4276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4277"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4278"><highlight class="normal"></highlight></codeline>
<codeline lineno="4279" refid="vector_8c_1af3eef7302375a05b37b3ae4e0d8251a8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1af3eef7302375a05b37b3ae4e0d8251a8" kindref="member">min_ldouble_vector</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref><sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4281"><highlight class="normal"></highlight></codeline>
<codeline lineno="4282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref>[0];</highlight></codeline>
<codeline lineno="4283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max<sp/>&gt;<sp/>vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref>[i])<sp/>max<sp/>=<sp/>vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref>[i];</highlight></codeline>
<codeline lineno="4285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="4287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4288"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4289"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4290"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RANGE_TYPE_VEC<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4291"><highlight class="normal"></highlight></codeline>
<codeline lineno="4292" refid="vector_8c_1ac3589c6090a8dc24ffe4211dbb42b15f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ac3589c6090a8dc24ffe4211dbb42b15f" kindref="member">range_char_vector</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>end,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>delta)<sp/>{</highlight></codeline>
<codeline lineno="4293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>num<sp/>=<sp/>(end<sp/>-<sp/>start)<sp/>/<sp/>delta;</highlight></codeline>
<codeline lineno="4294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>advance<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="4295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num<sp/>+<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1ab4f076e9a6e7d0795c2c3a0216c5c97e" kindref="member">push_char_vector</ref>(vec,<sp/>advance,<sp/>vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>advance<sp/>+=<sp/>delta;</highlight></codeline>
<codeline lineno="4298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4300"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4301"><highlight class="normal"></highlight></codeline>
<codeline lineno="4302" refid="vector_8c_1a14f0626112aa000e6739a14556f761ed" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a14f0626112aa000e6739a14556f761ed" kindref="member">range_uchar_vector</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>end,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>delta)<sp/>{</highlight></codeline>
<codeline lineno="4303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>num<sp/>=<sp/>(end<sp/>-<sp/>start)<sp/>/<sp/>delta;</highlight></codeline>
<codeline lineno="4304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>advance<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="4305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num<sp/>+<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1acc6fd3b434ba25d3473adff60160500b" kindref="member">push_uchar_vector</ref>(vec,<sp/>advance,<sp/>vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>advance<sp/>+=<sp/>delta;</highlight></codeline>
<codeline lineno="4308"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4310"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4311"><highlight class="normal"></highlight></codeline>
<codeline lineno="4312" refid="vector_8c_1adb305706da4585539cd057cfa0ec0e2c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1adb305706da4585539cd057cfa0ec0e2c" kindref="member">range_short_vector</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delta)<sp/>{</highlight></codeline>
<codeline lineno="4313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num<sp/>=<sp/>(end<sp/>-<sp/>start)<sp/>/<sp/>delta;</highlight></codeline>
<codeline lineno="4314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>advance<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="4315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num<sp/>+<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a38068c17aa5cf7286175572d43219b8d" kindref="member">push_short_vector</ref>(vec,<sp/>advance,<sp/>vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>advance<sp/>+=<sp/>delta;</highlight></codeline>
<codeline lineno="4318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4320"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4321"><highlight class="normal"></highlight></codeline>
<codeline lineno="4322" refid="vector_8c_1a062892c86bd6a4934d91c804684cf755" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a062892c86bd6a4934d91c804684cf755" kindref="member">range_ushort_vector</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end,</highlight></codeline>
<codeline lineno="4323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delta)<sp/>{</highlight></codeline>
<codeline lineno="4324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num<sp/>=<sp/>(end<sp/>-<sp/>start)<sp/>/<sp/>delta;</highlight></codeline>
<codeline lineno="4325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>advance<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="4326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num<sp/>+<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a97670c026df2a05dda5b0c85ebeb4d69" kindref="member">push_ushort_vector</ref>(vec,<sp/>advance,<sp/>vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>advance<sp/>+=<sp/>delta;</highlight></codeline>
<codeline lineno="4329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4331"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4332"><highlight class="normal"></highlight></codeline>
<codeline lineno="4333" refid="vector_8c_1a184898353e0603cd18372448c8a842e4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a184898353e0603cd18372448c8a842e4" kindref="member">range_int_vector</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delta)<sp/>{</highlight></codeline>
<codeline lineno="4334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num<sp/>=<sp/>(end<sp/>-<sp/>start)<sp/>/<sp/>delta;</highlight></codeline>
<codeline lineno="4335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>advance<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="4336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num<sp/>+<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a6baf75dc56de293f3dbdc8ac40934980" kindref="member">push_int_vector</ref>(vec,<sp/>advance,<sp/>vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>advance<sp/>+=<sp/>delta;</highlight></codeline>
<codeline lineno="4339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4341"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4342"><highlight class="normal"></highlight></codeline>
<codeline lineno="4343" refid="vector_8c_1adce9ffbf72bc5678dbd702bf9840f363" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1adce9ffbf72bc5678dbd702bf9840f363" kindref="member">range_uint_vector</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end,</highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delta)<sp/>{</highlight></codeline>
<codeline lineno="4345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num<sp/>=<sp/>(end<sp/>-<sp/>start)<sp/>/<sp/>delta;</highlight></codeline>
<codeline lineno="4346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>advance<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="4347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num<sp/>+<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a787fc2bba6112c4ede10d0ec14ab3825" kindref="member">push_uint_vector</ref>(vec,<sp/>advance,<sp/>vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>advance<sp/>+=<sp/>delta;</highlight></codeline>
<codeline lineno="4350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4352"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4353"><highlight class="normal"></highlight></codeline>
<codeline lineno="4354" refid="vector_8c_1aed9932998976a7d3ce615075dd5af09b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1aed9932998976a7d3ce615075dd5af09b" kindref="member">range_long_vector</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delta)<sp/>{</highlight></codeline>
<codeline lineno="4355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num<sp/>=<sp/>(end<sp/>-<sp/>start)<sp/>/<sp/>delta;</highlight></codeline>
<codeline lineno="4356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>advance<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num<sp/>+<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a6135368684b7d740482cfc775417f255" kindref="member">push_long_vector</ref>(vec,<sp/>advance,<sp/>vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>advance<sp/>+=<sp/>delta;</highlight></codeline>
<codeline lineno="4360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4362"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4363"><highlight class="normal"></highlight></codeline>
<codeline lineno="4364" refid="vector_8c_1a4fe9caa2febfe85a1107394d8b42c348" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a4fe9caa2febfe85a1107394d8b42c348" kindref="member">range_ulong_vector</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end,</highlight></codeline>
<codeline lineno="4365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delta)<sp/>{</highlight></codeline>
<codeline lineno="4366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num<sp/>=<sp/>(end<sp/>-<sp/>start)<sp/>/<sp/>delta;</highlight></codeline>
<codeline lineno="4367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>advance<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="4368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num<sp/>+<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1aea5f95b56df2836ee553face60351e61" kindref="member">push_ulong_vector</ref>(vec,<sp/>advance,<sp/>vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>advance<sp/>+=<sp/>delta;</highlight></codeline>
<codeline lineno="4371"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4373"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4374"><highlight class="normal"></highlight></codeline>
<codeline lineno="4375" refid="vector_8c_1afa81d739815cef7056167d48361e0891" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1afa81d739815cef7056167d48361e0891" kindref="member">range_llong_vector</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delta)<sp/>{</highlight></codeline>
<codeline lineno="4376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num<sp/>=<sp/>(end<sp/>-<sp/>start)<sp/>/<sp/>delta;</highlight></codeline>
<codeline lineno="4377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>advance<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="4378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num<sp/>+<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a93f7e28f97718d9d7c5c84df61c1466c" kindref="member">push_llong_vector</ref>(vec,<sp/>advance,<sp/>vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>advance<sp/>+=<sp/>delta;</highlight></codeline>
<codeline lineno="4381"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4383"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4384"><highlight class="normal"></highlight></codeline>
<codeline lineno="4385" refid="vector_8c_1a6b8d5f1723a1e5e9a0d03da80e93b68e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a6b8d5f1723a1e5e9a0d03da80e93b68e" kindref="member">range_ullong_vector</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end,</highlight></codeline>
<codeline lineno="4386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delta)<sp/>{</highlight></codeline>
<codeline lineno="4387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num<sp/>=<sp/>(end<sp/>-<sp/>start)<sp/>/<sp/>delta;</highlight></codeline>
<codeline lineno="4388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>advance<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="4389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num<sp/>+<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a3478a298e62d85cb93f11a78f64d6f80" kindref="member">push_ullong_vector</ref>(vec,<sp/>advance,<sp/>vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>advance<sp/>+=<sp/>delta;</highlight></codeline>
<codeline lineno="4392"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4394"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4395"><highlight class="normal"></highlight></codeline>
<codeline lineno="4396" refid="vector_8c_1a85d0392c18b7db31c0a14bc2aa13448c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a85d0392c18b7db31c0a14bc2aa13448c" kindref="member">range_float_vector</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>end,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>delta)<sp/>{</highlight></codeline>
<codeline lineno="4397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>num<sp/>=<sp/>(end<sp/>-<sp/>start)<sp/>/<sp/>delta;</highlight></codeline>
<codeline lineno="4398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>advance<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="4399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num<sp/>+<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a31e02f437f4f9f43d1126e017ae1cac3" kindref="member">push_float_vector</ref>(vec,<sp/>advance,<sp/>vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>advance<sp/>+=<sp/>delta;</highlight></codeline>
<codeline lineno="4402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4404"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4405"><highlight class="normal"></highlight></codeline>
<codeline lineno="4406" refid="vector_8c_1a636afa2f2e2af7dbbd34b7cb42d11163" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a636afa2f2e2af7dbbd34b7cb42d11163" kindref="member">range_double_vector</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>end,</highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>delta)<sp/>{</highlight></codeline>
<codeline lineno="4408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>num<sp/>=<sp/>(end<sp/>-<sp/>start)<sp/>/<sp/>delta;</highlight></codeline>
<codeline lineno="4409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>advance<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="4410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num<sp/>+<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1ab312c467d82a0fccc66cbb89a6b8de5c" kindref="member">push_double_vector</ref>(vec,<sp/>advance,<sp/>vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>advance<sp/>+=<sp/>delta;</highlight></codeline>
<codeline lineno="4413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4415"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4416"><highlight class="normal"></highlight></codeline>
<codeline lineno="4417" refid="vector_8c_1ae5505a9a69a6701bcafa4b92eb06055f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ae5505a9a69a6701bcafa4b92eb06055f" kindref="member">range_ldouble_vector</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>end,</highlight></codeline>
<codeline lineno="4418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>delta)<sp/>{</highlight></codeline>
<codeline lineno="4419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>num<sp/>=<sp/>(end<sp/>-<sp/>start)<sp/>/<sp/>delta;</highlight></codeline>
<codeline lineno="4420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>advance<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="4421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num<sp/>+<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1ad001560a2793c40efb1c64532cefe2e2" kindref="member">push_ldouble_vector</ref>(vec,<sp/>advance,<sp/>vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>advance<sp/>+=<sp/>delta;</highlight></codeline>
<codeline lineno="4424"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4426"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4427"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4428"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TYPE_VECTOR_DATA<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4429"><highlight class="normal"></highlight></codeline>
<codeline lineno="4430" refid="vector_8c_1a34d64d0cfc6dc0e1e5b3ab4d685f9b17" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a34d64d0cfc6dc0e1e5b3ab4d685f9b17" kindref="member">short_vector_data</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref>[index];<sp/>}</highlight></codeline>
<codeline lineno="4431"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4432"><highlight class="normal"></highlight></codeline>
<codeline lineno="4433" refid="vector_8c_1ae64308782a33a82a606c6463d0511a19" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ae64308782a33a82a606c6463d0511a19" kindref="member">ushort_vector_data</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref>[index];<sp/>}</highlight></codeline>
<codeline lineno="4434"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4435"><highlight class="normal"></highlight></codeline>
<codeline lineno="4436" refid="vector_8c_1a3804e8951d833849ea5c7333b832bf1e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a3804e8951d833849ea5c7333b832bf1e" kindref="member">int_vector_data</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref>[index];<sp/>}</highlight></codeline>
<codeline lineno="4437"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4438"><highlight class="normal"></highlight></codeline>
<codeline lineno="4439" refid="vector_8c_1ac6172e0e9433875fa34c0faaf8647c6c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ac6172e0e9433875fa34c0faaf8647c6c" kindref="member">uint_vector_data</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref>[index];<sp/>}</highlight></codeline>
<codeline lineno="4440"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4441"><highlight class="normal"></highlight></codeline>
<codeline lineno="4442" refid="vector_8c_1a78c08d70ca4769c5fa2e4d87bcd35f4e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a78c08d70ca4769c5fa2e4d87bcd35f4e" kindref="member">long_vector_data</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref>[index];<sp/>}</highlight></codeline>
<codeline lineno="4443"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4444"><highlight class="normal"></highlight></codeline>
<codeline lineno="4445" refid="vector_8c_1ae7aed886f0e33fc044d7d7bafcea088b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ae7aed886f0e33fc044d7d7bafcea088b" kindref="member">ulong_vector_data</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref>[index];<sp/>}</highlight></codeline>
<codeline lineno="4446"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4447"><highlight class="normal"></highlight></codeline>
<codeline lineno="4448" refid="vector_8c_1ac368c61f3aceee6f22f7fdfd9c6866bc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ac368c61f3aceee6f22f7fdfd9c6866bc" kindref="member">llong_vector_data</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref>[index];<sp/>}</highlight></codeline>
<codeline lineno="4449"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4450"><highlight class="normal"></highlight></codeline>
<codeline lineno="4451" refid="vector_8c_1a401a9795be5292f8c20fb032218c4b1a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a401a9795be5292f8c20fb032218c4b1a" kindref="member">ullong_vector_data</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref>[index];<sp/>}</highlight></codeline>
<codeline lineno="4452"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4453"><highlight class="normal"></highlight></codeline>
<codeline lineno="4454" refid="vector_8c_1a84fbf5e526da1adcad6858a643df2462" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a84fbf5e526da1adcad6858a643df2462" kindref="member">float_vector_data</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref>[index];<sp/>}</highlight></codeline>
<codeline lineno="4455"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4456"><highlight class="normal"></highlight></codeline>
<codeline lineno="4457" refid="vector_8c_1a1c5e11f6eff0482afd6666532c1c150f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a1c5e11f6eff0482afd6666532c1c150f" kindref="member">double_vector_data</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref>[index];<sp/>}</highlight></codeline>
<codeline lineno="4458"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4459"><highlight class="normal"></highlight></codeline>
<codeline lineno="4460" refid="vector_8c_1a4ff7d557d90612b873092b0b9dd82b15" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a4ff7d557d90612b873092b0b9dd82b15" kindref="member">ldouble_vector_data</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref>[index];<sp/>}</highlight></codeline>
<codeline lineno="4461"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4462"><highlight class="normal"></highlight></codeline>
<codeline lineno="4463" refid="vector_8c_1aa99d3902c062bd4e5e31b85ccd8867bb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1aa99d3902c062bd4e5e31b85ccd8867bb" kindref="member">char_vector_data</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref>[index];<sp/>}</highlight></codeline>
<codeline lineno="4464"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4465"><highlight class="normal"></highlight></codeline>
<codeline lineno="4466" refid="vector_8c_1a5ec8248dfe94805dce29484cf23b9db5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a5ec8248dfe94805dce29484cf23b9db5" kindref="member">uchar_vector_data</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref>[index];<sp/>}</highlight></codeline>
<codeline lineno="4467"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4468"><highlight class="normal"></highlight></codeline>
<codeline lineno="4469" refid="vector_8c_1ab8ec8940661d127593fab26f02d3961a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ab8ec8940661d127593fab26f02d3961a" kindref="member">bool_vector_data</ref>(<ref refid="structBool" kindref="compound">Bool</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" kindref="member">array</ref>[index];<sp/>}</highlight></codeline>
<codeline lineno="4470"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4471"><highlight class="normal"></highlight></codeline>
<codeline lineno="4472" refid="vector_8c_1a1cb0a8bfe346307c5d842d15ffacbc0c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="vector_8c_1a1cb0a8bfe346307c5d842d15ffacbc0c" kindref="member">string_vector_data</ref>(<ref refid="structString" kindref="compound">String</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref>[index];<sp/>}</highlight></codeline>
<codeline lineno="4473"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4474"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4475"><highlight class="normal"></highlight><highlight class="comment">//<sp/>COPY_TYPE_VECTOR<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4476"><highlight class="normal"></highlight></codeline>
<codeline lineno="4477" refid="vector_8c_1ab88c9075f7ac94dd8656a8eec4a14a94" refkind="member"><highlight class="normal"><ref refid="structShort" kindref="compound">Short</ref><sp/><ref refid="vector_8c_1ab88c9075f7ac94dd8656a8eec4a14a94" kindref="member">copy_short_vector</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4478"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structShort" kindref="compound">Short</ref><sp/>new_vec;</highlight></codeline>
<codeline lineno="4479"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a749211e8a46a8b2297b3c6ebb78aed0e" kindref="member">init_short_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4480"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a2ed595a869e30a4c834c1d2cf5b934ee" kindref="member">insert_short_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref>,<sp/>vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="4481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_vec;</highlight></codeline>
<codeline lineno="4482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4483"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4484"><highlight class="normal"></highlight></codeline>
<codeline lineno="4485" refid="vector_8c_1af70602cee86af9597513bc67b2878244" refkind="member"><highlight class="normal"><ref refid="structUShort" kindref="compound">UShort</ref><sp/><ref refid="vector_8c_1af70602cee86af9597513bc67b2878244" kindref="member">copy_ushort_vector</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4486"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structUShort" kindref="compound">UShort</ref><sp/>new_vec;</highlight></codeline>
<codeline lineno="4487"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1aa63398bdb55f97b891b93404a89de14d" kindref="member">init_ushort_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4488"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1aa8495c3a316b6d93c8697d194c86fc2b" kindref="member">insert_ushort_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref>,<sp/>vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="4489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_vec;</highlight></codeline>
<codeline lineno="4490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4491"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4492"><highlight class="normal"></highlight></codeline>
<codeline lineno="4493" refid="vector_8c_1a5fd73621c9da27949814495f00a3296f" refkind="member"><highlight class="normal"><ref refid="structInt" kindref="compound">Int</ref><sp/><ref refid="vector_8c_1a5fd73621c9da27949814495f00a3296f" kindref="member">copy_int_vector</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4494"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structInt" kindref="compound">Int</ref><sp/>new_vec;</highlight></codeline>
<codeline lineno="4495"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a9fdb6c5fdd9f0d5a3bfb751f9e82968e" kindref="member">init_int_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4496"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a0acf8b86d4a95be517c7af80f8eff4ac" kindref="member">insert_int_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref>,<sp/>vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="4497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_vec;</highlight></codeline>
<codeline lineno="4498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4499"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4500"><highlight class="normal"></highlight></codeline>
<codeline lineno="4501" refid="vector_8c_1a6bf7c67135858a07103fff23436b7d77" refkind="member"><highlight class="normal"><ref refid="structUInt" kindref="compound">UInt</ref><sp/><ref refid="vector_8c_1a6bf7c67135858a07103fff23436b7d77" kindref="member">copy_uint_vector</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4502"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structUInt" kindref="compound">UInt</ref><sp/>new_vec;</highlight></codeline>
<codeline lineno="4503"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a9d8eb1d9ce65365d7b044fe684387a3f" kindref="member">init_uint_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4504"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1ad78d40537dece17df4f506fd6ba7dc34" kindref="member">insert_uint_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref>,<sp/>vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="4505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_vec;</highlight></codeline>
<codeline lineno="4506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4507"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4508"><highlight class="normal"></highlight></codeline>
<codeline lineno="4509" refid="vector_8c_1abc614587816c37e5dfd70c2a832da165" refkind="member"><highlight class="normal"><ref refid="structLInt" kindref="compound">LInt</ref><sp/><ref refid="vector_8c_1abc614587816c37e5dfd70c2a832da165" kindref="member">copy_long_vector</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4510"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structLInt" kindref="compound">LInt</ref><sp/>new_vec;</highlight></codeline>
<codeline lineno="4511"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1ac59c5fed0f4cd6b9aaf4c87b7a997bd3" kindref="member">init_long_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4512"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1ab5d840518e5e7bbd9ed243681b7124f7" kindref="member">insert_long_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref>,<sp/>vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="4513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_vec;</highlight></codeline>
<codeline lineno="4514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4515"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4516"><highlight class="normal"></highlight></codeline>
<codeline lineno="4517" refid="vector_8c_1a31f85f1454385a608eebc7d150417b7c" refkind="member"><highlight class="normal"><ref refid="structULInt" kindref="compound">ULInt</ref><sp/><ref refid="vector_8c_1a31f85f1454385a608eebc7d150417b7c" kindref="member">copy_ulong_vector</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4518"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structULInt" kindref="compound">ULInt</ref><sp/>new_vec;</highlight></codeline>
<codeline lineno="4519"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1af08098b392c0ff01db799bff9c83a521" kindref="member">init_ulong_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4520"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1aa419c32bb276bfe866787e1744669b94" kindref="member">insert_ulong_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref>,<sp/>vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="4521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_vec;</highlight></codeline>
<codeline lineno="4522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4523"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4524"><highlight class="normal"></highlight></codeline>
<codeline lineno="4525" refid="vector_8c_1a2a8c6a77d383c5251686fc600c829005" refkind="member"><highlight class="normal"><ref refid="structLLInt" kindref="compound">LLInt</ref><sp/><ref refid="vector_8c_1a2a8c6a77d383c5251686fc600c829005" kindref="member">copy_llong_vector</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4526"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>new_vec;</highlight></codeline>
<codeline lineno="4527"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a65eda538d3c07a8beb1475c1a214ff67" kindref="member">init_llong_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4528"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a9817d90055331624db7529c5d74a80ad" kindref="member">insert_llong_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref>,<sp/>vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="4529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_vec;</highlight></codeline>
<codeline lineno="4530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4531"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4532"><highlight class="normal"></highlight></codeline>
<codeline lineno="4533" refid="vector_8c_1abe7076983c8f386b305b615137dcd249" refkind="member"><highlight class="normal"><ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/><ref refid="vector_8c_1abe7076983c8f386b305b615137dcd249" kindref="member">copy_ullong_vector</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4534"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>new_vec;</highlight></codeline>
<codeline lineno="4535"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1ab05d31d34c87d8d6cd76f48539bf367f" kindref="member">init_ullong_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4536"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1afccda80cf8e96d76846df29a256f6974" kindref="member">insert_ullong_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref>,<sp/>vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="4537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_vec;</highlight></codeline>
<codeline lineno="4538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4539"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4540"><highlight class="normal"></highlight></codeline>
<codeline lineno="4541" refid="vector_8c_1a440353dc4ac989fb88b34e7f5649dd05" refkind="member"><highlight class="normal"><ref refid="structFlt" kindref="compound">Flt</ref><sp/><ref refid="vector_8c_1a440353dc4ac989fb88b34e7f5649dd05" kindref="member">copy_float_vector</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4542"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structFlt" kindref="compound">Flt</ref><sp/>new_vec;</highlight></codeline>
<codeline lineno="4543"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a92bba70874a1570bd9c87a2a7385af35" kindref="member">init_float_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4544"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a17ee89c38df38d9d1d5b0cb2e33266d1" kindref="member">insert_float_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref>,<sp/>vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="4545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_vec;</highlight></codeline>
<codeline lineno="4546"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4547"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4548"><highlight class="normal"></highlight></codeline>
<codeline lineno="4549" refid="vector_8c_1a2d51a8a92a5c0e73345ade59b126ff35" refkind="member"><highlight class="normal"><ref refid="structDble" kindref="compound">Dble</ref><sp/><ref refid="vector_8c_1a2d51a8a92a5c0e73345ade59b126ff35" kindref="member">copy_double_vector</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4550"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structDble" kindref="compound">Dble</ref><sp/>new_vec;</highlight></codeline>
<codeline lineno="4551"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a2c0735f69da8e40535b5ecceace1a399" kindref="member">init_double_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4552"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1af1e86e2b45b0339cc18ba5b35bf01132" kindref="member">insert_double_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref>,<sp/>vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="4553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_vec;</highlight></codeline>
<codeline lineno="4554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4555"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4556"><highlight class="normal"></highlight></codeline>
<codeline lineno="4557" refid="vector_8c_1a3fa3120b9c06e25fc840f90c7e10c5a6" refkind="member"><highlight class="normal"><ref refid="structLDble" kindref="compound">LDble</ref><sp/><ref refid="vector_8c_1a3fa3120b9c06e25fc840f90c7e10c5a6" kindref="member">copy_ldouble_vector</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4558"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structLDble" kindref="compound">LDble</ref><sp/>new_vec;</highlight></codeline>
<codeline lineno="4559"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a79d9f9d1d1cb31d09620bc5cdc73e94e" kindref="member">init_ldouble_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4560"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a0ec3e3b802f62c5f9cdd9b7d197bd4a1" kindref="member">insert_ldouble_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref>,<sp/>vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="4561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_vec;</highlight></codeline>
<codeline lineno="4562"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4563"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4564"><highlight class="normal"></highlight></codeline>
<codeline lineno="4565" refid="vector_8c_1a430a540aea6caac8002281b9a2ddbf7a" refkind="member"><highlight class="normal"><ref refid="structChar" kindref="compound">Char</ref><sp/><ref refid="vector_8c_1a430a540aea6caac8002281b9a2ddbf7a" kindref="member">copy_char_vector</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4566"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structChar" kindref="compound">Char</ref><sp/>new_vec;</highlight></codeline>
<codeline lineno="4567"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1aecde718777430d31ec254f8a4f40cce0" kindref="member">init_char_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4568"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a9e9db9d87d5a9f3bb6dae1ba5668ef12" kindref="member">insert_char_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref>,<sp/>vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="4569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_vec;</highlight></codeline>
<codeline lineno="4570"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4571"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4572"><highlight class="normal"></highlight></codeline>
<codeline lineno="4573" refid="vector_8c_1ac3e7f4298d195586bfc0cf8b0fc1a053" refkind="member"><highlight class="normal"><ref refid="structUChar" kindref="compound">UChar</ref><sp/><ref refid="vector_8c_1ac3e7f4298d195586bfc0cf8b0fc1a053" kindref="member">copy_uchar_vector</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4574"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structUChar" kindref="compound">UChar</ref><sp/>new_vec;</highlight></codeline>
<codeline lineno="4575"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a9289ec52674f95ebf45ac81b70dfdc67" kindref="member">init_uchar_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4576"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1ae5b1c45f4d2083c6d87f217646609a2d" kindref="member">insert_uchar_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref>,<sp/>vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="4577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_vec;</highlight></codeline>
<codeline lineno="4578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4579"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4580"><highlight class="normal"></highlight></codeline>
<codeline lineno="4581" refid="vector_8c_1a2e6c2d82128d66d5fe6800ee6ad9d277" refkind="member"><highlight class="normal"><ref refid="structBool" kindref="compound">Bool</ref><sp/><ref refid="vector_8c_1a2e6c2d82128d66d5fe6800ee6ad9d277" kindref="member">copy_bool_vector</ref>(<ref refid="structBool" kindref="compound">Bool</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4582"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structBool" kindref="compound">Bool</ref><sp/>new_vec;</highlight></codeline>
<codeline lineno="4583"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a2e1ea608c0b9b0768ba61facb8df913f" kindref="member">init_bool_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structBool_1a5445f6ef94d239208dc797c289fded75" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4584"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1ab344e3b36aa397f037cb2c573e1d3aff" kindref="member">insert_bool_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" kindref="member">array</ref>,<sp/>vec-&gt;<ref refid="structBool_1a5445f6ef94d239208dc797c289fded75" kindref="member">active_length</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="4585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_vec;</highlight></codeline>
<codeline lineno="4586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4587"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4588"><highlight class="normal"></highlight></codeline>
<codeline lineno="4589" refid="vector_8c_1a2cb84d3851679202a04f76066bc80a6e" refkind="member"><highlight class="normal"><ref refid="structString" kindref="compound">String</ref><sp/><ref refid="vector_8c_1a2cb84d3851679202a04f76066bc80a6e" kindref="member">copy_string_vector</ref>(<ref refid="structString" kindref="compound">String</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4590"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structString" kindref="compound">String</ref><sp/>new_vec;</highlight></codeline>
<codeline lineno="4591"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8c_1ad5c4c9d8676c13f1f381b0b6c1119c4d" kindref="member">init_string_vector</ref>(&amp;new_vec);</highlight></codeline>
<codeline lineno="4592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec-&gt;<ref refid="structString_1a706ffaf2f520d46074dd99e7896d6673" kindref="member">active_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="vector_8c_1a078616c26d55c1ddb2ec4c551298a4f8" kindref="member">push_string_vector</ref>(&amp;new_vec,<sp/>vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref>[i],<sp/>new_vec.<ref refid="structString_1a706ffaf2f520d46074dd99e7896d6673" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4594"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_vec;</highlight></codeline>
<codeline lineno="4596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4597"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4598"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4599"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TRIM_TYPE_VECTOR<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4600"><highlight class="normal"></highlight></codeline>
<codeline lineno="4601" refid="vector_8c_1aeec337d3614f9c62cd652fee528e8f10" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1aeec337d3614f9c62cd652fee528e8f10" kindref="member">trim_short_vector</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref>,<sp/>vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Realloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="4606"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4608"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="4609"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structShort_1af0b6f4e61e69b8a2f74d42b09b421d88" kindref="member">allocated_length</ref><sp/>=<sp/>vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref>;</highlight></codeline>
<codeline lineno="4610"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4611"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4612"><highlight class="normal"></highlight></codeline>
<codeline lineno="4613" refid="vector_8c_1a394639166d53eacb53725cf548f596db" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a394639166d53eacb53725cf548f596db" kindref="member">trim_ushort_vector</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref>,<sp/>vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Realloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="4618"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4620"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="4621"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUShort_1a0ef4541f3fd3fcee1c0f5809341c84d6" kindref="member">allocated_length</ref><sp/>=<sp/>vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref>;</highlight></codeline>
<codeline lineno="4622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4623"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4624"><highlight class="normal"></highlight></codeline>
<codeline lineno="4625" refid="vector_8c_1a1365d9e27b0080e8e48d9809987e0824" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a1365d9e27b0080e8e48d9809987e0824" kindref="member">trim_int_vector</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref>,<sp/>vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Realloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="4630"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4632"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="4633"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structInt_1a63bea8755b3ce6be7e83970b9ea3bd68" kindref="member">allocated_length</ref><sp/>=<sp/>vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref>;</highlight></codeline>
<codeline lineno="4634"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4635"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4636"><highlight class="normal"></highlight></codeline>
<codeline lineno="4637" refid="vector_8c_1aafc05a4201bf2e5129655a7d4db8819c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1aafc05a4201bf2e5129655a7d4db8819c" kindref="member">trim_uint_vector</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref>,<sp/>vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Realloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="4642"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4644"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="4645"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUInt_1a05b28efaec93c388e8685403f57a07ce" kindref="member">allocated_length</ref><sp/>=<sp/>vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref>;</highlight></codeline>
<codeline lineno="4646"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4647"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4648"><highlight class="normal"></highlight></codeline>
<codeline lineno="4649" refid="vector_8c_1a8e0993c9b72acdbb4eec8bdea1687fd2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a8e0993c9b72acdbb4eec8bdea1687fd2" kindref="member">trim_long_vector</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref>,<sp/>vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Realloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="4654"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4656"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="4657"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLInt_1a21eec79c847025348ad0082aab6dee52" kindref="member">allocated_length</ref><sp/>=<sp/>vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref>;</highlight></codeline>
<codeline lineno="4658"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4659"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4660"><highlight class="normal"></highlight></codeline>
<codeline lineno="4661" refid="vector_8c_1a2b44394f88268b15dfaf3640cb70f42f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a2b44394f88268b15dfaf3640cb70f42f" kindref="member">trim_ulong_vector</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref>,<sp/>vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Realloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="4666"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4668"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="4669"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULInt_1acf325510e03976f12c116ad68c4998ec" kindref="member">allocated_length</ref><sp/>=<sp/>vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref>;</highlight></codeline>
<codeline lineno="4670"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4671"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4672"><highlight class="normal"></highlight></codeline>
<codeline lineno="4673" refid="vector_8c_1ad500a258d2da444ab4d9a0315a241ab9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ad500a258d2da444ab4d9a0315a241ab9" kindref="member">trim_llong_vector</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref>,<sp/>vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Realloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="4678"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4680"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="4681"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLLInt_1a967c631e7b8192f0016845623ae04759" kindref="member">allocated_length</ref><sp/>=<sp/>vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref>;</highlight></codeline>
<codeline lineno="4682"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4683"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4684"><highlight class="normal"></highlight></codeline>
<codeline lineno="4685" refid="vector_8c_1aa2e26e5c689daa0f13844939ead1e484" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1aa2e26e5c689daa0f13844939ead1e484" kindref="member">trim_ullong_vector</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref>,<sp/>vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Realloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="4690"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4692"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="4693"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULLInt_1ac6210c003919694e4fccfc5885c8fcb4" kindref="member">allocated_length</ref><sp/>=<sp/>vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref>;</highlight></codeline>
<codeline lineno="4694"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4695"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4696"><highlight class="normal"></highlight></codeline>
<codeline lineno="4697" refid="vector_8c_1a78d86f1a5dc7e8f980fecfb2f8d12395" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a78d86f1a5dc7e8f980fecfb2f8d12395" kindref="member">trim_float_vector</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref>,<sp/>vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Realloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="4702"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4704"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="4705"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structFlt_1a917603eeaae1fb22accbfc8d9252a389" kindref="member">allocated_length</ref><sp/>=<sp/>vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref>;</highlight></codeline>
<codeline lineno="4706"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4707"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4708"><highlight class="normal"></highlight></codeline>
<codeline lineno="4709" refid="vector_8c_1a4a91fca62c49f8628e3efdc3713be344" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a4a91fca62c49f8628e3efdc3713be344" kindref="member">trim_double_vector</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref>,<sp/>vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Realloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="4714"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4716"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="4717"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structDble_1a83cb29dfe09183032473cc7ffe005f5d" kindref="member">allocated_length</ref><sp/>=<sp/>vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref>;</highlight></codeline>
<codeline lineno="4718"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4719"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4720"><highlight class="normal"></highlight></codeline>
<codeline lineno="4721" refid="vector_8c_1a7a50f85d6a874afbfdf345ba35b8a62e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a7a50f85d6a874afbfdf345ba35b8a62e" kindref="member">trim_ldouble_vector</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref>,<sp/>vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Realloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="4726"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4728"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="4729"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLDble_1a1f0f3fd968cab1acdebf0d43f632633f" kindref="member">allocated_length</ref><sp/>=<sp/>vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref>;</highlight></codeline>
<codeline lineno="4730"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4731"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4732"><highlight class="normal"></highlight></codeline>
<codeline lineno="4733" refid="vector_8c_1a4e9cace11cfb849b013d15d09053b0bb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a4e9cace11cfb849b013d15d09053b0bb" kindref="member">trim_char_vector</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref>,<sp/>vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Realloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="4738"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4740"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="4741"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structChar_1ab59977640c7539e5ae251af86d445257" kindref="member">allocated_length</ref><sp/>=<sp/>vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref>;</highlight></codeline>
<codeline lineno="4742"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4743"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4744"><highlight class="normal"></highlight></codeline>
<codeline lineno="4745" refid="vector_8c_1a03a2814037d5194b5c291edca0155ae9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a03a2814037d5194b5c291edca0155ae9" kindref="member">trim_uchar_vector</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref>,<sp/>vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Realloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="4750"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4752"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="4753"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUChar_1a69ec79fc44d9f3b1455705e24a819f4b" kindref="member">allocated_length</ref><sp/>=<sp/>vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref>;</highlight></codeline>
<codeline lineno="4754"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4755"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4756"><highlight class="normal"></highlight></codeline>
<codeline lineno="4757" refid="vector_8c_1ae838be1f19558e27f1c9ee40b7f0f368" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ae838be1f19558e27f1c9ee40b7f0f368" kindref="member">trim_bool_vector</ref>(<ref refid="structBool" kindref="compound">Bool</ref><sp/>*vec)<sp/>{</highlight></codeline>
<codeline lineno="4758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*)realloc(vec-&gt;<ref refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" kindref="member">array</ref>,<sp/>vec-&gt;<ref refid="structBool_1a5445f6ef94d239208dc797c289fded75" kindref="member">active_length</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>sufficient<sp/>memory<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Realloc<sp/>failed<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="4762"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4764"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" kindref="member">array</ref><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="4765"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structBool_1a4a353f55a013f72befc666e8d0708212" kindref="member">allocated_length</ref><sp/>=<sp/>vec-&gt;<ref refid="structBool_1a5445f6ef94d239208dc797c289fded75" kindref="member">active_length</ref>;</highlight></codeline>
<codeline lineno="4766"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4767"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4768"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4769"><highlight class="normal"></highlight><highlight class="comment">//<sp/>REPLACE_TYPE_VECTOR_INDEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4770"><highlight class="normal"></highlight></codeline>
<codeline lineno="4771" refid="vector_8c_1ab1de3c266f8b9ed02a1d6ce573da1f9a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ab1de3c266f8b9ed02a1d6ce573da1f9a" kindref="member">replace_short_vector_index</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="4772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref><sp/>||<sp/>index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>bounds<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="4774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4775"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4776"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structShort_1a04935e9b7f598fb961b481224a73351e" kindref="member">array</ref>[index]<sp/>=<sp/>new_value;</highlight></codeline>
<codeline lineno="4777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4778"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4779"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4780"><highlight class="normal"></highlight></codeline>
<codeline lineno="4781" refid="vector_8c_1a7bcc2cf2fbaf836342d35f0afa29eb74" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a7bcc2cf2fbaf836342d35f0afa29eb74" kindref="member">replace_ushort_vector_index</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="4782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref><sp/>||<sp/>index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>bounds<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="4784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4785"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4786"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUShort_1a2dda197933e737c731ad2643f47fd431" kindref="member">array</ref>[index]<sp/>=<sp/>new_value;</highlight></codeline>
<codeline lineno="4787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4788"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4789"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4790"><highlight class="normal"></highlight></codeline>
<codeline lineno="4791" refid="vector_8c_1a0e1744a0448c4e5dd1131593efb609b8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a0e1744a0448c4e5dd1131593efb609b8" kindref="member">replace_int_vector_index</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="4792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref><sp/>||<sp/>index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>bounds<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="4794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4795"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4796"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" kindref="member">array</ref>[index]<sp/>=<sp/>new_value;</highlight></codeline>
<codeline lineno="4797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4798"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4799"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4800"><highlight class="normal"></highlight></codeline>
<codeline lineno="4801" refid="vector_8c_1aa1fc20f1e5fbd217726f0fd27b8b6ed7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1aa1fc20f1e5fbd217726f0fd27b8b6ed7" kindref="member">replace_uint_vector_index</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="4802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref><sp/>||<sp/>index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>bounds<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="4804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4805"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4806"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" kindref="member">array</ref>[index]<sp/>=<sp/>new_value;</highlight></codeline>
<codeline lineno="4807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4808"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4809"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4810"><highlight class="normal"></highlight></codeline>
<codeline lineno="4811" refid="vector_8c_1a4ea2e9f2401e9cd4d1cbdbec1e149aba" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a4ea2e9f2401e9cd4d1cbdbec1e149aba" kindref="member">replace_long_vector_index</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="4812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref><sp/>||<sp/>index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>bounds<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="4814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4815"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4816"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" kindref="member">array</ref>[index]<sp/>=<sp/>new_value;</highlight></codeline>
<codeline lineno="4817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4818"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4819"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4820"><highlight class="normal"></highlight></codeline>
<codeline lineno="4821" refid="vector_8c_1abc7605a0d1c96745f5a21cde7850d646" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1abc7605a0d1c96745f5a21cde7850d646" kindref="member">replace_ulong_vector_index</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="4822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref><sp/>||<sp/>index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>bounds<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="4824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4825"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4826"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" kindref="member">array</ref>[index]<sp/>=<sp/>new_value;</highlight></codeline>
<codeline lineno="4827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4828"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4829"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4830"><highlight class="normal"></highlight></codeline>
<codeline lineno="4831" refid="vector_8c_1a3743c4611f8d5bc6f7b50d138349e419" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a3743c4611f8d5bc6f7b50d138349e419" kindref="member">replace_llong_vector_index</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="4832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref><sp/>||<sp/>index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>bounds<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="4834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4835"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4836"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" kindref="member">array</ref>[index]<sp/>=<sp/>new_value;</highlight></codeline>
<codeline lineno="4837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4838"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4839"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4840"><highlight class="normal"></highlight></codeline>
<codeline lineno="4841" refid="vector_8c_1aec90d973d5ddfd94b2be73686077c4cb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1aec90d973d5ddfd94b2be73686077c4cb" kindref="member">replace_ullong_vector_index</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="4842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref><sp/>||<sp/>index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>bounds<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="4844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4845"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4846"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" kindref="member">array</ref>[index]<sp/>=<sp/>new_value;</highlight></codeline>
<codeline lineno="4847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4848"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4849"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4850"><highlight class="normal"></highlight></codeline>
<codeline lineno="4851" refid="vector_8c_1a9a562517abca96c42b1b9fe69469915f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a9a562517abca96c42b1b9fe69469915f" kindref="member">replace_float_vector_index</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>new_value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="4852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref><sp/>||<sp/>index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>bounds<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="4854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4855"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4856"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" kindref="member">array</ref>[index]<sp/>=<sp/>new_value;</highlight></codeline>
<codeline lineno="4857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4858"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4859"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4860"><highlight class="normal"></highlight></codeline>
<codeline lineno="4861" refid="vector_8c_1a25c9a8f29ce2515cf260c9a50745fc69" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a25c9a8f29ce2515cf260c9a50745fc69" kindref="member">replace_double_vector_index</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>new_value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="4862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref><sp/>||<sp/>index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>bounds<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="4864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4865"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4866"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structDble_1a581ba4d948776393590092041ca3a2e6" kindref="member">array</ref>[index]<sp/>=<sp/>new_value;</highlight></codeline>
<codeline lineno="4867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4868"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4869"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4870"><highlight class="normal"></highlight></codeline>
<codeline lineno="4871" refid="vector_8c_1a81d619ab6affe5d8ffa3e79c099c9bb8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a81d619ab6affe5d8ffa3e79c099c9bb8" kindref="member">replace_ldouble_vector_index</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>new_value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="4872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref><sp/>||<sp/>index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>bounds<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="4874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4875"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4876"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" kindref="member">array</ref>[index]<sp/>=<sp/>new_value;</highlight></codeline>
<codeline lineno="4877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4878"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4879"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4880"><highlight class="normal"></highlight></codeline>
<codeline lineno="4881" refid="vector_8c_1a5f8e0b70e42100f1ef36d8ba5f9115bf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a5f8e0b70e42100f1ef36d8ba5f9115bf" kindref="member">replace_char_vector_index</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>new_value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="4882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref><sp/>||<sp/>index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>bounds<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="4884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4885"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4886"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" kindref="member">array</ref>[index]<sp/>=<sp/>new_value;</highlight></codeline>
<codeline lineno="4887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4888"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4889"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4890"><highlight class="normal"></highlight></codeline>
<codeline lineno="4891" refid="vector_8c_1a9eaf5407b4c3a2f3db66ea179836beac" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a9eaf5407b4c3a2f3db66ea179836beac" kindref="member">replace_uchar_vector_index</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>new_value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="4892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref><sp/>||<sp/>index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>bounds<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="4894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4895"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4896"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structUChar_1acf5b94473575f93947d914fcc915fde5" kindref="member">array</ref>[index]<sp/>=<sp/>new_value;</highlight></codeline>
<codeline lineno="4897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4898"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4899"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4900"><highlight class="normal"></highlight></codeline>
<codeline lineno="4901" refid="vector_8c_1aadfbe9f5e5b78204f55c342826be1cd5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1aadfbe9f5e5b78204f55c342826be1cd5" kindref="member">replace_bool_vector_index</ref>(<ref refid="structBool" kindref="compound">Bool</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>new_value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="4902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>vec-&gt;<ref refid="structBool_1a5445f6ef94d239208dc797c289fded75" kindref="member">active_length</ref><sp/>||<sp/>index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>bounds<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="4904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4905"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4906"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" kindref="member">array</ref>[index]<sp/>=<sp/>new_value;</highlight></codeline>
<codeline lineno="4907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4908"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4909"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4910"><highlight class="normal"></highlight></codeline>
<codeline lineno="4911" refid="vector_8c_1a011a6f61257e9d5cc3296475ae8845ed" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a011a6f61257e9d5cc3296475ae8845ed" kindref="member">replace_string_vector_index</ref>(<ref refid="structString" kindref="compound">String</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*new_value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="4912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>vec-&gt;<ref refid="structString_1a706ffaf2f520d46074dd99e7896d6673" kindref="member">active_length</ref><sp/>||<sp/>index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>bounds<sp/>in<sp/>file<sp/>%s<sp/>on<sp/>line<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="4914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4915"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4916"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref>[index]<sp/>=<sp/>new_value;</highlight></codeline>
<codeline lineno="4917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4918"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4919"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4920"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4921"><highlight class="normal"></highlight><highlight class="comment">//<sp/>REPEAT_TYPE_VECTOR<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4922"><highlight class="normal"></highlight></codeline>
<codeline lineno="4923" refid="vector_8c_1a1fbfbfeed7892cd604ac2175048a1ff3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a1fbfbfeed7892cd604ac2175048a1ff3" kindref="member">repeat_short_vector</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num)<sp/>{</highlight></codeline>
<codeline lineno="4924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="4925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/><ref refid="vector_8c_1a38068c17aa5cf7286175572d43219b8d" kindref="member">push_short_vector</ref>(vec,<sp/>value,<sp/>vec-&gt;<ref refid="structShort_1acbbd74e6339b5e0398be80890927ea67" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4928"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4930"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4931"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4932"><highlight class="normal"></highlight></codeline>
<codeline lineno="4933" refid="vector_8c_1a87921615a6088f8e15e74f796abd294e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a87921615a6088f8e15e74f796abd294e" kindref="member">repeat_ushort_vector</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num)<sp/>{</highlight></codeline>
<codeline lineno="4934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="4935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/><ref refid="vector_8c_1a97670c026df2a05dda5b0c85ebeb4d69" kindref="member">push_ushort_vector</ref>(vec,<sp/>value,<sp/>vec-&gt;<ref refid="structUShort_1ac29248ce011dce670f4471a571e94002" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4938"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4940"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4941"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4942"><highlight class="normal"></highlight></codeline>
<codeline lineno="4943" refid="vector_8c_1aeb26b3546bef2bb8e5afc6a8c93d23a1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1aeb26b3546bef2bb8e5afc6a8c93d23a1" kindref="member">repeat_int_vector</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num)<sp/>{</highlight></codeline>
<codeline lineno="4944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="4945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/><ref refid="vector_8c_1a6baf75dc56de293f3dbdc8ac40934980" kindref="member">push_int_vector</ref>(vec,<sp/>value,<sp/>vec-&gt;<ref refid="structInt_1af876a5749646fd07a6966461e2d67a1a" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4948"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4950"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4951"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4952"><highlight class="normal"></highlight></codeline>
<codeline lineno="4953" refid="vector_8c_1a1aa1df7f7e77404e77862ca75666165c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a1aa1df7f7e77404e77862ca75666165c" kindref="member">repeat_uint_vector</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num)<sp/>{</highlight></codeline>
<codeline lineno="4954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="4955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/><ref refid="vector_8c_1a787fc2bba6112c4ede10d0ec14ab3825" kindref="member">push_uint_vector</ref>(vec,<sp/>value,<sp/>vec-&gt;<ref refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4958"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4960"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4961"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4962"><highlight class="normal"></highlight></codeline>
<codeline lineno="4963" refid="vector_8c_1a1f0914c2c37de3b81b706c77be31e57a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a1f0914c2c37de3b81b706c77be31e57a" kindref="member">repeat_long_vector</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num)<sp/>{</highlight></codeline>
<codeline lineno="4964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="4965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/><ref refid="vector_8c_1a6135368684b7d740482cfc775417f255" kindref="member">push_long_vector</ref>(vec,<sp/>value,<sp/>vec-&gt;<ref refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4968"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4970"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4971"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4972"><highlight class="normal"></highlight></codeline>
<codeline lineno="4973" refid="vector_8c_1a8c9c95f3e41bcaa00e99db959130c509" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a8c9c95f3e41bcaa00e99db959130c509" kindref="member">repeat_ulong_vector</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num)<sp/>{</highlight></codeline>
<codeline lineno="4974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="4975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/><ref refid="vector_8c_1aea5f95b56df2836ee553face60351e61" kindref="member">push_ulong_vector</ref>(vec,<sp/>value,<sp/>vec-&gt;<ref refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4978"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4980"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4981"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4982"><highlight class="normal"></highlight></codeline>
<codeline lineno="4983" refid="vector_8c_1a7c24fd593c9332ba1779b780b85cc893" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a7c24fd593c9332ba1779b780b85cc893" kindref="member">repeat_llong_vector</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num)<sp/>{</highlight></codeline>
<codeline lineno="4984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="4985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/><ref refid="vector_8c_1a93f7e28f97718d9d7c5c84df61c1466c" kindref="member">push_llong_vector</ref>(vec,<sp/>value,<sp/>vec-&gt;<ref refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4988"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4990"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4991"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4992"><highlight class="normal"></highlight></codeline>
<codeline lineno="4993" refid="vector_8c_1a6f8e17e6a8930bf7bf0f7422d65eeab5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a6f8e17e6a8930bf7bf0f7422d65eeab5" kindref="member">repeat_ullong_vector</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num)<sp/>{</highlight></codeline>
<codeline lineno="4994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="4995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/><ref refid="vector_8c_1a3478a298e62d85cb93f11a78f64d6f80" kindref="member">push_ullong_vector</ref>(vec,<sp/>value,<sp/>vec-&gt;<ref refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="4997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4998"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="5000"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5001"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5002"><highlight class="normal"></highlight></codeline>
<codeline lineno="5003" refid="vector_8c_1a58a085c7febff1b1bd9e6ec90510b36a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a58a085c7febff1b1bd9e6ec90510b36a" kindref="member">repeat_float_vector</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num)<sp/>{</highlight></codeline>
<codeline lineno="5004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="5005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="5006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/><ref refid="vector_8c_1a31e02f437f4f9f43d1126e017ae1cac3" kindref="member">push_float_vector</ref>(vec,<sp/>value,<sp/>vec-&gt;<ref refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="5007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="5008"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="5010"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5011"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5012"><highlight class="normal"></highlight></codeline>
<codeline lineno="5013" refid="vector_8c_1ac2a03364dd0dc653854b1f70101514c6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1ac2a03364dd0dc653854b1f70101514c6" kindref="member">repeat_double_vector</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num)<sp/>{</highlight></codeline>
<codeline lineno="5014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="5015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="5016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/><ref refid="vector_8c_1ab312c467d82a0fccc66cbb89a6b8de5c" kindref="member">push_double_vector</ref>(vec,<sp/>value,<sp/>vec-&gt;<ref refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="5017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="5018"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="5020"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5021"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5022"><highlight class="normal"></highlight></codeline>
<codeline lineno="5023" refid="vector_8c_1a34a56cde6bc6f420f8b9063bf87232e1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a34a56cde6bc6f420f8b9063bf87232e1" kindref="member">repeat_ldouble_vector</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num)<sp/>{</highlight></codeline>
<codeline lineno="5024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="5025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="5026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/><ref refid="vector_8c_1ad001560a2793c40efb1c64532cefe2e2" kindref="member">push_ldouble_vector</ref>(vec,<sp/>value,<sp/>vec-&gt;<ref refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="5027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="5028"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="5030"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5031"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5032"><highlight class="normal"></highlight></codeline>
<codeline lineno="5033" refid="vector_8c_1a10df883121d1f71d331ae6ba273357f1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a10df883121d1f71d331ae6ba273357f1" kindref="member">repeat_bool_vector</ref>(<ref refid="structBool" kindref="compound">Bool</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num)<sp/>{</highlight></codeline>
<codeline lineno="5034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="5035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="5036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/><ref refid="vector_8c_1a66a1a1c291efbab607defa13421167dc" kindref="member">push_bool_vector</ref>(vec,<sp/>value,<sp/>vec-&gt;<ref refid="structBool_1a5445f6ef94d239208dc797c289fded75" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="5037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="5038"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="5040"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5041"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5042"><highlight class="normal"></highlight></codeline>
<codeline lineno="5043" refid="vector_8c_1aece15dcc8e9d3cf0fa0cb65c0b7a05f2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1aece15dcc8e9d3cf0fa0cb65c0b7a05f2" kindref="member">repeat_char_vector</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num)<sp/>{</highlight></codeline>
<codeline lineno="5044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="5045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="5046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/><ref refid="vector_8c_1ab4f076e9a6e7d0795c2c3a0216c5c97e" kindref="member">push_char_vector</ref>(vec,<sp/>value,<sp/>vec-&gt;<ref refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="5047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="5048"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="5050"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5051"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5052"><highlight class="normal"></highlight></codeline>
<codeline lineno="5053" refid="vector_8c_1aa03b84f9a537aa95ab335f38448051a0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1aa03b84f9a537aa95ab335f38448051a0" kindref="member">repeat_uchar_vector</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num)<sp/>{</highlight></codeline>
<codeline lineno="5054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="5055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="5056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/><ref refid="vector_8c_1acc6fd3b434ba25d3473adff60160500b" kindref="member">push_uchar_vector</ref>(vec,<sp/>value,<sp/>vec-&gt;<ref refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="5057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="5058"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="5060"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5061"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5062"><highlight class="normal"></highlight></codeline>
<codeline lineno="5063" refid="vector_8c_1a9f6bd7ebba53e2d4eb0b8e3d8931029c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8c_1a9f6bd7ebba53e2d4eb0b8e3d8931029c" kindref="member">repeat_string_vector</ref>(<ref refid="structString" kindref="compound">String</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num)<sp/>{</highlight></codeline>
<codeline lineno="5064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="5065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="5066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/><ref refid="vector_8c_1a078616c26d55c1ddb2ec4c551298a4f8" kindref="member">push_string_vector</ref>(vec,<sp/>value,<sp/>vec-&gt;<ref refid="structString_1a706ffaf2f520d46074dd99e7896d6673" kindref="member">active_length</ref>);</highlight></codeline>
<codeline lineno="5067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="5068"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="5070"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5071"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5072"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5073"><highlight class="normal"></highlight><highlight class="comment">//<sp/>eof</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c"/>
  </compounddef>
</doxygen>
