<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="vector_8h" kind="file" language="C++">
    <compoundname>vector.h</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="swap_8h" local="yes">swap.h</includes>
    <includedby refid="data__structures_8h" local="yes">/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/data_structures.h</includedby>
    <includedby refid="print_8h" local="yes">/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.h</includedby>
    <includedby refid="vector_8c" local="yes">/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c</includedby>
    <incdepgraph>
      <node id="6">
        <label>swap.h</label>
        <link refid="swap_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h</label>
        <link refid="vector_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdbool.h</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="5">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/data_structures.c</label>
        <link refid="data__structures_8c"/>
      </node>
      <node id="2">
        <label>/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/data_structures.h</label>
        <link refid="data__structures_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.c</label>
        <link refid="print_8c"/>
      </node>
      <node id="4">
        <label>/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/print.h</label>
        <link refid="print_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c</label>
        <link refid="vector_8c"/>
      </node>
      <node id="1">
        <label>/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h</label>
        <link refid="vector_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structShort" prot="public">Short</innerclass>
    <innerclass refid="structUShort" prot="public">UShort</innerclass>
    <innerclass refid="structInt" prot="public">Int</innerclass>
    <innerclass refid="structUInt" prot="public">UInt</innerclass>
    <innerclass refid="structLInt" prot="public">LInt</innerclass>
    <innerclass refid="structULInt" prot="public">ULInt</innerclass>
    <innerclass refid="structLLInt" prot="public">LLInt</innerclass>
    <innerclass refid="structULLInt" prot="public">ULLInt</innerclass>
    <innerclass refid="structFlt" prot="public">Flt</innerclass>
    <innerclass refid="structDble" prot="public">Dble</innerclass>
    <innerclass refid="structLDble" prot="public">LDble</innerclass>
    <innerclass refid="structChar" prot="public">Char</innerclass>
    <innerclass refid="structUChar" prot="public">UChar</innerclass>
    <innerclass refid="structBool" prot="public">Bool</innerclass>
    <innerclass refid="structString" prot="public">String</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="vector_8h_1a84eaf8fe661d2d8eb9275491bc8329df" prot="public" static="no">
        <name>VECTOR_STRUCT</name>
        <param><defname>type</defname></param>
        <param><defname>dtype</defname></param>
        <initializer>	typedef struct {type *array; size_t allocated_length; size_t active_length; <ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5" kindref="member">mem_type</ref> dat_type; } dtype</initializer>
        <briefdescription>
<para>Create a struct for managing dynamic or static arrays. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro will produce a struct that is specifically designed to track all attributes necessary for the maintenance of a dynamically, or statically allocated array. The macro has an attribute to a pointer for the array, allocated_length, active_length, and mem_type.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The data type that will be assigned to the array pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>The name to be given to the typedef for the struct</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">//<sp/>code<sp/>to<sp/>create<sp/>a<sp/>struct<sp/>of<sp/>type<sp/>IntVector</highlight></codeline>
<codeline><highlight class="normal">VECTOR_STRUCT(float,<sp/>IntVector)</highlight></codeline>
<codeline><highlight class="normal">IntVector<sp/>vec;</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="71" column="9" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" bodystart="71" bodyend="72"/>
      </memberdef>
      <memberdef kind="define" id="vector_8h_1a78b085b69ede6314aedfc346b480a078" prot="public" static="no">
        <name>INIT_VECTOR</name>
        <param><defname>T</defname></param>
        <param><defname>length</defname></param>
        <initializer>										           _Generic( (T), Short: <ref refid="vector_8c_1a749211e8a46a8b2297b3c6ebb78aed0e" kindref="member">init_short_vector</ref>, \
										           UShort: <ref refid="vector_8c_1aa63398bdb55f97b891b93404a89de14d" kindref="member">init_ushort_vector</ref>, \
										           Int: <ref refid="vector_8c_1a9fdb6c5fdd9f0d5a3bfb751f9e82968e" kindref="member">init_int_vector</ref>, \
										           UInt: <ref refid="vector_8c_1a9d8eb1d9ce65365d7b044fe684387a3f" kindref="member">init_uint_vector</ref>, \
										           LInt: <ref refid="vector_8c_1ac59c5fed0f4cd6b9aaf4c87b7a997bd3" kindref="member">init_long_vector</ref>, \
										           ULInt: <ref refid="vector_8c_1af08098b392c0ff01db799bff9c83a521" kindref="member">init_ulong_vector</ref>, \
										           LLInt: <ref refid="vector_8c_1a65eda538d3c07a8beb1475c1a214ff67" kindref="member">init_llong_vector</ref>, \
										           ULLInt: <ref refid="vector_8c_1ab05d31d34c87d8d6cd76f48539bf367f" kindref="member">init_ullong_vector</ref>, \
										           Flt: <ref refid="vector_8c_1a92bba70874a1570bd9c87a2a7385af35" kindref="member">init_float_vector</ref>, \
										           Dble: <ref refid="vector_8c_1a2c0735f69da8e40535b5ecceace1a399" kindref="member">init_double_vector</ref>, \
										           LDble: <ref refid="vector_8c_1a79d9f9d1d1cb31d09620bc5cdc73e94e" kindref="member">init_ldouble_vector</ref>, \
										           Char: <ref refid="vector_8c_1aecde718777430d31ec254f8a4f40cce0" kindref="member">init_char_vector</ref>, \
												   UChar: <ref refid="vector_8c_1a9289ec52674f95ebf45ac81b70dfdc67" kindref="member">init_uchar_vector</ref>, \
												   Bool: <ref refid="vector_8c_1a2e1ea608c0b9b0768ba61facb8df913f" kindref="member">init_bool_vector</ref>)(&amp;T, length)</initializer>
        <briefdescription>
<para>This macro will allocate memory for an array and assign that memory to the array pointer variable in a struct. The macro will also assign the number of allocated indices to allocated_length and assign active_length a size of 0. This function requires the input of a struct instantiated with the VECTOR_STRUCT method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector instantiated with the VECTOR_STRUCT macro. @length The length of the array as a size_t variable</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">//<sp/>Initialize<sp/>a<sp/>dynamically<sp/>allocated<sp/>Integer<sp/>vector<sp/>with<sp/>0<sp/>indices</highlight></codeline>
<codeline><highlight class="normal">Int<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">INIT_VECTOR(vec,<sp/>20)</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="284" column="9" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" bodystart="284" bodyend="297"/>
      </memberdef>
      <memberdef kind="define" id="vector_8h_1a77aa58ae761e2e9fe859c4ac316bec41" prot="public" static="no">
        <name>INIT_ARRAY</name>
        <param><defname>T</defname></param>
        <param><defname>arr</defname></param>
        <param><defname>aloc_len</defname></param>
        <param><defname>active_len</defname></param>
        <initializer>										           _Generic( (T), Short: <ref refid="vector_8c_1acb7b3bcd9252ad84ea9d05436f57bd6c" kindref="member">init_short_array</ref>, \
										           UShort: <ref refid="vector_8c_1abbac579a20b2655deda9ec8a915fcfb7" kindref="member">init_ushort_array</ref>, \
										           Int: <ref refid="vector_8c_1a29734ea7a6541b75cd3824bc05e3e589" kindref="member">init_int_array</ref>, \
										           UInt: <ref refid="vector_8c_1a2739fb21bf4216de09c51c393b89ece7" kindref="member">init_uint_array</ref>, \
										           LInt: <ref refid="vector_8c_1acbddef55e279d25613203d2f14957597" kindref="member">init_long_array</ref>, \
										           ULInt: <ref refid="vector_8c_1acdf31865e9c36adc693dd7fa7fadcacc" kindref="member">init_ulong_array</ref>, \
										           LLInt: <ref refid="vector_8c_1a65e3799f14e154e10bd3ce7a4d4fe184" kindref="member">init_llong_array</ref>, \
										           ULLInt: <ref refid="vector_8c_1a39d896e588ac932b9958b4f2e32d97c2" kindref="member">init_ullong_array</ref>, \
										           Flt: <ref refid="vector_8c_1a5fcc9ae29ce6bd76060856b388992240" kindref="member">init_float_array</ref>, \
										           Dble: <ref refid="vector_8c_1af1f590cad5f66c4caded12d7cd92675b" kindref="member">init_double_array</ref>, \
										           LDble: <ref refid="vector_8c_1ae670278f7c9522a0fdc6b261cb76e5e5" kindref="member">init_ldouble_array</ref>, \
										           Char: <ref refid="vector_8c_1a85ef363e6bfd0897ffc5ccb10c5eb721" kindref="member">init_char_array</ref>, \
												   UChar: <ref refid="vector_8c_1a2f22fc4866a5c4e5ba5cc10fbf73bb5e" kindref="member">init_uchar_array</ref>, \
												   Bool: <ref refid="vector_8c_1ad2512ad5d79463921401fee2bf996b10" kindref="member">init_bool_array</ref>)(&amp;T, arr, aloc_len, active_len)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="571" column="9" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" bodystart="571" bodyend="584"/>
      </memberdef>
      <memberdef kind="define" id="vector_8h_1ae7ea4c14f63edfd4d7c039a02ae1a65e" prot="public" static="no">
        <name>TRIM</name>
        <param><defname>T</defname></param>
        <initializer>							   _Generic( (T), Short: <ref refid="vector_8c_1aeec337d3614f9c62cd652fee528e8f10" kindref="member">trim_short_vector</ref>, \
							   UShort: <ref refid="vector_8c_1a394639166d53eacb53725cf548f596db" kindref="member">trim_ushort_vector</ref>, \
							   Int: <ref refid="vector_8c_1a1365d9e27b0080e8e48d9809987e0824" kindref="member">trim_int_vector</ref>, \
							   UInt: <ref refid="vector_8c_1aafc05a4201bf2e5129655a7d4db8819c" kindref="member">trim_uint_vector</ref>, \
							   LInt: <ref refid="vector_8c_1a8e0993c9b72acdbb4eec8bdea1687fd2" kindref="member">trim_long_vector</ref>, \
							   ULInt: <ref refid="vector_8c_1a2b44394f88268b15dfaf3640cb70f42f" kindref="member">trim_ulong_vector</ref>, \
							   LLInt: <ref refid="vector_8c_1ad500a258d2da444ab4d9a0315a241ab9" kindref="member">trim_llong_vector</ref>, \
							   ULLInt: <ref refid="vector_8c_1aa2e26e5c689daa0f13844939ead1e484" kindref="member">trim_ullong_vector</ref>, \
							   Flt: <ref refid="vector_8c_1a78d86f1a5dc7e8f980fecfb2f8d12395" kindref="member">trim_float_vector</ref>, \
							   Dble: <ref refid="vector_8c_1a4a91fca62c49f8628e3efdc3713be344" kindref="member">trim_double_vector</ref>, \
							   LDble: <ref refid="vector_8c_1a7a50f85d6a874afbfdf345ba35b8a62e" kindref="member">trim_ldouble_vector</ref>, \
							   Char: <ref refid="vector_8c_1a4e9cace11cfb849b013d15d09053b0bb" kindref="member">trim_char_vector</ref>, \
							   UChar: <ref refid="vector_8c_1a03a2814037d5194b5c291edca0155ae9" kindref="member">trim_uchar_vector</ref>, \
							   Bool: <ref refid="vector_8c_1ae838be1f19558e27f1c9ee40b7f0f368" kindref="member">trim_bool_vector</ref>)(&amp;T)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro to trim a vecotr or array memory to minimum necessary value</para>
<para>/param vec The vector to be trimmed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5837" column="9" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" bodystart="5837" bodyend="5850"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="vector_8h_1ad756268621f03e4812b68792b291fff5" prot="public" static="no" strong="no">
        <type></type>
        <name>mem_type</name>
        <enumvalue id="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" prot="public">
          <name>DYNAMIC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" prot="public">
          <name>STATIC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A collection of human readable integer representations that describe how memory is allocated to a vector or array</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DYNAMIC</parametername>
</parameternamelist>
<parameterdescription>
<para>An integer representing dynamic memory allocation on the heap </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>STATIC</parametername>
</parameternamelist>
<parameterdescription>
<para>An integer representing static memory allocation on the stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="36" column="1" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="enum" id="vector_8h_1af40f59df20b550c793c470752e457636" prot="public" static="no" strong="no">
        <type></type>
        <name>sort_order</name>
        <enumvalue id="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" prot="public">
          <name>FORWARD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vector_8h_1af40f59df20b550c793c470752e457636a906b7cc20b42994dda4da492767c1de9" prot="public">
          <name>REVERSE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A collection of human readable integer representations that describe whether an array is to be sorted in the forward or reverse direction </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="47" column="1" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" bodystart="48" bodyend="51"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="vector_8h_1a749211e8a46a8b2297b3c6ebb78aed0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int init_short_vector</definition>
        <argsstring>(Short *vec, size_t length)</argsstring>
        <name>init_short_vector</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>A function used to initialize a short integer vector struct. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>A Vector struct of type <ref refid="structShort" kindref="compound">Short</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The initial guess for the number of indices in the dynamically allocated array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the struct is sucesfully initialized, -1 otherwise, with a stderr message </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="112" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="18" bodyend="30" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="112" declcolumn="5"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1af0b6f4e61e69b8a2f74d42b09b421d88" compoundref="vector_8h" startline="77">Short::allocated_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
        <references refid="structShort_1a20b9c526866b593e8e1ecdc49515e642" compoundref="vector_8h" startline="77">Short::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <referencedby refid="vector_8c_1ab88c9075f7ac94dd8656a8eec4a14a94" compoundref="vector_8c" startline="4477" endline="4482">copy_short_vector</referencedby>
        <referencedby refid="vector_8c_1a588f2bea0a2ac3d8bf87184d873a2804" compoundref="vector_8c" startline="3020" endline="3029">cumsum_short_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1aa63398bdb55f97b891b93404a89de14d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int init_ushort_vector</definition>
        <argsstring>(UShort *vec, size_t length)</argsstring>
        <name>init_ushort_vector</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>A function to initiaize an unsigned short vector struct. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>A Vector struct of type <ref refid="structUShort" kindref="compound">UShort</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The initial guess for the number of indices in the dynamically allocated array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the struct is sucesfully initialized, -1 otherwise, with a stderr message </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="124" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="33" bodyend="45" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="124" declcolumn="5"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a0ef4541f3fd3fcee1c0f5809341c84d6" compoundref="vector_8h" startline="78">UShort::allocated_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
        <references refid="structUShort_1a4c5d40034bbd1e9ee0de773d6be0c31e" compoundref="vector_8h" startline="78">UShort::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <referencedby refid="vector_8c_1af70602cee86af9597513bc67b2878244" compoundref="vector_8c" startline="4485" endline="4490">copy_ushort_vector</referencedby>
        <referencedby refid="vector_8c_1a94f7fe260f499b1a18150332e1a0e427" compoundref="vector_8c" startline="3032" endline="3041">cumsum_ushort_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a9fdb6c5fdd9f0d5a3bfb751f9e82968e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int init_int_vector</definition>
        <argsstring>(Int *vec, size_t length)</argsstring>
        <name>init_int_vector</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>A function to initiaize an unsigned short vector struct. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>A Vector struct of type <ref refid="structInt" kindref="compound">Int</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The initial guess for the number of indices in the dynamically allocated array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the struct is sucesfully initialized, -1 otherwise, with a stderr message </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="135" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="48" bodyend="60" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="135" declcolumn="5"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a63bea8755b3ce6be7e83970b9ea3bd68" compoundref="vector_8h" startline="79">Int::allocated_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
        <references refid="structInt_1ae124ac3392878072e49fe64e0d07beff" compoundref="vector_8h" startline="79">Int::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <referencedby refid="vector_8c_1a5fd73621c9da27949814495f00a3296f" compoundref="vector_8c" startline="4493" endline="4498">copy_int_vector</referencedby>
        <referencedby refid="vector_8c_1acaf8f7f369483e4dcb9a7af53e79492c" compoundref="vector_8c" startline="3044" endline="3053">cumsum_int_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a9d8eb1d9ce65365d7b044fe684387a3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int init_uint_vector</definition>
        <argsstring>(UInt *vec, size_t length)</argsstring>
        <name>init_uint_vector</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="146" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="63" bodyend="75" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="146" declcolumn="5"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a05b28efaec93c388e8685403f57a07ce" compoundref="vector_8h" startline="80">UInt::allocated_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
        <references refid="structUInt_1ab87c8b62b4178bf9bcf59d03b066da1c" compoundref="vector_8h" startline="80">UInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <referencedby refid="vector_8c_1a6bf7c67135858a07103fff23436b7d77" compoundref="vector_8c" startline="4501" endline="4506">copy_uint_vector</referencedby>
        <referencedby refid="vector_8c_1abe44138d94c38f7d65d62f63dddf668b" compoundref="vector_8c" startline="3056" endline="3065">cumsum_uint_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ac59c5fed0f4cd6b9aaf4c87b7a997bd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int init_long_vector</definition>
        <argsstring>(LInt *vec, size_t length)</argsstring>
        <name>init_long_vector</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="157" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="78" bodyend="90" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="157" declcolumn="5"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a21eec79c847025348ad0082aab6dee52" compoundref="vector_8h" startline="81">LInt::allocated_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
        <references refid="structLInt_1a7255bafd2fb6310140aebe36d68b9629" compoundref="vector_8h" startline="81">LInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <referencedby refid="vector_8c_1abc614587816c37e5dfd70c2a832da165" compoundref="vector_8c" startline="4509" endline="4514">copy_long_vector</referencedby>
        <referencedby refid="vector_8c_1aacdbfadbd42e44ba909b315b43152012" compoundref="vector_8c" startline="3068" endline="3077">cumsum_long_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1af08098b392c0ff01db799bff9c83a521" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int init_ulong_vector</definition>
        <argsstring>(ULInt *vec, size_t length)</argsstring>
        <name>init_ulong_vector</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="168" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="93" bodyend="105" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="168" declcolumn="5"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1acf325510e03976f12c116ad68c4998ec" compoundref="vector_8h" startline="82">ULInt::allocated_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
        <references refid="structULInt_1abbab1a9c205c4d86fcc53c55174d1515" compoundref="vector_8h" startline="82">ULInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <referencedby refid="vector_8c_1a31f85f1454385a608eebc7d150417b7c" compoundref="vector_8c" startline="4517" endline="4522">copy_ulong_vector</referencedby>
        <referencedby refid="vector_8c_1ae856339059aa7e6f5db1d5bd7de43306" compoundref="vector_8c" startline="3080" endline="3089">cumsum_ulong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a65eda538d3c07a8beb1475c1a214ff67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int init_llong_vector</definition>
        <argsstring>(LLInt *vec, size_t length)</argsstring>
        <name>init_llong_vector</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="179" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="107" bodyend="119" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="179" declcolumn="5"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1a967c631e7b8192f0016845623ae04759" compoundref="vector_8h" startline="83">LLInt::allocated_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
        <references refid="structLLInt_1a2cf879f2b771d70de2ae15401190b50e" compoundref="vector_8h" startline="83">LLInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <referencedby refid="vector_8c_1a2a8c6a77d383c5251686fc600c829005" compoundref="vector_8c" startline="4525" endline="4530">copy_llong_vector</referencedby>
        <referencedby refid="vector_8c_1a531b30e8b67bc20cad9865cc3d8afe50" compoundref="vector_8c" startline="3092" endline="3101">cumsum_llong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ab05d31d34c87d8d6cd76f48539bf367f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int init_ullong_vector</definition>
        <argsstring>(ULLInt *vec, size_t length)</argsstring>
        <name>init_ullong_vector</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="190" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="122" bodyend="134" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="190" declcolumn="5"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1ac6210c003919694e4fccfc5885c8fcb4" compoundref="vector_8h" startline="84">ULLInt::allocated_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
        <references refid="structULLInt_1acb153b18423bf9465c6a52aa74745df3" compoundref="vector_8h" startline="84">ULLInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <referencedby refid="vector_8c_1abe7076983c8f386b305b615137dcd249" compoundref="vector_8c" startline="4533" endline="4538">copy_ullong_vector</referencedby>
        <referencedby refid="vector_8c_1a07bde722230b2f57f1b14304054d1d6a" compoundref="vector_8c" startline="3104" endline="3113">cumsum_ullong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a92bba70874a1570bd9c87a2a7385af35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int init_float_vector</definition>
        <argsstring>(Flt *vec, size_t length)</argsstring>
        <name>init_float_vector</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="201" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="137" bodyend="149" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="201" declcolumn="5"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a917603eeaae1fb22accbfc8d9252a389" compoundref="vector_8h" startline="85">Flt::allocated_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
        <references refid="structFlt_1ad98ce16bf2fff8b16351042bd4135629" compoundref="vector_8h" startline="85">Flt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <referencedby refid="vector_8c_1a440353dc4ac989fb88b34e7f5649dd05" compoundref="vector_8c" startline="4541" endline="4546">copy_float_vector</referencedby>
        <referencedby refid="vector_8c_1a9ddb912a129b46a9a2f2d147b4a1ddc8" compoundref="vector_8c" startline="3116" endline="3125">cumsum_float_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a2c0735f69da8e40535b5ecceace1a399" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int init_double_vector</definition>
        <argsstring>(Dble *vec, size_t length)</argsstring>
        <name>init_double_vector</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="212" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="152" bodyend="164" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="212" declcolumn="5"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a83cb29dfe09183032473cc7ffe005f5d" compoundref="vector_8h" startline="86">Dble::allocated_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
        <references refid="structDble_1a593e6de4412f110b4ffe6fd87a62aa56" compoundref="vector_8h" startline="86">Dble::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <referencedby refid="vector_8c_1a2d51a8a92a5c0e73345ade59b126ff35" compoundref="vector_8c" startline="4549" endline="4554">copy_double_vector</referencedby>
        <referencedby refid="vector_8c_1ae8512eab3bf15409bda6bce1d6ec0380" compoundref="vector_8c" startline="3128" endline="3137">cumsum_double_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a79d9f9d1d1cb31d09620bc5cdc73e94e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int init_ldouble_vector</definition>
        <argsstring>(LDble *vec, size_t length)</argsstring>
        <name>init_ldouble_vector</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="223" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="167" bodyend="179" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="223" declcolumn="5"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a1f0f3fd968cab1acdebf0d43f632633f" compoundref="vector_8h" startline="87">LDble::allocated_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
        <references refid="structLDble_1a25a9e54828403acb6e1e565d00a24582" compoundref="vector_8h" startline="87">LDble::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <referencedby refid="vector_8c_1a3fa3120b9c06e25fc840f90c7e10c5a6" compoundref="vector_8c" startline="4557" endline="4562">copy_ldouble_vector</referencedby>
        <referencedby refid="vector_8c_1ae0f64fd00879ff39b5ffbca0e80c197b" compoundref="vector_8c" startline="3140" endline="3149">cumsum_ldouble_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1aecde718777430d31ec254f8a4f40cce0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int init_char_vector</definition>
        <argsstring>(Char *vec, size_t length)</argsstring>
        <name>init_char_vector</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="234" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="182" bodyend="194" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="234" declcolumn="5"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1ab59977640c7539e5ae251af86d445257" compoundref="vector_8h" startline="88">Char::allocated_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
        <references refid="structChar_1a7231211c3eec109684271510fb25ffe8" compoundref="vector_8h" startline="88">Char::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <referencedby refid="vector_8c_1a430a540aea6caac8002281b9a2ddbf7a" compoundref="vector_8c" startline="4565" endline="4570">copy_char_vector</referencedby>
        <referencedby refid="vector_8c_1a877296aab1e625bc7b103322f6b93b14" compoundref="vector_8c" startline="2996" endline="3005">cumsum_char_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a9289ec52674f95ebf45ac81b70dfdc67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int init_uchar_vector</definition>
        <argsstring>(UChar *vec, size_t length)</argsstring>
        <name>init_uchar_vector</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="245" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="197" bodyend="209" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="245" declcolumn="5"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="structUChar_1a69ec79fc44d9f3b1455705e24a819f4b" compoundref="vector_8h" startline="89">UChar::allocated_length</references>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
        <references refid="structUChar_1aa1ea52fa832c84586784bb36c1617e44" compoundref="vector_8h" startline="89">UChar::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <referencedby refid="vector_8c_1ac3e7f4298d195586bfc0cf8b0fc1a053" compoundref="vector_8c" startline="4573" endline="4578">copy_uchar_vector</referencedby>
        <referencedby refid="vector_8c_1a2850df1b78d17fd2e45847e8bf1e51c2" compoundref="vector_8c" startline="3008" endline="3017">cumsum_uchar_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a2e1ea608c0b9b0768ba61facb8df913f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int init_bool_vector</definition>
        <argsstring>(Bool *vec, size_t length)</argsstring>
        <name>init_bool_vector</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="256" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="212" bodyend="224" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="256" declcolumn="5"/>
        <references refid="structBool_1a5445f6ef94d239208dc797c289fded75" compoundref="vector_8h" startline="90">Bool::active_length</references>
        <references refid="structBool_1a4a353f55a013f72befc666e8d0708212" compoundref="vector_8h" startline="90">Bool::allocated_length</references>
        <references refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" compoundref="vector_8h" startline="90">Bool::array</references>
        <references refid="structBool_1ad781cb2cecf2b060c6337a73ed89def9" compoundref="vector_8h" startline="90">Bool::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <referencedby refid="vector_8c_1a2e6c2d82128d66d5fe6800ee6ad9d277" compoundref="vector_8c" startline="4581" endline="4586">copy_bool_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ad5c4c9d8676c13f1f381b0b6c1119c4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int init_string_vector</definition>
        <argsstring>(String *vec)</argsstring>
        <name>init_string_vector</name>
        <param>
          <type><ref refid="structString" kindref="compound">String</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function initializes a vector struct of type <ref refid="structString" kindref="compound">String</ref> to contain a dynamically allocated array of strings.</para>
<para>/param vec A Vector struct of type <ref refid="structString" kindref="compound">String</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="265" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="227" bodyend="231" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="265" declcolumn="5"/>
        <references refid="structString_1a706ffaf2f520d46074dd99e7896d6673" compoundref="vector_8h" startline="97">String::active_length</references>
        <references refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" compoundref="vector_8h" startline="96">String::array</references>
        <referencedby refid="vector_8c_1a2cb84d3851679202a04f76066bc80a6e" compoundref="vector_8c" startline="4589" endline="4596">copy_string_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1acb7b3bcd9252ad84ea9d05436f57bd6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_short_array</definition>
        <argsstring>(Short *vec, short int *arr, size_t allocated_length, size_t active_length)</argsstring>
        <name>init_short_array</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>short int *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>allocated_length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>active_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This funciton will initialize an array struct container of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para>/param vec A vector struct container of type <ref refid="structShort" kindref="compound">Short</ref> /param arr An array of type short int /param allocated_length The allocated length of the array /param active_length The number of acticaly populated indices in the array arr</para>
<para><programlisting><codeline><highlight class="normal">Short<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">short<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2};</highlight></codeline>
<codeline><highlight class="normal">init_short_array(&amp;arr,<sp/>a,<sp/>5,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Since<sp/>the<sp/>array<sp/>is<sp/>statically<sp/>allocated<sp/>it<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>freed</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="318" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="236" bodyend="241" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="318" declcolumn="6"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1af0b6f4e61e69b8a2f74d42b09b421d88" compoundref="vector_8h" startline="77">Short::allocated_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
        <references refid="structShort_1a20b9c526866b593e8e1ecdc49515e642" compoundref="vector_8h" startline="77">Short::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1abbac579a20b2655deda9ec8a915fcfb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_ushort_array</definition>
        <argsstring>(UShort *vec, unsigned short int *arr, size_t allocated_length, size_t active_length)</argsstring>
        <name>init_ushort_array</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned short int *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>allocated_length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>active_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This funciton will initialize an array struct container of type <ref refid="structUShort" kindref="compound">UShort</ref></para>
<para>/param vec A vector struct container of type <ref refid="structUShort" kindref="compound">UShort</ref> /param arr An array of type unsigned short int /param allocated_length The allocated length of the array /param active_length The number of acticaly populated indices in the array arr</para>
<para><programlisting><codeline><highlight class="normal">UShort<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>short<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2};</highlight></codeline>
<codeline><highlight class="normal">init_ushort_array(&amp;arr,<sp/>a,<sp/>5,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Since<sp/>the<sp/>array<sp/>is<sp/>statically<sp/>allocated<sp/>it<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>freed</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="337" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="244" bodyend="249" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="337" declcolumn="6"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a0ef4541f3fd3fcee1c0f5809341c84d6" compoundref="vector_8h" startline="78">UShort::allocated_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
        <references refid="structUShort_1a4c5d40034bbd1e9ee0de773d6be0c31e" compoundref="vector_8h" startline="78">UShort::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a29734ea7a6541b75cd3824bc05e3e589" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_int_array</definition>
        <argsstring>(Int *vec, int *arr, size_t allocated_length, size_t active_length)</argsstring>
        <name>init_int_array</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>allocated_length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>active_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This funciton will initialize an array struct container of type <ref refid="structInt" kindref="compound">Int</ref></para>
<para>/param vec A vector struct container of type <ref refid="structInt" kindref="compound">Int</ref> /param arr An array of type int /param allocated_length The allocated length of the array /param active_length The number of acticaly populated indices in the array arr</para>
<para><programlisting><codeline><highlight class="normal">Int<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2};</highlight></codeline>
<codeline><highlight class="normal">init_int_array(&amp;arr,<sp/>a,<sp/>5,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Since<sp/>the<sp/>array<sp/>is<sp/>statically<sp/>allocated<sp/>it<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>freed</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="357" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="252" bodyend="257" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="357" declcolumn="6"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a63bea8755b3ce6be7e83970b9ea3bd68" compoundref="vector_8h" startline="79">Int::allocated_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
        <references refid="structInt_1ae124ac3392878072e49fe64e0d07beff" compoundref="vector_8h" startline="79">Int::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a2739fb21bf4216de09c51c393b89ece7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_uint_array</definition>
        <argsstring>(UInt *vec, unsigned int *arr, size_t allocated_length, size_t active_length)</argsstring>
        <name>init_uint_array</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>allocated_length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>active_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This funciton will initialize an array struct container of type <ref refid="structUInt" kindref="compound">UInt</ref></para>
<para>/param vec A vector struct container of type <ref refid="structUInt" kindref="compound">UInt</ref> /param arr An array of type unsigned unsigned int /param allocated_length The allocated length of the array /param active_length The number of acticaly populated indices in the array arr</para>
<para><programlisting><codeline><highlight class="normal">UInt<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2};</highlight></codeline>
<codeline><highlight class="normal">init_uint_array(&amp;arr,<sp/>a,<sp/>5,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Since<sp/>the<sp/>array<sp/>is<sp/>statically<sp/>allocated<sp/>it<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>freed</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="376" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="260" bodyend="265" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="376" declcolumn="6"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a05b28efaec93c388e8685403f57a07ce" compoundref="vector_8h" startline="80">UInt::allocated_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
        <references refid="structUInt_1ab87c8b62b4178bf9bcf59d03b066da1c" compoundref="vector_8h" startline="80">UInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1acbddef55e279d25613203d2f14957597" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_long_array</definition>
        <argsstring>(LInt *vec, long int *arr, size_t allocated_length, size_t active_length)</argsstring>
        <name>init_long_array</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long int *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>allocated_length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>active_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This funciton will initialize an array struct container of type <ref refid="structLInt" kindref="compound">LInt</ref></para>
<para>/param vec A vector struct container of type <ref refid="structLInt" kindref="compound">LInt</ref> /param arr An array of type long int /param allocated_length The allocated length of the array /param active_length The number of acticaly populated indices in the array arr</para>
<para><programlisting><codeline><highlight class="normal">LInt<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2};</highlight></codeline>
<codeline><highlight class="normal">init_long_array(&amp;arr,<sp/>a,<sp/>5,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Since<sp/>the<sp/>array<sp/>is<sp/>statically<sp/>allocated<sp/>it<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>freed</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="395" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="268" bodyend="273" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="395" declcolumn="6"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a21eec79c847025348ad0082aab6dee52" compoundref="vector_8h" startline="81">LInt::allocated_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
        <references refid="structLInt_1a7255bafd2fb6310140aebe36d68b9629" compoundref="vector_8h" startline="81">LInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1acdf31865e9c36adc693dd7fa7fadcacc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_ulong_array</definition>
        <argsstring>(ULInt *vec, unsigned long int *arr, size_t allocated_length, size_t active_length)</argsstring>
        <name>init_ulong_array</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned long int *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>allocated_length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>active_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This funciton will initialize an array struct container of type <ref refid="structULInt" kindref="compound">ULInt</ref></para>
<para>/param vec A vector struct container of type <ref refid="structULInt" kindref="compound">ULInt</ref> /param arr An array of type unsigned unsigned long int /param allocated_length The allocated length of the array /param active_length The number of acticaly populated indices in the array arr</para>
<para><programlisting><codeline><highlight class="normal">ULInt<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2};</highlight></codeline>
<codeline><highlight class="normal">init_ulong_array(&amp;arr,<sp/>a,<sp/>5,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Since<sp/>the<sp/>array<sp/>is<sp/>statically<sp/>allocated<sp/>it<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>freed</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="414" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="276" bodyend="281" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="414" declcolumn="6"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1acf325510e03976f12c116ad68c4998ec" compoundref="vector_8h" startline="82">ULInt::allocated_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
        <references refid="structULInt_1abbab1a9c205c4d86fcc53c55174d1515" compoundref="vector_8h" startline="82">ULInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a65e3799f14e154e10bd3ce7a4d4fe184" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_llong_array</definition>
        <argsstring>(LLInt *vec, long long int *arr, size_t allocated_length, size_t active_length)</argsstring>
        <name>init_llong_array</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long long int *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>allocated_length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>active_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This funciton will initialize an array struct container of type <ref refid="structLLInt" kindref="compound">LLInt</ref></para>
<para>/param vec A vector struct container of type <ref refid="structLLInt" kindref="compound">LLInt</ref> /param arr An array of type long long int /param allocated_length The allocated length of the array /param active_length The number of acticaly populated indices in the array arr</para>
<para><programlisting><codeline><highlight class="normal">LLInt<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2};</highlight></codeline>
<codeline><highlight class="normal">init_llong_array(&amp;arr,<sp/>a,<sp/>5,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Since<sp/>the<sp/>array<sp/>is<sp/>statically<sp/>allocated<sp/>it<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>freed</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="433" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="284" bodyend="289" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="433" declcolumn="6"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1a967c631e7b8192f0016845623ae04759" compoundref="vector_8h" startline="83">LLInt::allocated_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
        <references refid="structLLInt_1a2cf879f2b771d70de2ae15401190b50e" compoundref="vector_8h" startline="83">LLInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a39d896e588ac932b9958b4f2e32d97c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_ullong_array</definition>
        <argsstring>(ULLInt *vec, unsigned long long int *arr, size_t allocated_length, size_t active_length)</argsstring>
        <name>init_ullong_array</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned long long int *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>allocated_length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>active_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This funciton will initialize an array struct container of type <ref refid="structULLInt" kindref="compound">ULLInt</ref></para>
<para>/param vec A vector struct container of type <ref refid="structULLInt" kindref="compound">ULLInt</ref> /param arr An array of type unsigned unsigned long long int /param allocated_length The allocated length of the array /param active_length The number of acticaly populated indices in the array arr</para>
<para><programlisting><codeline><highlight class="normal">ULLInt<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2};</highlight></codeline>
<codeline><highlight class="normal">init_ullong_array(&amp;arr,<sp/>a,<sp/>5,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Since<sp/>the<sp/>array<sp/>is<sp/>statically<sp/>allocated<sp/>it<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>freed</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="452" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="292" bodyend="297" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="452" declcolumn="6"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1ac6210c003919694e4fccfc5885c8fcb4" compoundref="vector_8h" startline="84">ULLInt::allocated_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
        <references refid="structULLInt_1acb153b18423bf9465c6a52aa74745df3" compoundref="vector_8h" startline="84">ULLInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a5fcc9ae29ce6bd76060856b388992240" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_float_array</definition>
        <argsstring>(Flt *vec, float *arr, size_t allocated_length, size_t active_length)</argsstring>
        <name>init_float_array</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>allocated_length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>active_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This funciton will initialize an array struct container of type <ref refid="structFlt" kindref="compound">Flt</ref></para>
<para>/param vec A vector struct container of type <ref refid="structFlt" kindref="compound">Flt</ref> /param arr An array of type float /param allocated_length The allocated length of the array /param active_length The number of acticaly populated indices in the array arr</para>
<para><programlisting><codeline><highlight class="normal">Flt<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">float<sp/>a[5]<sp/>=<sp/>{1.1,<sp/>2.2};</highlight></codeline>
<codeline><highlight class="normal">init_float_array(&amp;arr,<sp/>a,<sp/>5,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Since<sp/>the<sp/>array<sp/>is<sp/>statically<sp/>allocated<sp/>it<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>freed</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="471" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="300" bodyend="305" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="471" declcolumn="6"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a917603eeaae1fb22accbfc8d9252a389" compoundref="vector_8h" startline="85">Flt::allocated_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
        <references refid="structFlt_1ad98ce16bf2fff8b16351042bd4135629" compoundref="vector_8h" startline="85">Flt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1af1f590cad5f66c4caded12d7cd92675b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_double_array</definition>
        <argsstring>(Dble *vec, double *arr, size_t allocated_length, size_t active_length)</argsstring>
        <name>init_double_array</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>allocated_length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>active_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This funciton will initialize an array struct container of type <ref refid="structDble" kindref="compound">Dble</ref></para>
<para>/param vec A vector struct container of type <ref refid="structDble" kindref="compound">Dble</ref> /param arr An array of type unsigned double /param allocated_length The allocated length of the array /param active_length The number of acticaly populated indices in the array arr</para>
<para><programlisting><codeline><highlight class="normal">Dble<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">double<sp/>a[5]<sp/>=<sp/>{1.1,<sp/>2.2};</highlight></codeline>
<codeline><highlight class="normal">init_double_array(&amp;arr,<sp/>a,<sp/>5,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Since<sp/>the<sp/>array<sp/>is<sp/>statically<sp/>allocated<sp/>it<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>freed</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="490" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="308" bodyend="313" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="490" declcolumn="6"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a83cb29dfe09183032473cc7ffe005f5d" compoundref="vector_8h" startline="86">Dble::allocated_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
        <references refid="structDble_1a593e6de4412f110b4ffe6fd87a62aa56" compoundref="vector_8h" startline="86">Dble::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ae670278f7c9522a0fdc6b261cb76e5e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_ldouble_array</definition>
        <argsstring>(LDble *vec, long double *arr, size_t allocated_length, size_t active_length)</argsstring>
        <name>init_ldouble_array</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long double *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>allocated_length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>active_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This funciton will initialize an array struct container of type <ref refid="structLDble" kindref="compound">LDble</ref></para>
<para>/param vec A vector struct container of type <ref refid="structLDble" kindref="compound">LDble</ref> /param arr An array of type long double /param allocated_length The allocated length of the array /param active_length The number of acticaly populated indices in the array arr</para>
<para><programlisting><codeline><highlight class="normal">LDble<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">long<sp/>doub;e<sp/>a[5]<sp/>=<sp/>{1.1,<sp/>2.2};</highlight></codeline>
<codeline><highlight class="normal">init_ldouble_array(&amp;arr,<sp/>a,<sp/>5,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Since<sp/>the<sp/>array<sp/>is<sp/>statically<sp/>allocated<sp/>it<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>freed</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="509" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="316" bodyend="321" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="509" declcolumn="6"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a1f0f3fd968cab1acdebf0d43f632633f" compoundref="vector_8h" startline="87">LDble::allocated_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
        <references refid="structLDble_1a25a9e54828403acb6e1e565d00a24582" compoundref="vector_8h" startline="87">LDble::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a85ef363e6bfd0897ffc5ccb10c5eb721" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_char_array</definition>
        <argsstring>(Char *vec, char *arr, size_t allocated_length, size_t active_length)</argsstring>
        <name>init_char_array</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>allocated_length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>active_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This funciton will initialize an array struct container of type <ref refid="structChar" kindref="compound">Char</ref></para>
<para>/param vec A vector struct container of type <ref refid="structChar" kindref="compound">Char</ref> /param arr An array of type unsigned char /param allocated_length The allocated length of the array /param active_length The number of acticaly populated indices in the array arr</para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">char<sp/>a[5]<sp/>=<sp/>{&apos;a&apos;,<sp/>&apos;b&apos;};</highlight></codeline>
<codeline><highlight class="normal">init_char_array(&amp;arr,<sp/>a,<sp/>5,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Since<sp/>the<sp/>array<sp/>is<sp/>statically<sp/>allocated<sp/>it<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>freed</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="528" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="324" bodyend="329" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="528" declcolumn="6"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1ab59977640c7539e5ae251af86d445257" compoundref="vector_8h" startline="88">Char::allocated_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
        <references refid="structChar_1a7231211c3eec109684271510fb25ffe8" compoundref="vector_8h" startline="88">Char::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a2f22fc4866a5c4e5ba5cc10fbf73bb5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_uchar_array</definition>
        <argsstring>(UChar *vec, unsigned char *arr, size_t allocated_length, size_t active_length)</argsstring>
        <name>init_uchar_array</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>allocated_length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>active_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This funciton will initialize an array struct container of type <ref refid="structUChar" kindref="compound">UChar</ref></para>
<para>/param vec A vector struct container of type <ref refid="structUChar" kindref="compound">UChar</ref> /param arr An array of type unsigned unsigned char /param allocated_length The allocated length of the array /param active_length The number of acticaly populated indices in the array arr</para>
<para><programlisting><codeline><highlight class="normal">UChar<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>char<sp/>a[5]<sp/>=<sp/>{&apos;a&apos;,<sp/>&apos;b&apos;};</highlight></codeline>
<codeline><highlight class="normal">init_uchar_array(&amp;arr,<sp/>a,<sp/>5,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Since<sp/>the<sp/>array<sp/>is<sp/>statically<sp/>allocated<sp/>it<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>freed</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="547" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="332" bodyend="337" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="547" declcolumn="6"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="structUChar_1a69ec79fc44d9f3b1455705e24a819f4b" compoundref="vector_8h" startline="89">UChar::allocated_length</references>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
        <references refid="structUChar_1aa1ea52fa832c84586784bb36c1617e44" compoundref="vector_8h" startline="89">UChar::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ad2512ad5d79463921401fee2bf996b10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_bool_array</definition>
        <argsstring>(Bool *vec, bool *arr, size_t allocated_length, size_t active_length)</argsstring>
        <name>init_bool_array</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>allocated_length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>active_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This funciton will initialize an array struct container of type <ref refid="structBool" kindref="compound">Bool</ref></para>
<para>/param vec A vector struct container of type <ref refid="structBool" kindref="compound">Bool</ref> /param arr An array of type unsigned bool /param allocated_length The allocated length of the array /param active_length The number of acticaly populated indices in the array arr</para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>arr;</highlight></codeline>
<codeline><highlight class="normal">char<sp/>a[5]<sp/>=<sp/>{trye,<sp/>true};</highlight></codeline>
<codeline><highlight class="normal">init_bool_array(&amp;arr,<sp/>a,<sp/>5,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Since<sp/>the<sp/>array<sp/>is<sp/>statically<sp/>allocated<sp/>it<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>freed</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="566" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="340" bodyend="345" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="566" declcolumn="6"/>
        <references refid="structBool_1a5445f6ef94d239208dc797c289fded75" compoundref="vector_8h" startline="90">Bool::active_length</references>
        <references refid="structBool_1a4a353f55a013f72befc666e8d0708212" compoundref="vector_8h" startline="90">Bool::allocated_length</references>
        <references refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" compoundref="vector_8h" startline="90">Bool::array</references>
        <references refid="structBool_1ad781cb2cecf2b060c6337a73ed89def9" compoundref="vector_8h" startline="90">Bool::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a38068c17aa5cf7286175572d43219b8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int push_short_vector</definition>
        <argsstring>(Short *vec, short int value, size_t index)</argsstring>
        <name>push_short_vector</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>short int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="610" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="349" bodyend="379" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="610" declcolumn="5"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1af0b6f4e61e69b8a2f74d42b09b421d88" compoundref="vector_8h" startline="77">Short::allocated_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
        <references refid="structShort_1a20b9c526866b593e8e1ecdc49515e642" compoundref="vector_8h" startline="77">Short::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1a588f2bea0a2ac3d8bf87184d873a2804" compoundref="vector_8c" startline="3020" endline="3029">cumsum_short_vector</referencedby>
        <referencedby refid="vector_8c_1adb305706da4585539cd057cfa0ec0e2c" compoundref="vector_8c" startline="4312" endline="4319">range_short_vector</referencedby>
        <referencedby refid="vector_8c_1a1fbfbfeed7892cd604ac2175048a1ff3" compoundref="vector_8c" startline="4923" endline="4930">repeat_short_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a97670c026df2a05dda5b0c85ebeb4d69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int push_ushort_vector</definition>
        <argsstring>(UShort *vec, unsigned short int value, size_t index)</argsstring>
        <name>push_ushort_vector</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned short int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="635" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="382" bodyend="412" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="635" declcolumn="5"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a0ef4541f3fd3fcee1c0f5809341c84d6" compoundref="vector_8h" startline="78">UShort::allocated_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
        <references refid="structUShort_1a4c5d40034bbd1e9ee0de773d6be0c31e" compoundref="vector_8h" startline="78">UShort::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1a94f7fe260f499b1a18150332e1a0e427" compoundref="vector_8c" startline="3032" endline="3041">cumsum_ushort_vector</referencedby>
        <referencedby refid="vector_8c_1a062892c86bd6a4934d91c804684cf755" compoundref="vector_8c" startline="4322" endline="4330">range_ushort_vector</referencedby>
        <referencedby refid="vector_8c_1a87921615a6088f8e15e74f796abd294e" compoundref="vector_8c" startline="4933" endline="4940">repeat_ushort_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a6baf75dc56de293f3dbdc8ac40934980" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int push_int_vector</definition>
        <argsstring>(Int *vec, int value, size_t index)</argsstring>
        <name>push_int_vector</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="660" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="415" bodyend="445" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="660" declcolumn="5"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a63bea8755b3ce6be7e83970b9ea3bd68" compoundref="vector_8h" startline="79">Int::allocated_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
        <references refid="structInt_1ae124ac3392878072e49fe64e0d07beff" compoundref="vector_8h" startline="79">Int::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1acaf8f7f369483e4dcb9a7af53e79492c" compoundref="vector_8c" startline="3044" endline="3053">cumsum_int_vector</referencedby>
        <referencedby refid="vector_8c_1a184898353e0603cd18372448c8a842e4" compoundref="vector_8c" startline="4333" endline="4340">range_int_vector</referencedby>
        <referencedby refid="vector_8c_1aeb26b3546bef2bb8e5afc6a8c93d23a1" compoundref="vector_8c" startline="4943" endline="4950">repeat_int_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a787fc2bba6112c4ede10d0ec14ab3825" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int push_uint_vector</definition>
        <argsstring>(UInt *vec, unsigned int value, size_t index)</argsstring>
        <name>push_uint_vector</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="685" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="448" bodyend="478" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="685" declcolumn="5"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a05b28efaec93c388e8685403f57a07ce" compoundref="vector_8h" startline="80">UInt::allocated_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
        <references refid="structUInt_1ab87c8b62b4178bf9bcf59d03b066da1c" compoundref="vector_8h" startline="80">UInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1abe44138d94c38f7d65d62f63dddf668b" compoundref="vector_8c" startline="3056" endline="3065">cumsum_uint_vector</referencedby>
        <referencedby refid="vector_8c_1adce9ffbf72bc5678dbd702bf9840f363" compoundref="vector_8c" startline="4343" endline="4351">range_uint_vector</referencedby>
        <referencedby refid="vector_8c_1a1aa1df7f7e77404e77862ca75666165c" compoundref="vector_8c" startline="4953" endline="4960">repeat_uint_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a6135368684b7d740482cfc775417f255" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int push_long_vector</definition>
        <argsstring>(LInt *vec, long int value, size_t index)</argsstring>
        <name>push_long_vector</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="710" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="481" bodyend="511" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="710" declcolumn="5"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a21eec79c847025348ad0082aab6dee52" compoundref="vector_8h" startline="81">LInt::allocated_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
        <references refid="structLInt_1a7255bafd2fb6310140aebe36d68b9629" compoundref="vector_8h" startline="81">LInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1aacdbfadbd42e44ba909b315b43152012" compoundref="vector_8c" startline="3068" endline="3077">cumsum_long_vector</referencedby>
        <referencedby refid="vector_8c_1aed9932998976a7d3ce615075dd5af09b" compoundref="vector_8c" startline="4354" endline="4361">range_long_vector</referencedby>
        <referencedby refid="vector_8c_1a1f0914c2c37de3b81b706c77be31e57a" compoundref="vector_8c" startline="4963" endline="4970">repeat_long_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1aea5f95b56df2836ee553face60351e61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int push_ulong_vector</definition>
        <argsstring>(ULInt *vec, unsigned long int value, size_t index)</argsstring>
        <name>push_ulong_vector</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned long int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="735" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="514" bodyend="544" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="735" declcolumn="5"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1acf325510e03976f12c116ad68c4998ec" compoundref="vector_8h" startline="82">ULInt::allocated_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
        <references refid="structULInt_1abbab1a9c205c4d86fcc53c55174d1515" compoundref="vector_8h" startline="82">ULInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1ae856339059aa7e6f5db1d5bd7de43306" compoundref="vector_8c" startline="3080" endline="3089">cumsum_ulong_vector</referencedby>
        <referencedby refid="vector_8c_1a4fe9caa2febfe85a1107394d8b42c348" compoundref="vector_8c" startline="4364" endline="4372">range_ulong_vector</referencedby>
        <referencedby refid="vector_8c_1a8c9c95f3e41bcaa00e99db959130c509" compoundref="vector_8c" startline="4973" endline="4980">repeat_ulong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a93f7e28f97718d9d7c5c84df61c1466c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int push_llong_vector</definition>
        <argsstring>(LLInt *vec, long long int value, size_t index)</argsstring>
        <name>push_llong_vector</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long long int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="760" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="547" bodyend="577" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="760" declcolumn="5"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1a967c631e7b8192f0016845623ae04759" compoundref="vector_8h" startline="83">LLInt::allocated_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
        <references refid="structLLInt_1a2cf879f2b771d70de2ae15401190b50e" compoundref="vector_8h" startline="83">LLInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1a531b30e8b67bc20cad9865cc3d8afe50" compoundref="vector_8c" startline="3092" endline="3101">cumsum_llong_vector</referencedby>
        <referencedby refid="vector_8c_1afa81d739815cef7056167d48361e0891" compoundref="vector_8c" startline="4375" endline="4382">range_llong_vector</referencedby>
        <referencedby refid="vector_8c_1a7c24fd593c9332ba1779b780b85cc893" compoundref="vector_8c" startline="4983" endline="4990">repeat_llong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a3478a298e62d85cb93f11a78f64d6f80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int push_ullong_vector</definition>
        <argsstring>(ULLInt *vec, unsigned long long int value, size_t index)</argsstring>
        <name>push_ullong_vector</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned long long int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="785" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="580" bodyend="610" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="785" declcolumn="5"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1ac6210c003919694e4fccfc5885c8fcb4" compoundref="vector_8h" startline="84">ULLInt::allocated_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
        <references refid="structULLInt_1acb153b18423bf9465c6a52aa74745df3" compoundref="vector_8h" startline="84">ULLInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1a07bde722230b2f57f1b14304054d1d6a" compoundref="vector_8c" startline="3104" endline="3113">cumsum_ullong_vector</referencedby>
        <referencedby refid="vector_8c_1a6b8d5f1723a1e5e9a0d03da80e93b68e" compoundref="vector_8c" startline="4385" endline="4393">range_ullong_vector</referencedby>
        <referencedby refid="vector_8c_1a6f8e17e6a8930bf7bf0f7422d65eeab5" compoundref="vector_8c" startline="4993" endline="5000">repeat_ullong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a31e02f437f4f9f43d1126e017ae1cac3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int push_float_vector</definition>
        <argsstring>(Flt *vec, float value, size_t index)</argsstring>
        <name>push_float_vector</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="810" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="613" bodyend="643" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="810" declcolumn="5"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a917603eeaae1fb22accbfc8d9252a389" compoundref="vector_8h" startline="85">Flt::allocated_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
        <references refid="structFlt_1ad98ce16bf2fff8b16351042bd4135629" compoundref="vector_8h" startline="85">Flt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1a9ddb912a129b46a9a2f2d147b4a1ddc8" compoundref="vector_8c" startline="3116" endline="3125">cumsum_float_vector</referencedby>
        <referencedby refid="vector_8c_1a85d0392c18b7db31c0a14bc2aa13448c" compoundref="vector_8c" startline="4396" endline="4403">range_float_vector</referencedby>
        <referencedby refid="vector_8c_1a58a085c7febff1b1bd9e6ec90510b36a" compoundref="vector_8c" startline="5003" endline="5010">repeat_float_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ab312c467d82a0fccc66cbb89a6b8de5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int push_double_vector</definition>
        <argsstring>(Dble *vec, double value, size_t index)</argsstring>
        <name>push_double_vector</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="835" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="646" bodyend="676" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="835" declcolumn="5"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a83cb29dfe09183032473cc7ffe005f5d" compoundref="vector_8h" startline="86">Dble::allocated_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
        <references refid="structDble_1a593e6de4412f110b4ffe6fd87a62aa56" compoundref="vector_8h" startline="86">Dble::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1ae8512eab3bf15409bda6bce1d6ec0380" compoundref="vector_8c" startline="3128" endline="3137">cumsum_double_vector</referencedby>
        <referencedby refid="vector_8c_1a636afa2f2e2af7dbbd34b7cb42d11163" compoundref="vector_8c" startline="4406" endline="4414">range_double_vector</referencedby>
        <referencedby refid="vector_8c_1ac2a03364dd0dc653854b1f70101514c6" compoundref="vector_8c" startline="5013" endline="5020">repeat_double_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ad001560a2793c40efb1c64532cefe2e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int push_ldouble_vector</definition>
        <argsstring>(LDble *vec, long double value, size_t index)</argsstring>
        <name>push_ldouble_vector</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="860" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="679" bodyend="709" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="860" declcolumn="5"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a1f0f3fd968cab1acdebf0d43f632633f" compoundref="vector_8h" startline="87">LDble::allocated_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
        <references refid="structLDble_1a25a9e54828403acb6e1e565d00a24582" compoundref="vector_8h" startline="87">LDble::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1ae0f64fd00879ff39b5ffbca0e80c197b" compoundref="vector_8c" startline="3140" endline="3149">cumsum_ldouble_vector</referencedby>
        <referencedby refid="vector_8c_1ae5505a9a69a6701bcafa4b92eb06055f" compoundref="vector_8c" startline="4417" endline="4425">range_ldouble_vector</referencedby>
        <referencedby refid="vector_8c_1a34a56cde6bc6f420f8b9063bf87232e1" compoundref="vector_8c" startline="5023" endline="5030">repeat_ldouble_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ab4f076e9a6e7d0795c2c3a0216c5c97e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int push_char_vector</definition>
        <argsstring>(Char *vec, char value, size_t index)</argsstring>
        <name>push_char_vector</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>char</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="885" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="712" bodyend="742" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="885" declcolumn="5"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1ab59977640c7539e5ae251af86d445257" compoundref="vector_8h" startline="88">Char::allocated_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
        <references refid="structChar_1a7231211c3eec109684271510fb25ffe8" compoundref="vector_8h" startline="88">Char::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1a877296aab1e625bc7b103322f6b93b14" compoundref="vector_8c" startline="2996" endline="3005">cumsum_char_vector</referencedby>
        <referencedby refid="vector_8c_1ac3589c6090a8dc24ffe4211dbb42b15f" compoundref="vector_8c" startline="4292" endline="4299">range_char_vector</referencedby>
        <referencedby refid="vector_8c_1aece15dcc8e9d3cf0fa0cb65c0b7a05f2" compoundref="vector_8c" startline="5043" endline="5050">repeat_char_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1acc6fd3b434ba25d3473adff60160500b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int push_uchar_vector</definition>
        <argsstring>(UChar *vec, unsigned char value, size_t index)</argsstring>
        <name>push_uchar_vector</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="910" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="745" bodyend="775" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="910" declcolumn="5"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="structUChar_1a69ec79fc44d9f3b1455705e24a819f4b" compoundref="vector_8h" startline="89">UChar::allocated_length</references>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
        <references refid="structUChar_1aa1ea52fa832c84586784bb36c1617e44" compoundref="vector_8h" startline="89">UChar::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1a2850df1b78d17fd2e45847e8bf1e51c2" compoundref="vector_8c" startline="3008" endline="3017">cumsum_uchar_vector</referencedby>
        <referencedby refid="vector_8c_1a14f0626112aa000e6739a14556f761ed" compoundref="vector_8c" startline="4302" endline="4309">range_uchar_vector</referencedby>
        <referencedby refid="vector_8c_1aa03b84f9a537aa95ab335f38448051a0" compoundref="vector_8c" startline="5053" endline="5060">repeat_uchar_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a078616c26d55c1ddb2ec4c551298a4f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int push_string_vector</definition>
        <argsstring>(String *vec, char *value, size_t index)</argsstring>
        <name>push_string_vector</name>
        <param>
          <type><ref refid="structString" kindref="compound">String</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will push a single string to an existing string vector container</para>
<para>/param vec A vector struct of type <ref refid="structString" kindref="compound">String</ref> /param value A string /param index The index where the string is to be pushed</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;print.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">String<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_string_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(&amp;vec,<sp/>&quot;Hello&quot;,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(&amp;vec,<sp/>&quot;Goodbye&quot;,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(&amp;vec,<sp/>&quot;Again&quot;,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>Again,<sp/>Hello,<sp/>Goodbye<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_string_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="934" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="811" bodyend="829" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="934" declcolumn="5"/>
        <references refid="structString_1a706ffaf2f520d46074dd99e7896d6673" compoundref="vector_8h" startline="97">String::active_length</references>
        <references refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" compoundref="vector_8h" startline="96">String::array</references>
        <referencedby refid="vector_8c_1a2cb84d3851679202a04f76066bc80a6e" compoundref="vector_8c" startline="4589" endline="4596">copy_string_vector</referencedby>
        <referencedby refid="vector_8c_1a9f6bd7ebba53e2d4eb0b8e3d8931029c" compoundref="vector_8c" startline="5063" endline="5070">repeat_string_vector</referencedby>
        <referencedby refid="vector_8c_1a1556bb53212c3c454a2ddb3f4c2f4c8a" compoundref="vector_8c" startline="1671" endline="1680">replace_string_vector_values</referencedby>
        <referencedby refid="vector_8c_1a6297710c0ac2122db93e47a260e96ad8" compoundref="vector_8c" startline="2277" endline="2288">reverse_string_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a66a1a1c291efbab607defa13421167dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int push_bool_vector</definition>
        <argsstring>(Bool *vec, bool value, size_t index)</argsstring>
        <name>push_bool_vector</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="959" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="778" bodyend="808" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="959" declcolumn="5"/>
        <references refid="structBool_1a5445f6ef94d239208dc797c289fded75" compoundref="vector_8h" startline="90">Bool::active_length</references>
        <references refid="structBool_1a4a353f55a013f72befc666e8d0708212" compoundref="vector_8h" startline="90">Bool::allocated_length</references>
        <references refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" compoundref="vector_8h" startline="90">Bool::array</references>
        <references refid="structBool_1ad781cb2cecf2b060c6337a73ed89def9" compoundref="vector_8h" startline="90">Bool::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1a10df883121d1f71d331ae6ba273357f1" compoundref="vector_8c" startline="5033" endline="5040">repeat_bool_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a2ed595a869e30a4c834c1d2cf5b934ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int insert_short_vector</definition>
        <argsstring>(Short *vec, short int *elements, size_t num_indices, size_t index)</argsstring>
        <name>insert_short_vector</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>short int *</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_indices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will allow a user to insert a scalar short or an array of short values into a vector struct of <ref refid="structShort" kindref="compound">Short</ref> type.</para>
<para>/param vec A vector struct of type <ref refid="structShort" kindref="compound">Short</ref> /param elements An array or scalar of type short /param num_indices The number of data points in elements /param index The index where the scalar or array is to be inserted</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;print.h&quot;*</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Short<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_short_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">short<sp/>a[3]<sp/>=<sp/>{5,<sp/>6,<sp/>7};</highlight></codeline>
<codeline><highlight class="normal">insert_short_vector(vec,<sp/>a,<sp/>3,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>5,<sp/>6,<sp/>7,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_short_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="989" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="833" bodyend="866" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="989" declcolumn="5"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1af0b6f4e61e69b8a2f74d42b09b421d88" compoundref="vector_8h" startline="77">Short::allocated_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
        <references refid="structShort_1a20b9c526866b593e8e1ecdc49515e642" compoundref="vector_8h" startline="77">Short::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1ab88c9075f7ac94dd8656a8eec4a14a94" compoundref="vector_8c" startline="4477" endline="4482">copy_short_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1aa8495c3a316b6d93c8697d194c86fc2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int insert_ushort_vector</definition>
        <argsstring>(UShort *vec, unsigned short int *elements, size_t num_indices, size_t index)</argsstring>
        <name>insert_ushort_vector</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned short int *</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_indices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will allow a user to insert a scalar unsigned short or an array of unsigned short values into a vector struct of <ref refid="structUShort" kindref="compound">UShort</ref> type.</para>
<para>/param vec A vector struct of type <ref refid="structUShort" kindref="compound">UShort</ref> /param elements An array or scalar of type unsigned short /param num_indices The number of data points in elements /param index The index where the scalar or array is to be inserted</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;print.h&quot;*</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">UShort<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ushort_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>short<sp/>a[3]<sp/>=<sp/>{5,<sp/>6,<sp/>7};</highlight></codeline>
<codeline><highlight class="normal">insert_ushort_vector(vec,<sp/>a,<sp/>3,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>5,<sp/>6,<sp/>7,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ushort_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1017" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="869" bodyend="902" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1017" declcolumn="5"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a0ef4541f3fd3fcee1c0f5809341c84d6" compoundref="vector_8h" startline="78">UShort::allocated_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
        <references refid="structUShort_1a4c5d40034bbd1e9ee0de773d6be0c31e" compoundref="vector_8h" startline="78">UShort::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1af70602cee86af9597513bc67b2878244" compoundref="vector_8c" startline="4485" endline="4490">copy_ushort_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a0acf8b86d4a95be517c7af80f8eff4ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int insert_int_vector</definition>
        <argsstring>(Int *vec, int *elements, size_t num_indices, size_t index)</argsstring>
        <name>insert_int_vector</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_indices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will allow a user to insert a scalar int or an array of int values into a vector struct of <ref refid="structInt" kindref="compound">Int</ref> type.</para>
<para>/param vec A vector struct of type <ref refid="structInt" kindref="compound">Int</ref> /param elements An array or scalar of type int /param num_indices The number of data points in elements /param index The index where the scalar or array is to be inserted</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;print.h&quot;*</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Int<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_int_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>a[3]<sp/>=<sp/>{5,<sp/>6,<sp/>7};</highlight></codeline>
<codeline><highlight class="normal">insert_int_vector(vec,<sp/>a,<sp/>3,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>5,<sp/>6,<sp/>7,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_int_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1045" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="905" bodyend="938" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1045" declcolumn="5"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a63bea8755b3ce6be7e83970b9ea3bd68" compoundref="vector_8h" startline="79">Int::allocated_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
        <references refid="structInt_1ae124ac3392878072e49fe64e0d07beff" compoundref="vector_8h" startline="79">Int::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1a5fd73621c9da27949814495f00a3296f" compoundref="vector_8c" startline="4493" endline="4498">copy_int_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ad78d40537dece17df4f506fd6ba7dc34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int insert_uint_vector</definition>
        <argsstring>(UInt *vec, unsigned int *elements, size_t num_indices, size_t index)</argsstring>
        <name>insert_uint_vector</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_indices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will allow a user to insert a scalar unsigned int or an array of unsigned int values into a vector struct of <ref refid="structUInt" kindref="compound">UInt</ref> type.</para>
<para>/param vec A vector struct of type <ref refid="structUInt" kindref="compound">UInt</ref> /param elements An array or scalar of type unsigned int /param num_indices The number of data points in elements /param index The index where the scalar or array is to be inserted</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;print.h&quot;*</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">UInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uint_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>int<sp/>a[3]<sp/>=<sp/>{5,<sp/>6,<sp/>7};</highlight></codeline>
<codeline><highlight class="normal">insert_uint_vector(vec,<sp/>a,<sp/>3,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>5,<sp/>6,<sp/>7,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uint_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1073" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="941" bodyend="974" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1073" declcolumn="5"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a05b28efaec93c388e8685403f57a07ce" compoundref="vector_8h" startline="80">UInt::allocated_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
        <references refid="structUInt_1ab87c8b62b4178bf9bcf59d03b066da1c" compoundref="vector_8h" startline="80">UInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1a6bf7c67135858a07103fff23436b7d77" compoundref="vector_8c" startline="4501" endline="4506">copy_uint_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ab5d840518e5e7bbd9ed243681b7124f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int insert_long_vector</definition>
        <argsstring>(LInt *vec, long int *elements, size_t num_indices, size_t index)</argsstring>
        <name>insert_long_vector</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long int *</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_indices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will allow a user to insert a scalar long or an array of long values into a vector struct of <ref refid="structLInt" kindref="compound">LInt</ref> type.</para>
<para>/param vec A vector struct of type <ref refid="structLInt" kindref="compound">LInt</ref> /param elements An array or scalar of type long int /param num_indices The number of data points in elements /param index The index where the scalar or array is to be inserted</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;print.h&quot;*</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">LInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_long_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>int<sp/>a[3]<sp/>=<sp/>{5,<sp/>6,<sp/>7};</highlight></codeline>
<codeline><highlight class="normal">insert_long_vector(vec,<sp/>a,<sp/>3,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>5,<sp/>6,<sp/>7,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_long_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1101" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="977" bodyend="1010" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1101" declcolumn="5"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a21eec79c847025348ad0082aab6dee52" compoundref="vector_8h" startline="81">LInt::allocated_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
        <references refid="structLInt_1a7255bafd2fb6310140aebe36d68b9629" compoundref="vector_8h" startline="81">LInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1abc614587816c37e5dfd70c2a832da165" compoundref="vector_8c" startline="4509" endline="4514">copy_long_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1aa419c32bb276bfe866787e1744669b94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int insert_ulong_vector</definition>
        <argsstring>(ULInt *vec, unsigned long int *elements, size_t num_indices, size_t index)</argsstring>
        <name>insert_ulong_vector</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned long int *</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_indices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will allow a user to insert a scalar unsigned long or an array of unsigned long values into a vector struct of <ref refid="structULInt" kindref="compound">ULInt</ref> type.</para>
<para>/param vec A vector struct of type <ref refid="structULInt" kindref="compound">ULInt</ref> /param elements An array or scalar of type unsigned long int /param num_indices The number of data points in elements /param index The index where the scalar or array is to be inserted</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;print.h&quot;*</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ULInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ulong_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>int<sp/>a[3]<sp/>=<sp/>{5,<sp/>6,<sp/>7};</highlight></codeline>
<codeline><highlight class="normal">insert_ulong_vector(vec,<sp/>a,<sp/>3,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>5,<sp/>6,<sp/>7,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ulong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1129" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1013" bodyend="1046" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1129" declcolumn="5"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1acf325510e03976f12c116ad68c4998ec" compoundref="vector_8h" startline="82">ULInt::allocated_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
        <references refid="structULInt_1abbab1a9c205c4d86fcc53c55174d1515" compoundref="vector_8h" startline="82">ULInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1a31f85f1454385a608eebc7d150417b7c" compoundref="vector_8c" startline="4517" endline="4522">copy_ulong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a9817d90055331624db7529c5d74a80ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int insert_llong_vector</definition>
        <argsstring>(LLInt *vec, long long int *elements, size_t num_indices, size_t index)</argsstring>
        <name>insert_llong_vector</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long long int *</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_indices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will allow a user to insert a scalar long long or an array of long long values into a vector struct of <ref refid="structLLInt" kindref="compound">LLInt</ref> type.</para>
<para>/param vec A vector struct of type <ref refid="structLLInt" kindref="compound">LLInt</ref> /param elements An array or scalar of type long long int /param num_indices The number of data points in elements /param index The index where the scalar or array is to be inserted</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;print.h&quot;*</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">LLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_llong_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>long<sp/>int<sp/>a[3]<sp/>=<sp/>{5,<sp/>6,<sp/>7};</highlight></codeline>
<codeline><highlight class="normal">insert_llong_vector(vec,<sp/>a,<sp/>3,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>5,<sp/>6,<sp/>7,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_llong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1157" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1049" bodyend="1082" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1157" declcolumn="5"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1a967c631e7b8192f0016845623ae04759" compoundref="vector_8h" startline="83">LLInt::allocated_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
        <references refid="structLLInt_1a2cf879f2b771d70de2ae15401190b50e" compoundref="vector_8h" startline="83">LLInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1a2a8c6a77d383c5251686fc600c829005" compoundref="vector_8c" startline="4525" endline="4530">copy_llong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1afccda80cf8e96d76846df29a256f6974" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int insert_ullong_vector</definition>
        <argsstring>(ULLInt *vec, unsigned long long int *elements, size_t num_indices, size_t index)</argsstring>
        <name>insert_ullong_vector</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned long long int *</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_indices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will allow a user to insert a scalar unsigned long long or an array of unsigned long long values into a vector struct of <ref refid="structULLInt" kindref="compound">ULLInt</ref> type.</para>
<para>/param vec A vector struct of type <ref refid="structULLInt" kindref="compound">ULLInt</ref> /param elements An array or scalar of type unsigned long long int /param num_indices The number of data points in elements /param index The index where the scalar or array is to be inserted</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;print.h&quot;*</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ULLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ullong_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>long<sp/>int<sp/>a[3]<sp/>=<sp/>{5,<sp/>6,<sp/>7};</highlight></codeline>
<codeline><highlight class="normal">insert_ullong_vector(vec,<sp/>a,<sp/>3,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>5,<sp/>6,<sp/>7,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ullong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1185" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1085" bodyend="1118" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1185" declcolumn="5"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1ac6210c003919694e4fccfc5885c8fcb4" compoundref="vector_8h" startline="84">ULLInt::allocated_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
        <references refid="structULLInt_1acb153b18423bf9465c6a52aa74745df3" compoundref="vector_8h" startline="84">ULLInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1abe7076983c8f386b305b615137dcd249" compoundref="vector_8c" startline="4533" endline="4538">copy_ullong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a17ee89c38df38d9d1d5b0cb2e33266d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int insert_float_vector</definition>
        <argsstring>(Flt *vec, float *elements, size_t num_indices, size_t index)</argsstring>
        <name>insert_float_vector</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_indices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will allow a user to insert a scalar float or an array of float values into a vector struct of <ref refid="structFlt" kindref="compound">Flt</ref> type.</para>
<para>/param vec A vector struct of type <ref refid="structFlt" kindref="compound">Flt</ref> /param elements An array or scalar of type float /param num_indices The number of data points in elements /param index The index where the scalar or array is to be inserted</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;print.h&quot;*</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Flt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_float_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>a[3]<sp/>=<sp/>{5,<sp/>6,<sp/>7};</highlight></codeline>
<codeline><highlight class="normal">insert_float_vector(vec,<sp/>a,<sp/>3,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>5,<sp/>6,<sp/>7,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_float_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1213" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1121" bodyend="1154" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1213" declcolumn="5"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a917603eeaae1fb22accbfc8d9252a389" compoundref="vector_8h" startline="85">Flt::allocated_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
        <references refid="structFlt_1ad98ce16bf2fff8b16351042bd4135629" compoundref="vector_8h" startline="85">Flt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1a440353dc4ac989fb88b34e7f5649dd05" compoundref="vector_8c" startline="4541" endline="4546">copy_float_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1af1e86e2b45b0339cc18ba5b35bf01132" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int insert_double_vector</definition>
        <argsstring>(Dble *vec, double *elements, size_t num_indices, size_t index)</argsstring>
        <name>insert_double_vector</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_indices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will allow a user to insert a scalar double or an array of double values into a vector struct of <ref refid="structDble" kindref="compound">Dble</ref> type.</para>
<para>/param vec A vector struct of type <ref refid="structDble" kindref="compound">Dble</ref> /param elements An array or scalar of type double /param num_indices The number of data points in elements /param index The index where the scalar or array is to be inserted</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;print.h&quot;*</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Dble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_double_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>a[3]<sp/>=<sp/>{5,<sp/>6,<sp/>7};</highlight></codeline>
<codeline><highlight class="normal">insert_double_vector(vec,<sp/>a,<sp/>3,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>5,<sp/>6,<sp/>7,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_double_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1241" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1157" bodyend="1190" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1241" declcolumn="5"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a83cb29dfe09183032473cc7ffe005f5d" compoundref="vector_8h" startline="86">Dble::allocated_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
        <references refid="structDble_1a593e6de4412f110b4ffe6fd87a62aa56" compoundref="vector_8h" startline="86">Dble::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1a2d51a8a92a5c0e73345ade59b126ff35" compoundref="vector_8c" startline="4549" endline="4554">copy_double_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a0ec3e3b802f62c5f9cdd9b7d197bd4a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int insert_ldouble_vector</definition>
        <argsstring>(LDble *vec, long double *elements, size_t num_indices, size_t index)</argsstring>
        <name>insert_ldouble_vector</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long double *</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_indices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will allow a user to insert a scalar long double or an array of long double values into a vector struct of <ref refid="structLDble" kindref="compound">LDble</ref> type.</para>
<para>/param vec A vector struct of type <ref refid="structLDble" kindref="compound">LDble</ref> /param elements An array or scalar of type long double /param num_indices The number of data points in elements /param index The index where the scalar or array is to be inserted</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;print.h&quot;*</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">LDble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ldouble_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>a[3]<sp/>=<sp/>{5,<sp/>6,<sp/>7};</highlight></codeline>
<codeline><highlight class="normal">insert_ldouble_vector(vec,<sp/>a,<sp/>3,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>5,<sp/>6,<sp/>7,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ldouble_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1269" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1193" bodyend="1226" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1269" declcolumn="5"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a1f0f3fd968cab1acdebf0d43f632633f" compoundref="vector_8h" startline="87">LDble::allocated_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
        <references refid="structLDble_1a25a9e54828403acb6e1e565d00a24582" compoundref="vector_8h" startline="87">LDble::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1a3fa3120b9c06e25fc840f90c7e10c5a6" compoundref="vector_8c" startline="4557" endline="4562">copy_ldouble_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a9e9db9d87d5a9f3bb6dae1ba5668ef12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int insert_char_vector</definition>
        <argsstring>(Char *vec, char *elements, size_t num_indices, size_t index)</argsstring>
        <name>insert_char_vector</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_indices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will allow a user to insert a scalar char or an array of char values into a vector struct of <ref refid="structChar" kindref="compound">Char</ref> type.</para>
<para>/param vec A vector struct of type <ref refid="structChar" kindref="compound">Char</ref> /param elements An array or scalar of type char /param num_indices The number of data points in elements /param index The index where the scalar or array is to be inserted</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;print.h&quot;*</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_char_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>&apos;a&apos;);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>&apos;b&apos;);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>&apos;c&apos;;</highlight></codeline>
<codeline><highlight class="normal">char<sp/>a[3]<sp/>=<sp/>{&apos;x&apos;,<sp/>&apos;y&apos;,<sp/>&apos;z&apos;};</highlight></codeline>
<codeline><highlight class="normal">insert_ldouble_vector(vec,<sp/>a,<sp/>3,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>a,<sp/>x,<sp/>y,<sp/>z,<sp/>b,<sp/>c<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1297" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1229" bodyend="1262" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1297" declcolumn="5"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1ab59977640c7539e5ae251af86d445257" compoundref="vector_8h" startline="88">Char::allocated_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
        <references refid="structChar_1a7231211c3eec109684271510fb25ffe8" compoundref="vector_8h" startline="88">Char::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1a430a540aea6caac8002281b9a2ddbf7a" compoundref="vector_8c" startline="4565" endline="4570">copy_char_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ae5b1c45f4d2083c6d87f217646609a2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int insert_uchar_vector</definition>
        <argsstring>(UChar *vec, unsigned char *elements, size_t num_indices, size_t index)</argsstring>
        <name>insert_uchar_vector</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_indices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will allow a user to insert a scalar char or an array of char values into a vector struct of <ref refid="structChar" kindref="compound">Char</ref> type.</para>
<para>/param vec A vector struct of type <ref refid="structChar" kindref="compound">Char</ref> /param elements An array or scalar of type char /param num_indices The number of data points in elements /param index The index where the scalar or array is to be inserted</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;print.h&quot;*</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">UChar<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uchar_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>&apos;a&apos;);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>&apos;b&apos;);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>&apos;c&apos;;</highlight></codeline>
<codeline><highlight class="normal">char<sp/>a[3]<sp/>=<sp/>{&apos;x&apos;,<sp/>&apos;y&apos;,<sp/>&apos;z&apos;};</highlight></codeline>
<codeline><highlight class="normal">insert_uchar_vector(vec,<sp/>a,<sp/>3,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>a,<sp/>x,<sp/>y,<sp/>z,<sp/>b,<sp/>c<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1325" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1265" bodyend="1298" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1325" declcolumn="5"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="structUChar_1a69ec79fc44d9f3b1455705e24a819f4b" compoundref="vector_8h" startline="89">UChar::allocated_length</references>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
        <references refid="structUChar_1aa1ea52fa832c84586784bb36c1617e44" compoundref="vector_8h" startline="89">UChar::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1ac3e7f4298d195586bfc0cf8b0fc1a053" compoundref="vector_8c" startline="4573" endline="4578">copy_uchar_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ab344e3b36aa397f037cb2c573e1d3aff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int insert_bool_vector</definition>
        <argsstring>(Bool *vec, bool *elements, size_t num_indices, size_t index)</argsstring>
        <name>insert_bool_vector</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_indices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will allow a user to insert a scalar char or an array of bool values into a vector struct of <ref refid="structBool" kindref="compound">Bool</ref> type.</para>
<para>/param vec A vector struct of type <ref refid="structBool" kindref="compound">Bool</ref> /param elements An array or scalar of type bool /param num_indices The number of data points in elements /param index The index where the scalar or array is to be inserted</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;print.h&quot;*</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Bool<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_bool_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>false;</highlight></codeline>
<codeline><highlight class="normal">char<sp/>a[3]<sp/>=<sp/>{false,<sp/>false,<sp/>false};</highlight></codeline>
<codeline><highlight class="normal">insert_bool_vector(vec,<sp/>a,<sp/>3,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>true,<sp/>false,<sp/>false,<sp/>false,<sp/>true,<sp/>false<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_bool_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1353" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1301" bodyend="1334" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1353" declcolumn="5"/>
        <references refid="structBool_1a5445f6ef94d239208dc797c289fded75" compoundref="vector_8h" startline="90">Bool::active_length</references>
        <references refid="structBool_1a4a353f55a013f72befc666e8d0708212" compoundref="vector_8h" startline="90">Bool::allocated_length</references>
        <references refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" compoundref="vector_8h" startline="90">Bool::array</references>
        <references refid="structBool_1ad781cb2cecf2b060c6337a73ed89def9" compoundref="vector_8h" startline="90">Bool::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" compoundref="vector_8h" startline="39">STATIC</references>
        <referencedby refid="vector_8c_1a2e6c2d82128d66d5fe6800ee6ad9d277" compoundref="vector_8c" startline="4581" endline="4586">copy_bool_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a9c92e1232117e3d2f2f9f93b700058df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int insert_string_vector</definition>
        <argsstring>(String *vec, char **elements, size_t num_indices, size_t index)</argsstring>
        <name>insert_string_vector</name>
        <param>
          <type><ref refid="structString" kindref="compound">String</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_indices</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will allow a user to insert a scalar char or an array of bool values into a vector struct of <ref refid="structString" kindref="compound">String</ref> type.</para>
<para>/param vec A vector struct of type <ref refid="structString" kindref="compound">String</ref> /param elements An array or scalar of type char* /param num_indices The number of data points in elements /param index The index where the scalar or array is to be inserted</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;print.h&quot;*</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">String<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_string_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>&quot;One&quot;);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>&quot;Two&quot;);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>&quot;Three&quot;);</highlight></codeline>
<codeline><highlight class="normal">char<sp/>*a[3]<sp/>=<sp/>{&quot;Four&quot;,<sp/>&quot;Five&quot;,<sp/>&quot;Six&quot;};</highlight></codeline>
<codeline><highlight class="normal">insert_string_vector(vec,<sp/>a,<sp/>3,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>One,<sp/>Four,<sp/>Five,<sp/>Six,<sp/>Two,<sp/>Three<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_string_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1381" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1337" bodyend="1361" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1381" declcolumn="5"/>
        <references refid="structString_1a706ffaf2f520d46074dd99e7896d6673" compoundref="vector_8h" startline="97">String::active_length</references>
        <references refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" compoundref="vector_8h" startline="96">String::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a90c0d394579f3950b22adabb66f153e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop_short_vector_index</definition>
        <argsstring>(Short *vec, size_t index)</argsstring>
        <name>pop_short_vector_index</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>pop_type_stack_index functions </para>
        </briefdescription>
        <detaileddescription>
<para>This function will pop a value from an <ref refid="structShort" kindref="compound">Short</ref> struct container as a user defined index. This function runs fastest, when the index is the last populated index.</para>
<para>/param vec An struct container of type <ref refid="structShort" kindref="compound">Short</ref> /param index The index from which data is to be popped.</para>
<para><programlisting><codeline><highlight class="normal">Short<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_short_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">pop_short_vector_index(vec,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">pop_short_vector_index(vec,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>2,<sp/>3,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_short_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1408" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1366" bodyend="1376" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1408" declcolumn="5"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
        <referencedby refid="vector_8c_1a35b16d98a38d37826ee118f4860d680a" compoundref="vector_8c" startline="1881" endline="1890">delete_short_vector_duplicates</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ab5f9826948a1e75b6ffa74b2e801f8c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop_ushort_vector_index</definition>
        <argsstring>(UShort *vec, size_t index)</argsstring>
        <name>pop_ushort_vector_index</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will pop a value from an <ref refid="structUShort" kindref="compound">UShort</ref> struct container as a user defined index. This function runs fastest, when the index is the last populated index.</para>
<para>/param vec An struct container of type <ref refid="structUShort" kindref="compound">UShort</ref> /param index The index from which data is to be popped.</para>
<para><programlisting><codeline><highlight class="normal">UShort<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ushort_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">pop_ushort_vector_index(vec,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">pop_ushort_vector_index(vec,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>2,<sp/>3,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ushort_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1433" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1379" bodyend="1389" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1433" declcolumn="5"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
        <referencedby refid="vector_8c_1a372a58405f86fa4ef22f53af37408017" compoundref="vector_8c" startline="1893" endline="1902">delete_ushort_vector_duplicates</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1af0ecebd36b313d07d43f40698bd5508f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop_int_vector_index</definition>
        <argsstring>(Int *vec, size_t index)</argsstring>
        <name>pop_int_vector_index</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will pop a value from an <ref refid="structInt" kindref="compound">Int</ref> struct container as a user defined index. This function runs fastest, when the index is the last populated index.</para>
<para>/param vec An struct container of type <ref refid="structInt" kindref="compound">Int</ref> /param index The index from which data is to be popped.</para>
<para><programlisting><codeline><highlight class="normal">Int<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_int_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">pop_int_vector_index(vec,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">pop_int_vector_index(vec,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>2,<sp/>3,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_int_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1458" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1392" bodyend="1402" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1458" declcolumn="5"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
        <referencedby refid="vector_8c_1a68a325016f45777566e1eae4b15c4238" compoundref="vector_8c" startline="1905" endline="1914">delete_int_vector_duplicates</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1aea61eee2cd7481c1d34d13ba4a27e669" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop_uint_vector_index</definition>
        <argsstring>(UInt *vec, size_t index)</argsstring>
        <name>pop_uint_vector_index</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will pop a value from an <ref refid="structUInt" kindref="compound">UInt</ref> struct container as a user defined index. This function runs fastest, when the index is the last populated index.</para>
<para>/param vec An struct container of type <ref refid="structUInt" kindref="compound">UInt</ref> /param index The index from which data is to be popped.</para>
<para><programlisting><codeline><highlight class="normal">UInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uint_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">pop_uint_vector_index(vec,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">pop_uint_vector_index(vec,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>2,<sp/>3,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uint_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1483" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1405" bodyend="1415" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1483" declcolumn="5"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
        <referencedby refid="vector_8c_1ab5a49e7e86d86796744395431d475f74" compoundref="vector_8c" startline="1917" endline="1926">delete_uint_vector_duplicates</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ade7d072b4cbbed3560461122ff9bf2d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop_long_vector_index</definition>
        <argsstring>(LInt *vec, size_t index)</argsstring>
        <name>pop_long_vector_index</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will pop a value from an <ref refid="structLInt" kindref="compound">LInt</ref> struct container as a user defined index. This function runs fastest, when the index is the last populated index.</para>
<para>/param vec An struct container of type <ref refid="structLInt" kindref="compound">LInt</ref> /param index The index from which data is to be popped.</para>
<para><programlisting><codeline><highlight class="normal">LInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_long_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">pop_long_vector_index(vec,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">pop_long_vector_index(vec,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>2,<sp/>3,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_long_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1508" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1418" bodyend="1428" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1508" declcolumn="5"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
        <referencedby refid="vector_8c_1a10ee633f27cbd6252d41ffd0761f6392" compoundref="vector_8c" startline="1929" endline="1938">delete_long_vector_duplicates</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1aee6e8f2b009cc7205dfd8c143b8e9839" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop_ulong_vector_index</definition>
        <argsstring>(ULInt *vec, size_t index)</argsstring>
        <name>pop_ulong_vector_index</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will pop a value from an <ref refid="structULInt" kindref="compound">ULInt</ref> struct container as a user defined index. This function runs fastest, when the index is the last populated index.</para>
<para>/param vec An struct container of type <ref refid="structULInt" kindref="compound">ULInt</ref> /param index The index from which data is to be popped.</para>
<para><programlisting><codeline><highlight class="normal">ULInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ulong_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">pop_ulong_vector_index(vec,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">pop_ulong_vector_index(vec,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>2,<sp/>3,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ulong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1533" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1431" bodyend="1441" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1533" declcolumn="5"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
        <referencedby refid="vector_8c_1aa7b0890be4e8157712930fedaf437c8a" compoundref="vector_8c" startline="1941" endline="1950">delete_ulong_vector_duplicates</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a6475916b10de913b8859fbd0b8312557" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop_llong_vector_index</definition>
        <argsstring>(LLInt *vec, size_t index)</argsstring>
        <name>pop_llong_vector_index</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will pop a value from an <ref refid="structLLInt" kindref="compound">LLInt</ref> struct container as a user defined index. This function runs fastest, when the index is the last populated index.</para>
<para>/param vec An struct container of type <ref refid="structLLInt" kindref="compound">LLInt</ref> /param index The index from which data is to be popped.</para>
<para><programlisting><codeline><highlight class="normal">LLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_llong_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">pop_llong_vector_index(vec,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">pop_llong_vector_index(vec,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>2,<sp/>3,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_llong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1558" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1444" bodyend="1454" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1558" declcolumn="5"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
        <referencedby refid="vector_8c_1a8f895e83e3b4e24dfdd253508da61875" compoundref="vector_8c" startline="1953" endline="1962">delete_llong_vector_duplicates</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a52f4d32e9312b40967f4c0ee3de88e7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop_ullong_vector_index</definition>
        <argsstring>(ULLInt *vec, size_t index)</argsstring>
        <name>pop_ullong_vector_index</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will pop a value from an <ref refid="structULLInt" kindref="compound">ULLInt</ref> struct container as a user defined index. This function runs fastest, when the index is the last populated index.</para>
<para>/param vec An struct container of type <ref refid="structULLInt" kindref="compound">ULLInt</ref> /param index The index from which data is to be popped.</para>
<para><programlisting><codeline><highlight class="normal">ULLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ullong_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">pop_ullong_vector_index(vec,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">pop_ullong_vector_index(vec,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>2,<sp/>3,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ullong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1583" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1457" bodyend="1467" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1583" declcolumn="5"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
        <referencedby refid="vector_8c_1a91794ceff19b304073f15ca82fe38b0b" compoundref="vector_8c" startline="1965" endline="1974">delete_ullong_vector_duplicates</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a7f179d98deb7852196afc7e3d26ef06d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop_float_vector_index</definition>
        <argsstring>(Flt *vec, size_t index)</argsstring>
        <name>pop_float_vector_index</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will pop a value from an <ref refid="structFlt" kindref="compound">Flt</ref> struct container as a user defined index. This function runs fastest, when the index is the last populated index.</para>
<para>/param vec An struct container of type <ref refid="structFlt" kindref="compound">Flt</ref> /param index The index from which data is to be popped.</para>
<para><programlisting><codeline><highlight class="normal">Flt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_float_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">pop_float_vector_index(vec,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">pop_float_vector_index(vec,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>2,<sp/>3,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_float_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1608" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1470" bodyend="1480" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1608" declcolumn="5"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
        <referencedby refid="vector_8c_1a49e7b8e0e17f4570f95875965ea8c2d6" compoundref="vector_8c" startline="1977" endline="1986">delete_float_vector_duplicates</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a8d2545eb603560d67e5c481075e5d0fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop_double_vector_index</definition>
        <argsstring>(Dble *vec, size_t index)</argsstring>
        <name>pop_double_vector_index</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will pop a value from an <ref refid="structDble" kindref="compound">Dble</ref> struct container as a user defined index. This function runs fastest, when the index is the last populated index.</para>
<para>/param vec An struct container of type <ref refid="structDble" kindref="compound">Dble</ref> /param index The index from which data is to be popped.</para>
<para><programlisting><codeline><highlight class="normal">Dble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_double_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">pop_double_vector_index(vec,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">pop_double_vector_index(vec,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>2,<sp/>3,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_double_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1633" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1483" bodyend="1493" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1633" declcolumn="5"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
        <referencedby refid="vector_8c_1a0bf0ceecb4ef742811c3b2ed8384d432" compoundref="vector_8c" startline="1989" endline="1998">delete_double_vector_duplicates</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a3964e5480d290ac44a95680e52706f9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop_ldouble_vector_index</definition>
        <argsstring>(LDble *vec, size_t index)</argsstring>
        <name>pop_ldouble_vector_index</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will pop a value from an <ref refid="structLDble" kindref="compound">LDble</ref> struct container as a user defined index. This function runs fastest, when the index is the last populated index.</para>
<para>/param vec An struct container of type <ref refid="structLDble" kindref="compound">LDble</ref> /param index The index from which data is to be popped.</para>
<para><programlisting><codeline><highlight class="normal">LDble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ldouble_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">pop_ldouble_vector_index(vec,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">pop_ldouble_vector_index(vec,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>2,<sp/>3,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ldouble_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1658" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1496" bodyend="1506" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1658" declcolumn="5"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
        <referencedby refid="vector_8c_1a915b5e5eff06f5a04ff068c94cdcffb4" compoundref="vector_8c" startline="2001" endline="2010">delete_ldouble_vector_duplicates</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a4f9d1488d50bc3889fc04afc18fa9958" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop_char_vector_index</definition>
        <argsstring>(Char *vec, size_t index)</argsstring>
        <name>pop_char_vector_index</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will pop a value from an <ref refid="structChar" kindref="compound">Char</ref> struct container as a user defined index. This function runs fastest, when the index is the last populated index.</para>
<para>/param vec An struct container of type <ref refid="structChar" kindref="compound">Char</ref> /param index The index from which data is to be popped.</para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_char_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">pop_char_vector_index(vec,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">pop_char_vector_index(vec,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>2,<sp/>3,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1683" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1509" bodyend="1519" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1683" declcolumn="5"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
        <referencedby refid="vector_8c_1a5a01cb2f66c78b55858a0941ad9459af" compoundref="vector_8c" startline="2013" endline="2022">delete_char_vector_duplicates</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a7527a193c89c32c07eba99e8abc08574" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop_uchar_vector_index</definition>
        <argsstring>(UChar *vec, size_t index)</argsstring>
        <name>pop_uchar_vector_index</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will pop a value from an <ref refid="structChar" kindref="compound">Char</ref> struct container as a user defined index. This function runs fastest, when the index is the last populated index.</para>
<para>/param vec An struct container of type <ref refid="structUChar" kindref="compound">UChar</ref> /param index The index from which data is to be popped.</para>
<para><programlisting><codeline><highlight class="normal">UChar<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uchar_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">pop_uchar_vector_index(vec,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">pop_uchar_vector_index(vec,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>2,<sp/>3,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uchar_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1708" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1521" bodyend="1531" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1708" declcolumn="5"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
        <referencedby refid="vector_8c_1a51740972d62e96e248d8a07eb65e48aa" compoundref="vector_8c" startline="2025" endline="2034">delete_uchar_vector_duplicates</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a69479bf6e334f44f372305c8b1b13bb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop_bool_vector_index</definition>
        <argsstring>(Bool *vec, size_t index)</argsstring>
        <name>pop_bool_vector_index</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will pop a value from an <ref refid="structBool" kindref="compound">Bool</ref> struct container as a user defined index. This function runs fastest, when the index is the last populated index.</para>
<para>/param vec An struct container of type <ref refid="structBool" kindref="compound">Bool</ref> /param index The index from which data is to be popped.</para>
<para><programlisting><codeline><highlight class="normal">Bool<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_bool_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>false);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>false);</highlight></codeline>
<codeline><highlight class="normal">pop_bool_vector_index(vec,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">pop_bool_vector_index(vec,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>true,<sp/>true,<sp/>false<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1733" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1534" bodyend="1544" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1733" declcolumn="5"/>
        <references refid="structBool_1a5445f6ef94d239208dc797c289fded75" compoundref="vector_8h" startline="90">Bool::active_length</references>
        <references refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" compoundref="vector_8h" startline="90">Bool::array</references>
        <referencedby refid="vector_8c_1a1fe7315ba2394e61b43b99bfc765bd75" compoundref="vector_8c" startline="2037" endline="2046">delete_bool_vector_duplicates</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a4db2688e1c0d0d477c8a7168d811956d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop_string_vector_index</definition>
        <argsstring>(String *vec, size_t index)</argsstring>
        <name>pop_string_vector_index</name>
        <param>
          <type><ref refid="structString" kindref="compound">String</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will pop a value from an <ref refid="structChar" kindref="compound">Char</ref> struct container as a user defined index. This function runs fastest, when the index is the last populated index.</para>
<para>/param vec An struct container of type <ref refid="structChar" kindref="compound">Char</ref> /param index The index from which data is to be popped.</para>
<para><programlisting><codeline><highlight class="normal">String<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_string_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>&quot;Hello&quot;,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>&quot;Goodbye&quot;,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>&quot;again&quot;,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>Test&quot;,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>&quot;One&quot;,<sp/>vec.active_length);</highlight></codeline>
<codeline><highlight class="normal">pop_string_vector_index(vec,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>Goodbye,<sp/>again,<sp/>Test,<sp/>One<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_string_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1757" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1547" bodyend="1567" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1757" declcolumn="5"/>
        <references refid="structString_1a706ffaf2f520d46074dd99e7896d6673" compoundref="vector_8h" startline="97">String::active_length</references>
        <references refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" compoundref="vector_8h" startline="96">String::array</references>
        <referencedby refid="vector_8c_1a1b3482060f9c607f98dbef4845db335f" compoundref="vector_8c" startline="2049" endline="2060">delete_string_vector_duplicates</referencedby>
        <referencedby refid="vector_8c_1a1556bb53212c3c454a2ddb3f4c2f4c8a" compoundref="vector_8c" startline="1671" endline="1680">replace_string_vector_values</referencedby>
        <referencedby refid="vector_8c_1a6297710c0ac2122db93e47a260e96ad8" compoundref="vector_8c" startline="2277" endline="2288">reverse_string_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a6f10b6c383f01d0f64ccdbedcbf2f9c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replace_short_vector_values</definition>
        <argsstring>(Short *vec, short int old_value, short int new_value)</argsstring>
        <name>replace_short_vector_values</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>short int</type>
          <declname>old_value</declname>
        </param>
        <param>
          <type>short int</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace all instances of a scalar value in an <ref refid="structShort" kindref="compound">Short</ref> struct container.</para>
<para>/param vec A struct container of type <ref refid="structShort" kindref="compound">Short</ref> /param old_value An short int scalar variable to be replaced /param new_value An short int scalar variable to replace old_value with</para>
<para><programlisting><codeline><highlight class="normal">Short<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_short_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">replace_short_vector_values(vec,<sp/>1,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//&gt;&gt;<sp/>[<sp/>5,<sp/>5,<sp/>2,<sp/>5,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_short_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1784" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1573" bodyend="1577" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1784" declcolumn="6"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a879f3876d14b47d940dbe55a1eec452e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replace_ushort_vector_values</definition>
        <argsstring>(UShort *vec, unsigned short int old_value, unsigned short int new_value)</argsstring>
        <name>replace_ushort_vector_values</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned short int</type>
          <declname>old_value</declname>
        </param>
        <param>
          <type>unsigned short int</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace all instances of a scalar value in an <ref refid="structUShort" kindref="compound">UShort</ref> struct container.</para>
<para>/param vec A struct container of type <ref refid="structUShort" kindref="compound">UShort</ref> /param old_value An unsigned short int scalar variable to be replaced /param new_value An unsigned short int scalar variable to replace old_value with</para>
<para><programlisting><codeline><highlight class="normal">UShort<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ushort_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">replace_ushort_vector_values(vec,<sp/>1,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//&gt;&gt;<sp/>[<sp/>5,<sp/>5,<sp/>2,<sp/>5,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ushort_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1809" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1580" bodyend="1584" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1809" declcolumn="6"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a7670474ec5b862ec981a62daa995aa3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replace_int_vector_values</definition>
        <argsstring>(Int *vec, int old_value, int new_value)</argsstring>
        <name>replace_int_vector_values</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>old_value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace all instances of a scalar value in an <ref refid="structInt" kindref="compound">Int</ref> struct container.</para>
<para>/param vec A struct container of type <ref refid="structInt" kindref="compound">Int</ref> /param old_value An int scalar variable to be replaced /param new_value An int scalar variable to replace old_value with</para>
<para><programlisting><codeline><highlight class="normal">Int<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_int_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">replace_int_vector_values(vec,<sp/>1,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//&gt;&gt;<sp/>[<sp/>5,<sp/>5,<sp/>2,<sp/>5,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_int_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1834" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1587" bodyend="1591" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1834" declcolumn="6"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a9d98a8399e52f97b6771d676b3919319" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replace_uint_vector_values</definition>
        <argsstring>(UInt *vec, unsigned int old_value, unsigned int new_value)</argsstring>
        <name>replace_uint_vector_values</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>old_value</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace all instances of a scalar value in an <ref refid="structUInt" kindref="compound">UInt</ref> struct container.</para>
<para>/param vec A struct container of type <ref refid="structUInt" kindref="compound">UInt</ref> /param old_value An unsigned int scalar variable to be replaced /param new_value An unsigned int scalar variable to replace old_value with</para>
<para><programlisting><codeline><highlight class="normal">UInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uint_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">replace_uint_vector_values(vec,<sp/>1,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//&gt;&gt;<sp/>[<sp/>5,<sp/>5,<sp/>2,<sp/>5,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uint_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1859" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1594" bodyend="1598" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1859" declcolumn="6"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a8f344f297fe759011551c5f2bb5e0161" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replace_long_vector_values</definition>
        <argsstring>(LInt *vec, long int old_value, long int new_value)</argsstring>
        <name>replace_long_vector_values</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>old_value</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace all instances of a scalar value in an <ref refid="structLInt" kindref="compound">LInt</ref> struct container.</para>
<para>/param vec A struct container of type <ref refid="structLInt" kindref="compound">LInt</ref> /param old_value An long int scalar variable to be replaced /param new_value An long int scalar variable to replace old_value with</para>
<para><programlisting><codeline><highlight class="normal">LInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_long_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">replace_long_vector_values(vec,<sp/>1,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//&gt;&gt;<sp/>[<sp/>5,<sp/>5,<sp/>2,<sp/>5,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_long_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1884" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1601" bodyend="1605" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1884" declcolumn="6"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a3354495712d1e3910ca4e6a33ee1c1df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replace_ulong_vector_values</definition>
        <argsstring>(ULInt *vec, unsigned long int old_value, unsigned long int new_value)</argsstring>
        <name>replace_ulong_vector_values</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned long int</type>
          <declname>old_value</declname>
        </param>
        <param>
          <type>unsigned long int</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace all instances of a scalar value in an <ref refid="structULInt" kindref="compound">ULInt</ref> struct container.</para>
<para>/param vec A struct container of type <ref refid="structULInt" kindref="compound">ULInt</ref> /param old_value An unsigned long int scalar variable to be replaced /param new_value An unsigned long int scalar variable to replace old_value with</para>
<para><programlisting><codeline><highlight class="normal">ULInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ulong_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">replace_ulong_vector_values(vec,<sp/>1,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//&gt;&gt;<sp/>[<sp/>5,<sp/>5,<sp/>2,<sp/>5,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ulong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1909" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1608" bodyend="1612" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1909" declcolumn="6"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a6fbef65375cd1143dadb2045d4a4cc82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replace_llong_vector_values</definition>
        <argsstring>(LLInt *vec, long long int old_value, long long int new_value)</argsstring>
        <name>replace_llong_vector_values</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long long int</type>
          <declname>old_value</declname>
        </param>
        <param>
          <type>long long int</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace all instances of a scalar value in an <ref refid="structLLInt" kindref="compound">LLInt</ref> struct container.</para>
<para>/param vec A struct container of type <ref refid="structLLInt" kindref="compound">LLInt</ref> /param old_value An long long int scalar variable to be replaced /param new_value An long long int scalar variable to replace old_value with</para>
<para><programlisting><codeline><highlight class="normal">LLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_llong_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">replace_llong_vector_values(vec,<sp/>1,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//&gt;&gt;<sp/>[<sp/>5,<sp/>5,<sp/>2,<sp/>5,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_llong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1934" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1615" bodyend="1619" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1934" declcolumn="6"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1acdb36a4f7fabea5ff887469c25bcaac3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replace_ullong_vector_values</definition>
        <argsstring>(ULLInt *vec, unsigned long long int old_value, unsigned long long int new_value)</argsstring>
        <name>replace_ullong_vector_values</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned long long int</type>
          <declname>old_value</declname>
        </param>
        <param>
          <type>unsigned long long int</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace all instances of a scalar value in an <ref refid="structULLInt" kindref="compound">ULLInt</ref> struct container.</para>
<para>/param vec A struct container of type <ref refid="structULLInt" kindref="compound">ULLInt</ref> /param old_value An unsigned long long int scalar variable to be replaced /param new_value An unsigned long long int scalar variable to replace old_value with</para>
<para><programlisting><codeline><highlight class="normal">ULLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ullong_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">replace_ullong_vector_values(vec,<sp/>1,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//&gt;&gt;<sp/>[<sp/>5,<sp/>5,<sp/>2,<sp/>5,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ullong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1959" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1622" bodyend="1626" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1959" declcolumn="6"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1aafe1e760a31236df3e8d9b5d4fedf79e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replace_float_vector_values</definition>
        <argsstring>(Flt *vec, float old_value, float new_value)</argsstring>
        <name>replace_float_vector_values</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>float</type>
          <declname>old_value</declname>
        </param>
        <param>
          <type>float</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace all instances of a scalar value in an <ref refid="structFlt" kindref="compound">Flt</ref> struct container.</para>
<para>/param vec A struct container of type <ref refid="structFlt" kindref="compound">Flt</ref> /param old_value An float scalar variable to be replaced /param new_value An float scalar variable to replace old_value with</para>
<para><programlisting><codeline><highlight class="normal">Flt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_float_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">replace_float_vector_values(vec,<sp/>1,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//&gt;&gt;<sp/>[<sp/>5,<sp/>5,<sp/>2,<sp/>5,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_float_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="1984" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1629" bodyend="1633" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="1984" declcolumn="6"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a141f86441673f219db9af026644dee3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replace_double_vector_values</definition>
        <argsstring>(Dble *vec, double old_value, double new_value)</argsstring>
        <name>replace_double_vector_values</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>double</type>
          <declname>old_value</declname>
        </param>
        <param>
          <type>double</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace all instances of a scalar value in an <ref refid="structDble" kindref="compound">Dble</ref> struct container.</para>
<para>/param vec A struct container of type <ref refid="structDble" kindref="compound">Dble</ref> /param old_value An double scalar variable to be replaced /param new_value An double scalar variable to replace old_value with</para>
<para><programlisting><codeline><highlight class="normal">Dble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_double_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">replace_double_vector_values(vec,<sp/>1,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//&gt;&gt;<sp/>[<sp/>5,<sp/>5,<sp/>2,<sp/>5,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_double_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2009" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1636" bodyend="1640" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2009" declcolumn="6"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a344c029c451a00a0a90e20b34569db22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replace_ldouble_vector_values</definition>
        <argsstring>(LDble *vec, long double old_value, long double new_value)</argsstring>
        <name>replace_ldouble_vector_values</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>old_value</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace all instances of a scalar value in an <ref refid="structLDble" kindref="compound">LDble</ref> struct container.</para>
<para>/param vec A struct container of type <ref refid="structLDble" kindref="compound">LDble</ref> /param old_value A long double scalar variable to be replaced /param new_value A long double scalar variable to replace old_value with</para>
<para><programlisting><codeline><highlight class="normal">LDble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ldouble_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">replace_ldouble_vector_values(vec,<sp/>1,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//&gt;&gt;<sp/>[<sp/>5,<sp/>5,<sp/>2,<sp/>5,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ldouble_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2034" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1643" bodyend="1647" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2034" declcolumn="6"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a8b7c3baf36c7ef6deca8011f2d622119" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replace_char_vector_values</definition>
        <argsstring>(Char *vec, char old_value, char new_value)</argsstring>
        <name>replace_char_vector_values</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>char</type>
          <declname>old_value</declname>
        </param>
        <param>
          <type>char</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace all instances of a scalar value in an <ref refid="structChar" kindref="compound">Char</ref> struct container.</para>
<para>/param vec A struct container of type <ref refid="structChar" kindref="compound">Char</ref> /param old_value A char scalar variable to be replaced /param new_value A char scalar variable to replace old_value with</para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_char_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">replace_char_vector_values(vec,<sp/>1,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//&gt;&gt;<sp/>[<sp/>5,<sp/>5,<sp/>2,<sp/>5,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2059" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1650" bodyend="1654" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2059" declcolumn="6"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a8b8b55713c6eeeba3f8bb8fbbb08ad10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replace_uchar_vector_values</definition>
        <argsstring>(UChar *vec, unsigned char old_value, unsigned char new_value)</argsstring>
        <name>replace_uchar_vector_values</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>old_value</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace all instances of a scalar value in an <ref refid="structChar" kindref="compound">Char</ref> struct container.</para>
<para>/param vec A struct container of type <ref refid="structUChar" kindref="compound">UChar</ref> /param old_value A char scalar variable to be replaced /param new_value A char scalar variable to replace old_value with</para>
<para><programlisting><codeline><highlight class="normal">UChar<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uchar_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">replace_uchar_vector_values(vec,<sp/>1,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//&gt;&gt;<sp/>[<sp/>5,<sp/>5,<sp/>2,<sp/>5,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uchar_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2084" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1657" bodyend="1661" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2084" declcolumn="6"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ab345b0d10cef3cb87e552791440398e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replace_bool_vector_values</definition>
        <argsstring>(Bool *vec, bool old_value, char new_value)</argsstring>
        <name>replace_bool_vector_values</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>old_value</declname>
        </param>
        <param>
          <type>char</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace all instances of a scalar value in an <ref refid="structBool" kindref="compound">Bool</ref> struct container.</para>
<para>/param vec A struct container of type <ref refid="structBool" kindref="compound">Bool</ref> /param old_value A bool scalar variable to be replaced /param new_value A bool scalar variable to replace old_value with</para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_bool_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>false);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">replace_bool_vector_values(vec,<sp/>true,<sp/>false);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//&gt;&gt;<sp/>[<sp/>false,<sp/>false,<sp/>false,<sp/>false,<sp/>false<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_bool_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2109" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1664" bodyend="1668" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2109" declcolumn="6"/>
        <references refid="structBool_1a5445f6ef94d239208dc797c289fded75" compoundref="vector_8h" startline="90">Bool::active_length</references>
        <references refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" compoundref="vector_8h" startline="90">Bool::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a1556bb53212c3c454a2ddb3f4c2f4c8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void replace_string_vector_values</definition>
        <argsstring>(String *vec, char *old_value, char *new_value)</argsstring>
        <name>replace_string_vector_values</name>
        <param>
          <type><ref refid="structString" kindref="compound">String</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>old_value</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>new_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace all instances of a string within a <ref refid="structString" kindref="compound">String</ref> vector struct</para>
<para>/param vec A struct container of type <ref refid="structString" kindref="compound">String</ref> /param old_value The old string value /param new_value The new string value</para>
<para><programlisting><codeline><highlight class="normal">String<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_string_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>&quot;Hello&quot;,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>&quot;Goodbye&quot;,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>&quot;Hello&quot;,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>&quot;Goodbye&quot;,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">replace_string_vector_values(vec,<sp/>&quot;Hello&quot;,<sp/>&quot;Wrong&quot;);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>Wrong,<sp/>Goodbye,<sp/>Wrong,<sp/>Goodbye);</highlight></codeline>
<codeline><highlight class="normal">free_string_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2132" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1671" bodyend="1680" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2132" declcolumn="6"/>
        <references refid="structString_1a706ffaf2f520d46074dd99e7896d6673" compoundref="vector_8h" startline="97">String::active_length</references>
        <references refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" compoundref="vector_8h" startline="96">String::array</references>
        <references refid="vector_8c_1a4db2688e1c0d0d477c8a7168d811956d" compoundref="vector_8c" startline="1547" endline="1567">pop_string_vector_index</references>
        <references refid="vector_8c_1a078616c26d55c1ddb2ec4c551298a4f8" compoundref="vector_8c" startline="811" endline="829">push_string_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a8a383d2299a326d3c0ded94c19d73393" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_short_vector</definition>
        <argsstring>(Short *vec)</argsstring>
        <name>free_short_vector</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will free all memory from an <ref refid="structShort" kindref="compound">Short</ref> data type assuming the type was used for dynamically allocated memory. If the type was initialized for statically allocated memory, this function will write an error to stderror and return a value of -1 to the calling program.</para>
<para>/param vec A struct container of type <ref refid="structShort" kindref="compound">Short</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2145" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1685" bodyend="1695" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2145" declcolumn="6"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1af0b6f4e61e69b8a2f74d42b09b421d88" compoundref="vector_8h" startline="77">Short::allocated_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
        <references refid="structShort_1a20b9c526866b593e8e1ecdc49515e642" compoundref="vector_8h" startline="77">Short::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a3765cd4f6e59bada679e05ea6dacfff5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_ushort_vector</definition>
        <argsstring>(UShort *vec)</argsstring>
        <name>free_ushort_vector</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will free all memory from an <ref refid="structUShort" kindref="compound">UShort</ref> data type assuming the type was used for dynamically allocated memory. If the type was initialized for statically allocated memory, this function will write an error to stderror and return a value of -1 to the calling program.</para>
<para>/param vec A struct container of type <ref refid="structUShort" kindref="compound">UShort</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2156" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1698" bodyend="1708" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2156" declcolumn="6"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a0ef4541f3fd3fcee1c0f5809341c84d6" compoundref="vector_8h" startline="78">UShort::allocated_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
        <references refid="structUShort_1a4c5d40034bbd1e9ee0de773d6be0c31e" compoundref="vector_8h" startline="78">UShort::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ab2c13b705440e4d4d53825bb16929ff6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_int_vector</definition>
        <argsstring>(Int *vec)</argsstring>
        <name>free_int_vector</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will free all memory from an <ref refid="structInt" kindref="compound">Int</ref> data type assuming the type was used for dynamically allocated memory. If the type was initialized for statically allocated memory, this function will write an error to stderror and return a value of -1 to the calling program.</para>
<para>/param vec A struct container of type <ref refid="structInt" kindref="compound">Int</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2167" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1711" bodyend="1721" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2167" declcolumn="6"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a63bea8755b3ce6be7e83970b9ea3bd68" compoundref="vector_8h" startline="79">Int::allocated_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
        <references refid="structInt_1ae124ac3392878072e49fe64e0d07beff" compoundref="vector_8h" startline="79">Int::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a6195f400606be104b4461cd9876f93ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_uint_vector</definition>
        <argsstring>(UInt *vec)</argsstring>
        <name>free_uint_vector</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will free all memory from an <ref refid="structUInt" kindref="compound">UInt</ref> data type assuming the type was used for dynamically allocated memory. If the type was initialized for statically allocated memory, this function will write an error to stderror and return a value of -1 to the calling program.</para>
<para>/param vec A struct container of type <ref refid="structUInt" kindref="compound">UInt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2178" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1724" bodyend="1734" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2178" declcolumn="6"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a05b28efaec93c388e8685403f57a07ce" compoundref="vector_8h" startline="80">UInt::allocated_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
        <references refid="structUInt_1ab87c8b62b4178bf9bcf59d03b066da1c" compoundref="vector_8h" startline="80">UInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1af1ab528ebf7f47a278e3be3b02e9acee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_long_vector</definition>
        <argsstring>(LInt *vec)</argsstring>
        <name>free_long_vector</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will free all memory from an <ref refid="structLInt" kindref="compound">LInt</ref> data type assuming the type was used for dynamically allocated memory. If the type was initialized for statically allocated memory, this function will write an error to stderror and return a value of -1 to the calling program.</para>
<para>/param vec A struct container of type <ref refid="structLInt" kindref="compound">LInt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2189" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1737" bodyend="1747" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2189" declcolumn="6"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a21eec79c847025348ad0082aab6dee52" compoundref="vector_8h" startline="81">LInt::allocated_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
        <references refid="structLInt_1a7255bafd2fb6310140aebe36d68b9629" compoundref="vector_8h" startline="81">LInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a9a05407a3434648f10f4416a7874150d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_ulong_vector</definition>
        <argsstring>(ULInt *vec)</argsstring>
        <name>free_ulong_vector</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will free all memory from an <ref refid="structULInt" kindref="compound">ULInt</ref> data type assuming the type was used for dynamically allocated memory. If the type was initialized for statically allocated memory, this function will write an error to stderror and return a value of -1 to the calling program.</para>
<para>/param vec A struct container of type <ref refid="structULInt" kindref="compound">ULInt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2200" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1750" bodyend="1760" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2200" declcolumn="6"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1acf325510e03976f12c116ad68c4998ec" compoundref="vector_8h" startline="82">ULInt::allocated_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
        <references refid="structULInt_1abbab1a9c205c4d86fcc53c55174d1515" compoundref="vector_8h" startline="82">ULInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1af92bc034e6f34814eea1008629f41ef9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_llong_vector</definition>
        <argsstring>(LLInt *vec)</argsstring>
        <name>free_llong_vector</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will free all memory from an <ref refid="structLLInt" kindref="compound">LLInt</ref> data type assuming the type was used for dynamically allocated memory. If the type was initialized for statically allocated memory, this function will write an error to stderror and return a value of -1 to the calling program.</para>
<para>/param vec A struct container of type <ref refid="structLLInt" kindref="compound">LLInt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2211" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1763" bodyend="1773" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2211" declcolumn="6"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1a967c631e7b8192f0016845623ae04759" compoundref="vector_8h" startline="83">LLInt::allocated_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
        <references refid="structLLInt_1a2cf879f2b771d70de2ae15401190b50e" compoundref="vector_8h" startline="83">LLInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a605f038b309fb25e53f637c9e9b6e4bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_ullong_vector</definition>
        <argsstring>(ULLInt *vec)</argsstring>
        <name>free_ullong_vector</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will free all memory from an <ref refid="structULLInt" kindref="compound">ULLInt</ref> data type assuming the type was used for dynamically allocated memory. If the type was initialized for statically allocated memory, this function will write an error to stderror and return a value of -1 to the calling program.</para>
<para>/param vec A struct container of type <ref refid="structULLInt" kindref="compound">ULLInt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2222" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1776" bodyend="1786" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2222" declcolumn="6"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1ac6210c003919694e4fccfc5885c8fcb4" compoundref="vector_8h" startline="84">ULLInt::allocated_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
        <references refid="structULLInt_1acb153b18423bf9465c6a52aa74745df3" compoundref="vector_8h" startline="84">ULLInt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1aa0efda9f361b9e9219f5afc379c7e6cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_float_vector</definition>
        <argsstring>(Flt *vec)</argsstring>
        <name>free_float_vector</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will free all memory from an <ref refid="structFlt" kindref="compound">Flt</ref> data type assuming the type was used for dynamically allocated memory. If the type was initialized for statically allocated memory, this function will write an error to stderror and return a value of -1 to the calling program.</para>
<para>/param vec A struct container of type <ref refid="structFlt" kindref="compound">Flt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2233" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1789" bodyend="1799" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2233" declcolumn="6"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a917603eeaae1fb22accbfc8d9252a389" compoundref="vector_8h" startline="85">Flt::allocated_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
        <references refid="structFlt_1ad98ce16bf2fff8b16351042bd4135629" compoundref="vector_8h" startline="85">Flt::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a0d9577d0256e0e006d1c55a12ba1bffd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_double_vector</definition>
        <argsstring>(Dble *vec)</argsstring>
        <name>free_double_vector</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will free all memory from an <ref refid="structDble" kindref="compound">Dble</ref> data type assuming the type was used for dynamically allocated memory. If the type was initialized for statically allocated memory, this function will write an error to stderror and return a value of -1 to the calling program.</para>
<para>/param vec A struct container of type <ref refid="structDble" kindref="compound">Dble</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2244" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1802" bodyend="1812" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2244" declcolumn="6"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a83cb29dfe09183032473cc7ffe005f5d" compoundref="vector_8h" startline="86">Dble::allocated_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
        <references refid="structDble_1a593e6de4412f110b4ffe6fd87a62aa56" compoundref="vector_8h" startline="86">Dble::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a89e6af78e123543fefe3333963de0e83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_ldouble_vector</definition>
        <argsstring>(LDble *vec)</argsstring>
        <name>free_ldouble_vector</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will free all memory from an <ref refid="structLDble" kindref="compound">LDble</ref> data type assuming the type was used for dynamically allocated memory. If the type was initialized for statically allocated memory, this function will write an error to stderror and return a value of -1 to the calling program.</para>
<para>/param vec A struct container of type <ref refid="structLDble" kindref="compound">LDble</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2255" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1815" bodyend="1825" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2255" declcolumn="6"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a1f0f3fd968cab1acdebf0d43f632633f" compoundref="vector_8h" startline="87">LDble::allocated_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
        <references refid="structLDble_1a25a9e54828403acb6e1e565d00a24582" compoundref="vector_8h" startline="87">LDble::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1afef1cb622b3f54256849a3b5446a7af4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_char_vector</definition>
        <argsstring>(Char *vec)</argsstring>
        <name>free_char_vector</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will free all memory from an <ref refid="structChar" kindref="compound">Char</ref> data type assuming the type was used for dynamically allocated memory. If the type was initialized for statically allocated memory, this function will write an error to stderror and return a value of -1 to the calling program.</para>
<para>/param vec A struct container of type <ref refid="structChar" kindref="compound">Char</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2266" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1828" bodyend="1838" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2266" declcolumn="6"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1ab59977640c7539e5ae251af86d445257" compoundref="vector_8h" startline="88">Char::allocated_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
        <references refid="structChar_1a7231211c3eec109684271510fb25ffe8" compoundref="vector_8h" startline="88">Char::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a9f3fcb3deda563d834c9d3d13f097268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_uchar_vector</definition>
        <argsstring>(UChar *vec)</argsstring>
        <name>free_uchar_vector</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will free all memory from an <ref refid="structChar" kindref="compound">Char</ref> data type assuming the type was used for dynamically allocated memory. If the type was initialized for statically allocated memory, this function will write an error to stderror and return a value of -1 to the calling program.</para>
<para>/param vec A struct container of type <ref refid="structUChar" kindref="compound">UChar</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2277" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1841" bodyend="1851" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2277" declcolumn="6"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="structUChar_1a69ec79fc44d9f3b1455705e24a819f4b" compoundref="vector_8h" startline="89">UChar::allocated_length</references>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
        <references refid="structUChar_1aa1ea52fa832c84586784bb36c1617e44" compoundref="vector_8h" startline="89">UChar::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a5783a319298af13236def83e42f00799" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_bool_vector</definition>
        <argsstring>(Bool *vec)</argsstring>
        <name>free_bool_vector</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will free all memory from an <ref refid="structBool" kindref="compound">Bool</ref> data type assuming the type was used for dynamically allocated memory. If the type was initialized for statically allocated memory, this function will write an error to stderror and return a value of -1 to the calling program.</para>
<para>/param vec A struct container of type <ref refid="structBool" kindref="compound">Bool</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2288" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1854" bodyend="1864" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2288" declcolumn="6"/>
        <references refid="structBool_1a5445f6ef94d239208dc797c289fded75" compoundref="vector_8h" startline="90">Bool::active_length</references>
        <references refid="structBool_1a4a353f55a013f72befc666e8d0708212" compoundref="vector_8h" startline="90">Bool::allocated_length</references>
        <references refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" compoundref="vector_8h" startline="90">Bool::array</references>
        <references refid="structBool_1ad781cb2cecf2b060c6337a73ed89def9" compoundref="vector_8h" startline="90">Bool::dat_type</references>
        <references refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" compoundref="vector_8h" startline="38">DYNAMIC</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a2975c4c7c36efebc98b926abfc4ba837" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_string_vector</definition>
        <argsstring>(String *vec)</argsstring>
        <name>free_string_vector</name>
        <param>
          <type><ref refid="structString" kindref="compound">String</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will free all memory from anString data type assuming the type was used for dynamically allocated memory.</para>
<para>/param vec A struct container of type <ref refid="structString" kindref="compound">String</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2297" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1867" bodyend="1876" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2297" declcolumn="6"/>
        <references refid="structString_1a706ffaf2f520d46074dd99e7896d6673" compoundref="vector_8h" startline="97">String::active_length</references>
        <references refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" compoundref="vector_8h" startline="96">String::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a35b16d98a38d37826ee118f4860d680a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delete_short_vector_duplicates</definition>
        <argsstring>(Short *vec)</argsstring>
        <name>delete_short_vector_duplicates</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will delete all duplicate values in an <ref refid="structShort" kindref="compound">Short</ref> struct, with exception of the first instance of the variable.</para>
<para>/param vec A struct container of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para><programlisting><codeline><highlight class="normal">Short<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_short_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_short_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">delete_short_vector_duplicates(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_short_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2323" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1881" bodyend="1890" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2323" declcolumn="6"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
        <references refid="vector_8c_1a90c0d394579f3950b22adabb66f153e9" compoundref="vector_8c" startline="1366" endline="1376">pop_short_vector_index</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a372a58405f86fa4ef22f53af37408017" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delete_ushort_vector_duplicates</definition>
        <argsstring>(UShort *vec)</argsstring>
        <name>delete_ushort_vector_duplicates</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will delete all duplicate values in an <ref refid="structUShort" kindref="compound">UShort</ref> struct, with exception of the first instance of the variable.</para>
<para>/param vec A struct container of type <ref refid="structUShort" kindref="compound">UShort</ref></para>
<para><programlisting><codeline><highlight class="normal">UShort<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ushort_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_ushort_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">delete_ushort_vector_duplicates(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ushort_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2347" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1893" bodyend="1902" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2347" declcolumn="6"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
        <references refid="vector_8c_1ab5f9826948a1e75b6ffa74b2e801f8c5" compoundref="vector_8c" startline="1379" endline="1389">pop_ushort_vector_index</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a68a325016f45777566e1eae4b15c4238" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delete_int_vector_duplicates</definition>
        <argsstring>(Int *vec)</argsstring>
        <name>delete_int_vector_duplicates</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will delete all duplicate values in an <ref refid="structInt" kindref="compound">Int</ref> struct, with exception of the first instance of the variable.</para>
<para>/param vec A struct container of type <ref refid="structInt" kindref="compound">Int</ref></para>
<para><programlisting><codeline><highlight class="normal">Int<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_int_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_int_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">delete_int_vector_duplicates(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_int_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2371" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1905" bodyend="1914" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2371" declcolumn="6"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
        <references refid="vector_8c_1af0ecebd36b313d07d43f40698bd5508f" compoundref="vector_8c" startline="1392" endline="1402">pop_int_vector_index</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ab5a49e7e86d86796744395431d475f74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delete_uint_vector_duplicates</definition>
        <argsstring>(UInt *vec)</argsstring>
        <name>delete_uint_vector_duplicates</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will delete all duplicate values in a <ref refid="structUInt" kindref="compound">UInt</ref> struct, with exception of the first instance of the variable.</para>
<para>/param vec A struct container of type <ref refid="structUInt" kindref="compound">UInt</ref></para>
<para><programlisting><codeline><highlight class="normal">UInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uint_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_uint_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">delete_uint_vector_duplicates(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uint_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2395" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1917" bodyend="1926" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2395" declcolumn="6"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
        <references refid="vector_8c_1aea61eee2cd7481c1d34d13ba4a27e669" compoundref="vector_8c" startline="1405" endline="1415">pop_uint_vector_index</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a10ee633f27cbd6252d41ffd0761f6392" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delete_long_vector_duplicates</definition>
        <argsstring>(LInt *vec)</argsstring>
        <name>delete_long_vector_duplicates</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will delete all duplicate values in a <ref refid="structLInt" kindref="compound">LInt</ref> struct, with exception of the first instance of the variable.</para>
<para>/param vec A struct container of type <ref refid="structLInt" kindref="compound">LInt</ref></para>
<para><programlisting><codeline><highlight class="normal">LInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_long_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_long_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">delete_long_vector_duplicates(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_long_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2419" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1929" bodyend="1938" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2419" declcolumn="6"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
        <references refid="vector_8c_1ade7d072b4cbbed3560461122ff9bf2d1" compoundref="vector_8c" startline="1418" endline="1428">pop_long_vector_index</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1aa7b0890be4e8157712930fedaf437c8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delete_ulong_vector_duplicates</definition>
        <argsstring>(ULInt *vec)</argsstring>
        <name>delete_ulong_vector_duplicates</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will delete all duplicate values in a <ref refid="structULInt" kindref="compound">ULInt</ref> struct, with exception of the first instance of the variable.</para>
<para>/param vec A struct container of type <ref refid="structULInt" kindref="compound">ULInt</ref></para>
<para><programlisting><codeline><highlight class="normal">ULInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ulong_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_ulong_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">delete_ulong_vector_duplicates(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ulong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2443" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1941" bodyend="1950" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2443" declcolumn="6"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
        <references refid="vector_8c_1aee6e8f2b009cc7205dfd8c143b8e9839" compoundref="vector_8c" startline="1431" endline="1441">pop_ulong_vector_index</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a8f895e83e3b4e24dfdd253508da61875" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delete_llong_vector_duplicates</definition>
        <argsstring>(LLInt *vec)</argsstring>
        <name>delete_llong_vector_duplicates</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will delete all duplicate values in a <ref refid="structLLInt" kindref="compound">LLInt</ref> struct, with exception of the first instance of the variable.</para>
<para>/param vec A struct container of type <ref refid="structLLInt" kindref="compound">LLInt</ref></para>
<para><programlisting><codeline><highlight class="normal">LLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_llong_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_llong_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">delete_llong_vector_duplicates(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_llong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2467" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1953" bodyend="1962" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2467" declcolumn="6"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
        <references refid="vector_8c_1a6475916b10de913b8859fbd0b8312557" compoundref="vector_8c" startline="1444" endline="1454">pop_llong_vector_index</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a91794ceff19b304073f15ca82fe38b0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delete_ullong_vector_duplicates</definition>
        <argsstring>(ULLInt *vec)</argsstring>
        <name>delete_ullong_vector_duplicates</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will delete all duplicate values in a <ref refid="structULLInt" kindref="compound">ULLInt</ref> struct, with exception of the first instance of the variable.</para>
<para>/param vec A struct container of type <ref refid="structULLInt" kindref="compound">ULLInt</ref></para>
<para><programlisting><codeline><highlight class="normal">ULLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ullong_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_ullong_vector(vec,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">delete_ullong_vector_duplicates(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ullong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2491" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1965" bodyend="1974" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2491" declcolumn="6"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
        <references refid="vector_8c_1a52f4d32e9312b40967f4c0ee3de88e7a" compoundref="vector_8c" startline="1457" endline="1467">pop_ullong_vector_index</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a49e7b8e0e17f4570f95875965ea8c2d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delete_float_vector_duplicates</definition>
        <argsstring>(Flt *vec)</argsstring>
        <name>delete_float_vector_duplicates</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will delete all duplicate values in a <ref refid="structFlt" kindref="compound">Flt</ref> struct, with exception of the first instance of the variable.</para>
<para>/param vec A struct container of type <ref refid="structFlt" kindref="compound">Flt</ref></para>
<para><programlisting><codeline><highlight class="normal">Flt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_float_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>1.f);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>1.f);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>2.f);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>2.f);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>3.f);</highlight></codeline>
<codeline><highlight class="normal">push_float_vector(vec,<sp/>3.f);</highlight></codeline>
<codeline><highlight class="normal">delete_float_vector_duplicates(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_float_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2515" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1977" bodyend="1986" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2515" declcolumn="6"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
        <references refid="vector_8c_1a7f179d98deb7852196afc7e3d26ef06d" compoundref="vector_8c" startline="1470" endline="1480">pop_float_vector_index</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a0bf0ceecb4ef742811c3b2ed8384d432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delete_double_vector_duplicates</definition>
        <argsstring>(Dble *vec)</argsstring>
        <name>delete_double_vector_duplicates</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will delete all duplicate values in a <ref refid="structDble" kindref="compound">Dble</ref> struct, with exception of the first instance of the variable.</para>
<para>/param vec A struct container of type <ref refid="structDble" kindref="compound">Dble</ref></para>
<para><programlisting><codeline><highlight class="normal">Dble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_double_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>1.);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>1.);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>2.);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>2.);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>3.);</highlight></codeline>
<codeline><highlight class="normal">push_double_vector(vec,<sp/>3.);</highlight></codeline>
<codeline><highlight class="normal">delete_double_vector_duplicates(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_double_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2539" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="1989" bodyend="1998" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2539" declcolumn="6"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
        <references refid="vector_8c_1a8d2545eb603560d67e5c481075e5d0fc" compoundref="vector_8c" startline="1483" endline="1493">pop_double_vector_index</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a915b5e5eff06f5a04ff068c94cdcffb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delete_ldouble_vector_duplicates</definition>
        <argsstring>(LDble *vec)</argsstring>
        <name>delete_ldouble_vector_duplicates</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will delete all duplicate values in a <ref refid="structLDble" kindref="compound">LDble</ref> struct, with exception of the first instance of the variable.</para>
<para>/param vec A struct container of type <ref refid="structLDble" kindref="compound">LDble</ref></para>
<para><programlisting><codeline><highlight class="normal">LDble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ldouble_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>1.);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>1.);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>2.);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>2.);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>3.);</highlight></codeline>
<codeline><highlight class="normal">push_ldouble_vector(vec,<sp/>3.);</highlight></codeline>
<codeline><highlight class="normal">delete_ldouble_vector_duplicates(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>2,<sp/>3<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ldouble_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2563" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2001" bodyend="2010" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2563" declcolumn="6"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
        <references refid="vector_8c_1a3964e5480d290ac44a95680e52706f9d" compoundref="vector_8c" startline="1496" endline="1506">pop_ldouble_vector_index</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a5a01cb2f66c78b55858a0941ad9459af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delete_char_vector_duplicates</definition>
        <argsstring>(Char *vec)</argsstring>
        <name>delete_char_vector_duplicates</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will delete all duplicate values in a <ref refid="structChar" kindref="compound">Char</ref> struct, with exception of the first instance of the variable.</para>
<para>/param vec A struct container of type <ref refid="structChar" kindref="compound">Char</ref></para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_char_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>&apos;a&apos;);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>&apos;a&apos;);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>&apos;b&apos;);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>&apos;b&apos;);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>&apos;c&apos;);</highlight></codeline>
<codeline><highlight class="normal">push_char_vector(vec,<sp/>&apos;c&apos;);</highlight></codeline>
<codeline><highlight class="normal">delete_char_vector_duplicates(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>a,<sp/>b,<sp/>c<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2587" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2013" bodyend="2022" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2587" declcolumn="6"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
        <references refid="vector_8c_1a4f9d1488d50bc3889fc04afc18fa9958" compoundref="vector_8c" startline="1509" endline="1519">pop_char_vector_index</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a51740972d62e96e248d8a07eb65e48aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delete_uchar_vector_duplicates</definition>
        <argsstring>(UChar *vec)</argsstring>
        <name>delete_uchar_vector_duplicates</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will delete all duplicate values in a <ref refid="structChar" kindref="compound">Char</ref> struct, with exception of the first instance of the variable.</para>
<para>/param vec A struct container of type <ref refid="structChar" kindref="compound">Char</ref></para>
<para><programlisting><codeline><highlight class="normal">UChar<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uchar_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>&apos;a&apos;);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>&apos;a&apos;);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>&apos;b&apos;);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>&apos;b&apos;);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>&apos;c&apos;);</highlight></codeline>
<codeline><highlight class="normal">push_uchar_vector(vec,<sp/>&apos;c&apos;);</highlight></codeline>
<codeline><highlight class="normal">delete_uchar_vector_duplicates(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>a,<sp/>b,<sp/>c<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uchar_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2611" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2025" bodyend="2034" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2611" declcolumn="6"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
        <references refid="vector_8c_1a7527a193c89c32c07eba99e8abc08574" compoundref="vector_8c" startline="1521" endline="1531">pop_uchar_vector_index</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a1fe7315ba2394e61b43b99bfc765bd75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delete_bool_vector_duplicates</definition>
        <argsstring>(Bool *vec)</argsstring>
        <name>delete_bool_vector_duplicates</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will delete all duplicate values in a <ref refid="structBool" kindref="compound">Bool</ref> struct, with exception of the first instance of the variable.</para>
<para>/param vec A struct container of type <ref refid="structBool" kindref="compound">Bool</ref></para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_bool_vector(vec,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>false);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>false);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">push_bool_vector(vec,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">delete_bool_vector_duplicates(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>true,<sp/>false<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_bool_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2635" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2037" bodyend="2046" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2635" declcolumn="6"/>
        <references refid="structBool_1a5445f6ef94d239208dc797c289fded75" compoundref="vector_8h" startline="90">Bool::active_length</references>
        <references refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" compoundref="vector_8h" startline="90">Bool::array</references>
        <references refid="vector_8c_1a69479bf6e334f44f372305c8b1b13bb3" compoundref="vector_8c" startline="1534" endline="1544">pop_bool_vector_index</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a1b3482060f9c607f98dbef4845db335f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delete_string_vector_duplicates</definition>
        <argsstring>(String *vec)</argsstring>
        <name>delete_string_vector_duplicates</name>
        <param>
          <type><ref refid="structString" kindref="compound">String</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will delete all duplicate values in a <ref refid="structString" kindref="compound">String</ref> struct, with exception of the first instance of the variable</para>
<para>/param vec A struct container of type <ref refid="structString" kindref="compound">String</ref></para>
<para><programlisting><codeline><highlight class="normal">init_string_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>&quot;One&quot;,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>&quot;Two&quot;,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>&quot;One&quot;,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>&quot;One&quot;,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>&quot;Three&quot;,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(vec,<sp/>&quot;Two&quot;,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">delete_string_vector_duplicates(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[One,<sp/>Two,<sp/>Three<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_string_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2658" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2049" bodyend="2060" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2658" declcolumn="6"/>
        <references refid="structString_1a706ffaf2f520d46074dd99e7896d6673" compoundref="vector_8h" startline="97">String::active_length</references>
        <references refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" compoundref="vector_8h" startline="96">String::array</references>
        <references refid="vector_8c_1a4db2688e1c0d0d477c8a7168d811956d" compoundref="vector_8c" startline="1547" endline="1567">pop_string_vector_index</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a6388f663263c0c5a219bc2da551d0584" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reverse_short_vector</definition>
        <argsstring>(Short *vec)</argsstring>
        <name>reverse_short_vector</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will reverse the order of the array in a struct of type <ref refid="structShort" kindref="compound">Short</ref>.</para>
<para>/param vec A vector struct container of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para><programlisting><codeline><highlight class="normal">Short<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_short_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">short<sp/>a[4]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_short_vector(vec,<sp/>a,<sp/>4,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">reverse_short_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_short_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2680" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2065" bodyend="2077" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2680" declcolumn="6"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a15f75e9b6b4192aa83d95635419865da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reverse_ushort_vector</definition>
        <argsstring>(UShort *vec)</argsstring>
        <name>reverse_ushort_vector</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will reverse the order of the array in a struct of type <ref refid="structUShort" kindref="compound">UShort</ref>.</para>
<para>/param A vector struct container of type <ref refid="structUShort" kindref="compound">UShort</ref></para>
<para><programlisting><codeline><highlight class="normal">UShort<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ushort_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">ushort<sp/>a[4]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_ushort_vector(vec,<sp/>a,<sp/>4,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">reverse_ushort_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ushort_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2700" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2080" bodyend="2092" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2700" declcolumn="6"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a0ee6d80508a610096b84893a0edd7e82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reverse_int_vector</definition>
        <argsstring>(Int *vec)</argsstring>
        <name>reverse_int_vector</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will reverse the order of the array in a struct of type <ref refid="structInt" kindref="compound">Int</ref>.</para>
<para>/param vec A vector struct container of type <ref refid="structInt" kindref="compound">Int</ref></para>
<para><programlisting><codeline><highlight class="normal">Int<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_int_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>a[4]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_int_vector(vec,<sp/>a,<sp/>4,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">reverse_int_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_int_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2720" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2095" bodyend="2107" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2720" declcolumn="6"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a58e127cf5386ca2152ebafcf4dbb8bbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reverse_uint_vector</definition>
        <argsstring>(UInt *vec)</argsstring>
        <name>reverse_uint_vector</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will reverse the order of the array in a struct of type <ref refid="structUInt" kindref="compound">UInt</ref>.</para>
<para>/param vec A vector struct container of type <ref refid="structUInt" kindref="compound">UInt</ref></para>
<para><programlisting><codeline><highlight class="normal">UInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uint_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">uint<sp/>a[4]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_uint_vector(vec,<sp/>a,<sp/>4,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">reverse_uint_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uint_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2740" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2110" bodyend="2124" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2740" declcolumn="6"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a0d89b67e906a169f63e1bfc679df018f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reverse_long_vector</definition>
        <argsstring>(LInt *vec)</argsstring>
        <name>reverse_long_vector</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will reverse the order of the array in a struct of type <ref refid="structLInt" kindref="compound">LInt</ref>.</para>
<para>/param vec A vector struct container of type <ref refid="structLInt" kindref="compound">LInt</ref></para>
<para><programlisting><codeline><highlight class="normal">LInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_long_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>int<sp/>a[4]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_long_vector(vec,<sp/>a,<sp/>4,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">reverse_long_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_long_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2760" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2127" bodyend="2139" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2760" declcolumn="6"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a6196a5bfffe22d6493b2bda77a9340fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reverse_ulong_vector</definition>
        <argsstring>(ULInt *vec)</argsstring>
        <name>reverse_ulong_vector</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will reverse the order of the array in a struct of type <ref refid="structULInt" kindref="compound">ULInt</ref>.</para>
<para>/param vec A vector struct container of type <ref refid="structULInt" kindref="compound">ULInt</ref></para>
<para><programlisting><codeline><highlight class="normal">ULInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ulong_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>int<sp/>a[4]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_ulong_vector(vec,<sp/>a,<sp/>4,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">reverse_ulong_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ulong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2780" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2142" bodyend="2154" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2780" declcolumn="6"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a3247bcffd4ad7a9f75c9a2e88ff7bd81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reverse_llong_vector</definition>
        <argsstring>(LLInt *vec)</argsstring>
        <name>reverse_llong_vector</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will reverse the order of the array in a struct of type <ref refid="structLLInt" kindref="compound">LLInt</ref>.</para>
<para>/param vec A vector struct container of type <ref refid="structLLInt" kindref="compound">LLInt</ref></para>
<para><programlisting><codeline><highlight class="normal">LLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_llong_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>long<sp/>int<sp/>a[4]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_llong_vector(vec,<sp/>a,<sp/>4,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">reverse_llong_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_llong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2800" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2157" bodyend="2169" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2800" declcolumn="6"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1aa77d55a8f5e4ab149edb6c75d98a94ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reverse_ullong_vector</definition>
        <argsstring>(ULLInt *vec)</argsstring>
        <name>reverse_ullong_vector</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will reverse the order of the array in a struct of type <ref refid="structULLInt" kindref="compound">ULLInt</ref>.</para>
<para>/param vec A vector struct container of type <ref refid="structULLInt" kindref="compound">ULLInt</ref></para>
<para><programlisting><codeline><highlight class="normal">LLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_llong_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>long<sp/>int<sp/>a[4]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_llong_vector(vec,<sp/>a,<sp/>4,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">reverse_llong_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ullong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2820" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2172" bodyend="2184" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2820" declcolumn="6"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a086bbd995dc83d50532944330a44c450" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reverse_float_vector</definition>
        <argsstring>(Flt *vec)</argsstring>
        <name>reverse_float_vector</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will reverse the order of the array in a struct of type <ref refid="structFlt" kindref="compound">Flt</ref>.</para>
<para>/param vec A vector struct container of type <ref refid="structFlt" kindref="compound">Flt</ref></para>
<para><programlisting><codeline><highlight class="normal">Flt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_float_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>a[4]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_float_vector(vec,<sp/>a,<sp/>4,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">reverse_float_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_float_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2840" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2187" bodyend="2199" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2840" declcolumn="6"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a628e48950294512d38556f8b194284d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reverse_double_vector</definition>
        <argsstring>(Dble *vec)</argsstring>
        <name>reverse_double_vector</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will reverse the order of the array in a struct of type <ref refid="structDble" kindref="compound">Dble</ref>.</para>
<para>/param vec A vector struct container of type <ref refid="structDble" kindref="compound">Dble</ref></para>
<para><programlisting><codeline><highlight class="normal">Dble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_double_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>a[4]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_double_vector(vec,<sp/>a,<sp/>4,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">reverse_double_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_double_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2860" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2202" bodyend="2214" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2860" declcolumn="6"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a8a72b2219830bacf2a5ec926241ed924" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reverse_ldouble_vector</definition>
        <argsstring>(LDble *vec)</argsstring>
        <name>reverse_ldouble_vector</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will reverse the order of the array in a struct of type <ref refid="structLDble" kindref="compound">LDble</ref>.</para>
<para>/param vec A vector struct container of type <ref refid="structLDble" kindref="compound">LDble</ref></para>
<para><programlisting><codeline><highlight class="normal">LDble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ldouble_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>a[4]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_ldouble_vector(vec,<sp/>a,<sp/>4,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">reverse_ldouble_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ldouble_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2880" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2217" bodyend="2229" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2880" declcolumn="6"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a06faa32f223a79c02cb771b19cc02a07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reverse_char_vector</definition>
        <argsstring>(Char *vec)</argsstring>
        <name>reverse_char_vector</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will reverse the order of the array in a struct of type <ref refid="structChar" kindref="compound">Char</ref>.</para>
<para>/param vec A vector struct container of type <ref refid="structChar" kindref="compound">Char</ref></para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_char_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">char<sp/>a[4]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_char_vector(&amp;vec,<sp/>a,<sp/>4,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">reverse_char_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2900" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2232" bodyend="2244" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2900" declcolumn="6"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a42deacd361fac959a84262a54ebddcb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reverse_uchar_vector</definition>
        <argsstring>(UChar *vec)</argsstring>
        <name>reverse_uchar_vector</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will reverse the order of the array in a struct of type <ref refid="structUChar" kindref="compound">UChar</ref>.</para>
<para>/param vec A vector struct container of type <ref refid="structChar" kindref="compound">Char</ref></para>
<para><programlisting><codeline><highlight class="normal">UChar<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uchar_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>char<sp/>a[4]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_uchar_vector(&amp;vec,<sp/>a,<sp/>4,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">reverse_uchar_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uchar_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2920" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2247" bodyend="2259" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2920" declcolumn="6"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a9b58a773830487b8a8f1973221e93366" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reverse_bool_vector</definition>
        <argsstring>(Bool *vec)</argsstring>
        <name>reverse_bool_vector</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will reverse the order of the array in a struct of type <ref refid="structBool" kindref="compound">Bool</ref>.</para>
<para>/param vec A vector struct container of type <ref refid="structBool" kindref="compound">Bool</ref></para>
<para><programlisting><codeline><highlight class="normal">Bool<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_bool_vector(vec,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>a[4]<sp/>=<sp/>{true,<sp/>true,<sp/>false,<sp/>false};</highlight></codeline>
<codeline><highlight class="normal">insert_bool_vector(&amp;vec,<sp/>a,<sp/>4,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">reverse_bool_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_bool_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2940" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2262" bodyend="2274" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2940" declcolumn="6"/>
        <references refid="structBool_1a5445f6ef94d239208dc797c289fded75" compoundref="vector_8h" startline="90">Bool::active_length</references>
        <references refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" compoundref="vector_8h" startline="90">Bool::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a6297710c0ac2122db93e47a260e96ad8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reverse_string_vector</definition>
        <argsstring>(String *vec)</argsstring>
        <name>reverse_string_vector</name>
        <param>
          <type><ref refid="structString" kindref="compound">String</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will reverse the order of the array in a struct of type <ref refid="structString" kindref="compound">String</ref>.</para>
<para>/param vec A vector struct container of type <ref refid="structString" kindref="compound">String</ref></para>
<para><programlisting><codeline><highlight class="normal">String<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_string_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">push_string_vec(&amp;vec,<sp/>&quot;One&quot;,<sp/>vec.active_length)</highlight></codeline>
<codeline><highlight class="normal">push_string_vec(&amp;vec,<sp/>&quot;Two&quot;,<sp/>vec.active_length)</highlight></codeline>
<codeline><highlight class="normal">push_string_vec(&amp;vec,<sp/>&quot;Three&quot;,<sp/>vec.active_length)</highlight></codeline>
<codeline><highlight class="normal">push_string_vec(&amp;vec,<sp/>&quot;Four&quot;,<sp/>vec.active_length)</highlight></codeline>
<codeline><highlight class="normal">reverse_string_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>Four,<sp/>Three,<sp/>Two,<sp/>One<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_string_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2962" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2277" bodyend="2288" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2962" declcolumn="6"/>
        <references refid="structString_1a706ffaf2f520d46074dd99e7896d6673" compoundref="vector_8h" startline="97">String::active_length</references>
        <references refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" compoundref="vector_8h" startline="96">String::array</references>
        <references refid="vector_8c_1a4db2688e1c0d0d477c8a7168d811956d" compoundref="vector_8c" startline="1547" endline="1567">pop_string_vector_index</references>
        <references refid="vector_8c_1a078616c26d55c1ddb2ec4c551298a4f8" compoundref="vector_8c" startline="811" endline="829">push_string_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a04f50afe6c127edeea202b08ad65f36a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sort_short_vector</definition>
        <argsstring>(Short *vec, size_t low, size_t high, sort_order order)</argsstring>
        <name>sort_short_vector</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will sort a vector data structure of type <ref refid="structShort" kindref="compound">Short</ref> in forward or reverse order</para>
<para>/param vec A vector data structure of type <ref refid="structShort" kindref="compound">Short</ref> /param low The lowest indice for partitioning, recommended to be 0 /param high The highest indice for sorting, recommended to be the last index in the data structure /param order FORWARD for a forward sort, REVERSE for a reverse sort</para>
<para><programlisting><codeline><highlight class="normal">Short<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_short_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">short<sp/>int<sp/>a[5]<sp/>=<sp/>{4,<sp/>2,<sp/>1,<sp/>3,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_short_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">sort_short_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>FORWARD);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5<sp/>]</highlight></codeline>
<codeline><highlight class="normal">sort_short_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>REVERSE);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>5,<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_short_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="2991" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2323" bodyend="2330" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="2991" declcolumn="6"/>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
        <references refid="vector_8c_1a733f65fe54a66141bb719d0e949f61d3" compoundref="vector_8c" startline="2293" endline="2321">partition_short_vec</references>
        <references refid="vector_8c_1a04f50afe6c127edeea202b08ad65f36a" compoundref="vector_8c" startline="2323" endline="2330">sort_short_vector</references>
        <referencedby refid="vector_8c_1a04f50afe6c127edeea202b08ad65f36a" compoundref="vector_8c" startline="2323" endline="2330">sort_short_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a68df688dc04c74d9e826b629ef0f98c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sort_ushort_vector</definition>
        <argsstring>(UShort *vec, size_t low, size_t high, sort_order order)</argsstring>
        <name>sort_ushort_vector</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will sort a vector data structure of type <ref refid="structUShort" kindref="compound">UShort</ref> in forward or reverse order</para>
<para>/param vec A vector data structure of type <ref refid="structUShort" kindref="compound">UShort</ref> /param low The lowest indice for partitioning, recommended to be 0 /param high The highest indice for sorting, recommended to be the last index in the data structure /param order FORWARD for a forward sort, REVERSE for a reverse sort</para>
<para><programlisting><codeline><highlight class="normal">UShort<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ushort_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>short<sp/>int<sp/>a[5]<sp/>=<sp/>{4,<sp/>2,<sp/>1,<sp/>3,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ushort_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">sort_ushort_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>FORWARD);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5<sp/>]</highlight></codeline>
<codeline><highlight class="normal">sort_ushort_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>REVERSE);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>5,<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ushort_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3018" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2363" bodyend="2370" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3018" declcolumn="6"/>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
        <references refid="vector_8c_1ac3a8bea84161a65f8360d4eeb093cbd3" compoundref="vector_8c" startline="2333" endline="2361">partition_ushort_vec</references>
        <references refid="vector_8c_1a68df688dc04c74d9e826b629ef0f98c3" compoundref="vector_8c" startline="2363" endline="2370">sort_ushort_vector</references>
        <referencedby refid="vector_8c_1a68df688dc04c74d9e826b629ef0f98c3" compoundref="vector_8c" startline="2363" endline="2370">sort_ushort_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a722d90a04d08a5ece84ba7a2b8d04d6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sort_int_vector</definition>
        <argsstring>(Int *vec, size_t low, size_t high, sort_order order)</argsstring>
        <name>sort_int_vector</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will sort a vector data structure of type <ref refid="structInt" kindref="compound">Int</ref> in forward or reverse order</para>
<para>/param vec A vector data structure of type <ref refid="structInt" kindref="compound">Int</ref> /param low The lowest indice for partitioning, recommended to be 0 /param high The highest indice for sorting, recommended to be the last index in the data structure /param order FORWARD for a forward sort, REVERSE for a reverse sort</para>
<para><programlisting><codeline><highlight class="normal">Int<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_int_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>a[5]<sp/>=<sp/>{4,<sp/>2,<sp/>1,<sp/>3,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_int_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">sort_int_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>FORWARD);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5<sp/>]</highlight></codeline>
<codeline><highlight class="normal">sort_int_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>REVERSE);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>5,<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_int_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3045" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2403" bodyend="2410" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3045" declcolumn="6"/>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
        <references refid="vector_8c_1a9291e007042fe27de97889aae04af104" compoundref="vector_8c" startline="2373" endline="2401">partition_int_vec</references>
        <references refid="vector_8c_1a722d90a04d08a5ece84ba7a2b8d04d6d" compoundref="vector_8c" startline="2403" endline="2410">sort_int_vector</references>
        <referencedby refid="vector_8c_1a722d90a04d08a5ece84ba7a2b8d04d6d" compoundref="vector_8c" startline="2403" endline="2410">sort_int_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a451f6cb1a5b4b2e77c1170c85656c3c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sort_uint_vector</definition>
        <argsstring>(UInt *vec, size_t low, size_t high, sort_order order)</argsstring>
        <name>sort_uint_vector</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will sort a vector data structure of type <ref refid="structUInt" kindref="compound">UInt</ref> in forward or reverse order</para>
<para>/param vec A vector data structure of type <ref refid="structUInt" kindref="compound">UInt</ref> /param low The lowest indice for partitioning, recommended to be 0 /param high The highest indice for sorting, recommended to be the last index in the data structure /param order FORWARD for a forward sort, REVERSE for a reverse sort</para>
<para><programlisting><codeline><highlight class="normal">UInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uint_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>int<sp/>a[5]<sp/>=<sp/>{4,<sp/>2,<sp/>1,<sp/>3,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_uint_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">sort_uint_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>FORWARD);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5<sp/>]</highlight></codeline>
<codeline><highlight class="normal">sort_uint_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>REVERSE);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>5,<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uint_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3072" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2443" bodyend="2450" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3072" declcolumn="6"/>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
        <references refid="vector_8c_1af66367b43aad62db18cd1e46cc4b7cec" compoundref="vector_8c" startline="2413" endline="2441">partition_uint_vec</references>
        <references refid="vector_8c_1a451f6cb1a5b4b2e77c1170c85656c3c6" compoundref="vector_8c" startline="2443" endline="2450">sort_uint_vector</references>
        <referencedby refid="vector_8c_1a451f6cb1a5b4b2e77c1170c85656c3c6" compoundref="vector_8c" startline="2443" endline="2450">sort_uint_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a573e6f77db28f1a05eefd8a982f850c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sort_long_vector</definition>
        <argsstring>(LInt *vec, size_t low, size_t high, sort_order order)</argsstring>
        <name>sort_long_vector</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will sort a vector data structure of type <ref refid="structLInt" kindref="compound">LInt</ref> in forward or reverse order</para>
<para>/param vec A vector data structure of type <ref refid="structLInt" kindref="compound">LInt</ref> /param low The lowest indice for partitioning, recommended to be 0 /param high The highest indice for sorting, recommended to be the last index in the data structure /param order FORWARD for a forward sort, REVERSE for a reverse sort</para>
<para><programlisting><codeline><highlight class="normal">LInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_long_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>int<sp/>a[5]<sp/>=<sp/>{4,<sp/>2,<sp/>1,<sp/>3,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_long_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">sort_long_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>FORWARD);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5<sp/>]</highlight></codeline>
<codeline><highlight class="normal">sort_long_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>REVERSE);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>5,<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_long_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3099" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2483" bodyend="2490" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3099" declcolumn="6"/>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
        <references refid="vector_8c_1a71e22c969cc1802f99227e9bcf1d700c" compoundref="vector_8c" startline="2453" endline="2481">partition_long_vec</references>
        <references refid="vector_8c_1a573e6f77db28f1a05eefd8a982f850c7" compoundref="vector_8c" startline="2483" endline="2490">sort_long_vector</references>
        <referencedby refid="vector_8c_1a573e6f77db28f1a05eefd8a982f850c7" compoundref="vector_8c" startline="2483" endline="2490">sort_long_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1adf53d931d4b9c3ab9d62298b6d3df5cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sort_ulong_vector</definition>
        <argsstring>(ULInt *vec, size_t low, size_t high, sort_order order)</argsstring>
        <name>sort_ulong_vector</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will sort a vector data structure of type <ref refid="structULInt" kindref="compound">ULInt</ref> in forward or reverse order</para>
<para>/param vec A vector data structure of type <ref refid="structULInt" kindref="compound">ULInt</ref> /param low The lowest indice for partitioning, recommended to be 0 /param high The highest indice for sorting, recommended to be the last index in the data structure /param order FORWARD for a forward sort, REVERSE for a reverse sort</para>
<para><programlisting><codeline><highlight class="normal">ULInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ulong_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{4,<sp/>2,<sp/>1,<sp/>3,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ulong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">sort_ulong_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>FORWARD);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5<sp/>]</highlight></codeline>
<codeline><highlight class="normal">sort_ulong_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>REVERSE);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>5,<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ulong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3126" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2523" bodyend="2530" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3126" declcolumn="6"/>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
        <references refid="vector_8c_1a2c22f32a95c9b5810e941f4f646cc3a6" compoundref="vector_8c" startline="2493" endline="2521">partition_ulong_vec</references>
        <references refid="vector_8c_1adf53d931d4b9c3ab9d62298b6d3df5cd" compoundref="vector_8c" startline="2523" endline="2530">sort_ulong_vector</references>
        <referencedby refid="vector_8c_1adf53d931d4b9c3ab9d62298b6d3df5cd" compoundref="vector_8c" startline="2523" endline="2530">sort_ulong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ab1183f9c1a6c8a6d60b4457421e3072a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sort_llong_vector</definition>
        <argsstring>(LLInt *vec, size_t low, size_t high, sort_order order)</argsstring>
        <name>sort_llong_vector</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will sort a vector data structure of type <ref refid="structLLInt" kindref="compound">LLInt</ref> in forward or reverse order</para>
<para>/param vec A vector data structure of type <ref refid="structLLInt" kindref="compound">LLInt</ref> /param low The lowest indice for partitioning, recommended to be 0 /param high The highest indice for sorting, recommended to be the last index in the data structure /param order FORWARD for a forward sort, REVERSE for a reverse sort</para>
<para><programlisting><codeline><highlight class="normal">LLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_llong_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{4,<sp/>2,<sp/>1,<sp/>3,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_llong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">sort_llong_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>FORWARD);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5<sp/>]</highlight></codeline>
<codeline><highlight class="normal">sort_llong_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>REVERSE);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>5,<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_llong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3153" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2563" bodyend="2570" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3153" declcolumn="6"/>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
        <references refid="vector_8c_1a4004e007143a87427417e8da73d54230" compoundref="vector_8c" startline="2533" endline="2561">partition_llong_vec</references>
        <references refid="vector_8c_1ab1183f9c1a6c8a6d60b4457421e3072a" compoundref="vector_8c" startline="2563" endline="2570">sort_llong_vector</references>
        <referencedby refid="vector_8c_1ab1183f9c1a6c8a6d60b4457421e3072a" compoundref="vector_8c" startline="2563" endline="2570">sort_llong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a3d45fbf7b754bf4bad8be3cbb6241a84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sort_ullong_vector</definition>
        <argsstring>(ULLInt *vec, size_t low, size_t high, sort_order order)</argsstring>
        <name>sort_ullong_vector</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will sort a vector data structure of type <ref refid="structULLInt" kindref="compound">ULLInt</ref> in forward or reverse order</para>
<para>/param vec A vector data structure of type <ref refid="structULLInt" kindref="compound">ULLInt</ref> /param low The lowest indice for partitioning, recommended to be 0 /param high The highest indice for sorting, recommended to be the last index in the data structure /param order FORWARD for a forward sort, REVERSE for a reverse sort</para>
<para><programlisting><codeline><highlight class="normal">ULLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ullong_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{4,<sp/>2,<sp/>1,<sp/>3,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ullong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">sort_ullong_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>FORWARD);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5<sp/>]</highlight></codeline>
<codeline><highlight class="normal">sort_ullong_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>REVERSE);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>5,<sp/>4,<sp/>3,<sp/>2,<sp/>1<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ullong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3180" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2603" bodyend="2610" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3180" declcolumn="6"/>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
        <references refid="vector_8c_1ae3896d0e36902ed7dbe6ff6be0ad0bdb" compoundref="vector_8c" startline="2573" endline="2601">partition_ullong_vec</references>
        <references refid="vector_8c_1a3d45fbf7b754bf4bad8be3cbb6241a84" compoundref="vector_8c" startline="2603" endline="2610">sort_ullong_vector</references>
        <referencedby refid="vector_8c_1a3d45fbf7b754bf4bad8be3cbb6241a84" compoundref="vector_8c" startline="2603" endline="2610">sort_ullong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1aa3e927c35eb4eb79cb87d6df026e01a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sort_float_vector</definition>
        <argsstring>(Flt *vec, size_t low, size_t high, sort_order order)</argsstring>
        <name>sort_float_vector</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will sort a vector data structure of type <ref refid="structFlt" kindref="compound">Flt</ref> in forward or reverse order</para>
<para>/param vec A vector data structure of type <ref refid="structFlt" kindref="compound">Flt</ref> /param low The lowest indice for partitioning, recommended to be 0 /param high The highest indice for sorting, recommended to be the last index in the data structure /param order FORWARD for a forward sort, REVERSE for a reverse sort</para>
<para><programlisting><codeline><highlight class="normal">Flt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_float_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>a[5]<sp/>=<sp/>{4.,<sp/>2.,<sp/>1.,<sp/>3.,<sp/>5.};</highlight></codeline>
<codeline><highlight class="normal">insert_float_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">sort_float_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>FORWARD);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1.,<sp/>2.,<sp/>3.,<sp/>4.,<sp/>5.<sp/>]</highlight></codeline>
<codeline><highlight class="normal">sort_float_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>REVERSE);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>5.,<sp/>4.,<sp/>3.,<sp/>2.,<sp/>1.<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_float_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3207" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2643" bodyend="2650" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3207" declcolumn="6"/>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
        <references refid="vector_8c_1ab0096154a48a231a8822d6fc801374f2" compoundref="vector_8c" startline="2613" endline="2641">partition_float_vec</references>
        <references refid="vector_8c_1aa3e927c35eb4eb79cb87d6df026e01a1" compoundref="vector_8c" startline="2643" endline="2650">sort_float_vector</references>
        <referencedby refid="vector_8c_1aa3e927c35eb4eb79cb87d6df026e01a1" compoundref="vector_8c" startline="2643" endline="2650">sort_float_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1aa461bbfa3be53bc5dc4c56c94fb7fa62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sort_double_vector</definition>
        <argsstring>(Dble *vec, size_t low, size_t high, sort_order order)</argsstring>
        <name>sort_double_vector</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will sort a vector data structure of type <ref refid="structDble" kindref="compound">Dble</ref> in forward or reverse order</para>
<para>/param vec A vector data structure of type <ref refid="structDble" kindref="compound">Dble</ref> /param low The lowest indice for partitioning, recommended to be 0 /param high The highest indice for sorting, recommended to be the last index in the data structure /param order FORWARD for a forward sort, REVERSE for a reverse sort</para>
<para><programlisting><codeline><highlight class="normal">Dble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_double_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>a[5]<sp/>=<sp/>{4.,<sp/>2.,<sp/>1.,<sp/>3.,<sp/>5.};</highlight></codeline>
<codeline><highlight class="normal">insert_double_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">sort_double_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>FORWARD);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1.,<sp/>2.,<sp/>3.,<sp/>4.,<sp/>5.<sp/>]</highlight></codeline>
<codeline><highlight class="normal">sort_double_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>REVERSE);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>5.,<sp/>4.,<sp/>3.,<sp/>2.,<sp/>1.<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_double_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3234" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2683" bodyend="2690" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3234" declcolumn="6"/>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
        <references refid="vector_8c_1a4e98e06a0ba8a79c81fece259b4bba7a" compoundref="vector_8c" startline="2653" endline="2681">partition_double_vec</references>
        <references refid="vector_8c_1aa461bbfa3be53bc5dc4c56c94fb7fa62" compoundref="vector_8c" startline="2683" endline="2690">sort_double_vector</references>
        <referencedby refid="vector_8c_1aa461bbfa3be53bc5dc4c56c94fb7fa62" compoundref="vector_8c" startline="2683" endline="2690">sort_double_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a3745eaf35ed1dfbae01e83d5b93e185d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sort_ldouble_vector</definition>
        <argsstring>(LDble *vec, size_t low, size_t high, sort_order order)</argsstring>
        <name>sort_ldouble_vector</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will sort a vector data structure of type <ref refid="structLDble" kindref="compound">LDble</ref> in forward or reverse order</para>
<para>/param vec A vector data structure of type <ref refid="structLDble" kindref="compound">LDble</ref> /param low The lowest indice for partitioning, recommended to be 0 /param high The highest indice for sorting, recommended to be the last index in the data structure /param order FORWARD for a forward sort, REVERSE for a reverse sort</para>
<para><programlisting><codeline><highlight class="normal">LDble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ldouble_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>a[5]<sp/>=<sp/>{4.,<sp/>2.,<sp/>1.,<sp/>3.,<sp/>5.};</highlight></codeline>
<codeline><highlight class="normal">insert_ldouble_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">sort_ldouble_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>FORWARD);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1.,<sp/>2.,<sp/>3.,<sp/>4.,<sp/>5.<sp/>]</highlight></codeline>
<codeline><highlight class="normal">sort_ldouble_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>REVERSE);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>5.,<sp/>4.,<sp/>3.,<sp/>2.,<sp/>1.<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ldouble_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3261" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2723" bodyend="2730" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3261" declcolumn="6"/>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
        <references refid="vector_8c_1a849b2e9bd838ba45444b89a094e09c93" compoundref="vector_8c" startline="2693" endline="2721">partition_ldouble_vec</references>
        <references refid="vector_8c_1a3745eaf35ed1dfbae01e83d5b93e185d" compoundref="vector_8c" startline="2723" endline="2730">sort_ldouble_vector</references>
        <referencedby refid="vector_8c_1a3745eaf35ed1dfbae01e83d5b93e185d" compoundref="vector_8c" startline="2723" endline="2730">sort_ldouble_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a0c29cab75728310a3b5b78681af2df21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sort_char_vector</definition>
        <argsstring>(Char *vec, size_t low, size_t high, sort_order order)</argsstring>
        <name>sort_char_vector</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will sort a vector data structure of type <ref refid="structChar" kindref="compound">Char</ref> in forward or reverse order</para>
<para>/param vec A vector data structure of type <ref refid="structChar" kindref="compound">Char</ref> /param low The lowest indice for partitioning, recommended to be 0 /param high The highest indice for sorting, recommended to be the last index in the data structure /param order FORWARD for a forward sort, REVERSE for a reverse sort</para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_char_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">char<sp/>a[5]<sp/>=<sp/>{&apos;e&apos;,<sp/>&apos;b&apos;,<sp/>&apos;a&apos;,<sp/>&apos;c&apos;,<sp/>&apos;e&apos;};</highlight></codeline>
<codeline><highlight class="normal">insert_char_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">sort_char_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>FORWARD);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>a,<sp/>b,<sp/>c,<sp/>d,<sp/>e<sp/>]</highlight></codeline>
<codeline><highlight class="normal">sort_ldouble_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>REVERSE);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>e,<sp/>d,<sp/>c,<sp/>b,<sp/>a<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">FREE(vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3289" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2763" bodyend="2770" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3289" declcolumn="6"/>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
        <references refid="vector_8c_1a57c275128b0df646fc41ada5fd04777c" compoundref="vector_8c" startline="2733" endline="2761">partition_char_vec</references>
        <references refid="vector_8c_1a0c29cab75728310a3b5b78681af2df21" compoundref="vector_8c" startline="2763" endline="2770">sort_char_vector</references>
        <referencedby refid="vector_8c_1a0c29cab75728310a3b5b78681af2df21" compoundref="vector_8c" startline="2763" endline="2770">sort_char_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a88af2cb1285800957b1de71e783ee93a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sort_uchar_vector</definition>
        <argsstring>(UChar *vec, size_t low, size_t high, sort_order order)</argsstring>
        <name>sort_uchar_vector</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will sort a vector data structure of type <ref refid="structUChar" kindref="compound">UChar</ref> in forward or reverse order</para>
<para>/param vec A vector data structure of type <ref refid="structUChar" kindref="compound">UChar</ref> /param low The lowest indice for partitioning, recommended to be 0 /param high The highest indice for sorting, recommended to be the last index in the data structure /param order FORWARD for a forward sort, REVERSE for a reverse sort</para>
<para><programlisting><codeline><highlight class="normal">UChar<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uchar_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>char<sp/>a[5]<sp/>=<sp/>{&apos;e&apos;,<sp/>&apos;b&apos;,<sp/>&apos;a&apos;,<sp/>&apos;c&apos;,<sp/>&apos;e&apos;};</highlight></codeline>
<codeline><highlight class="normal">insert_uchar_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">sort_uchar_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>FORWARD);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>a,<sp/>b,<sp/>c,<sp/>d,<sp/>e<sp/>]</highlight></codeline>
<codeline><highlight class="normal">sort_uchar_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>REVERSE);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>e,<sp/>d,<sp/>c,<sp/>b,<sp/>a<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uchar_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">FREE(vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3317" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2843" bodyend="2850" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3317" declcolumn="6"/>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
        <references refid="vector_8c_1ae854e33b1f9bfc9230078cdd22f90179" compoundref="vector_8c" startline="2813" endline="2841">partition_uchar_vec</references>
        <references refid="vector_8c_1a88af2cb1285800957b1de71e783ee93a" compoundref="vector_8c" startline="2843" endline="2850">sort_uchar_vector</references>
        <referencedby refid="vector_8c_1a88af2cb1285800957b1de71e783ee93a" compoundref="vector_8c" startline="2843" endline="2850">sort_uchar_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a68744cde4b7c17a0305d9cf512494a20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sort_bool_vector</definition>
        <argsstring>(Bool *vec, size_t low, size_t high, sort_order order)</argsstring>
        <name>sort_bool_vector</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will sort a vector data structure of type <ref refid="structBool" kindref="compound">Bool</ref> in forward or reverse order</para>
<para>/param vec A vector data structure of type <ref refid="structBool" kindref="compound">Bool</ref> /param low The lowest indice for partitioning, recommended to be 0 /param high The highest indice for sorting, recommended to be the last index in the data structure /param order FORWARD for a forward sort, REVERSE for a reverse sort</para>
<para><programlisting><codeline><highlight class="normal">Bool<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_bool_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>a[5]<sp/>=<sp/>{true,<sp/>false,<sp/>true,<sp/>false,<sp/>true};</highlight></codeline>
<codeline><highlight class="normal">insert_bool_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">sort_bool_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>FORWARD);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>true,<sp/>true,<sp/>true,<sp/>false,<sp/>false<sp/>]</highlight></codeline>
<codeline><highlight class="normal">sort_bool_vector(&amp;vec,<sp/>0,<sp/>5,<sp/>REVERSE);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>false,<sp/>false,<sp/>true,<sp/>true,<sp/>true<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_bool_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">FREE(vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3345" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2803" bodyend="2810" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3345" declcolumn="6"/>
        <references refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" compoundref="vector_8h" startline="90">Bool::array</references>
        <references refid="vector_8c_1aa8bc922ebe7bc36d428a6578886c3e37" compoundref="vector_8c" startline="2773" endline="2801">partition_bool_vec</references>
        <references refid="vector_8c_1a68744cde4b7c17a0305d9cf512494a20" compoundref="vector_8c" startline="2803" endline="2810">sort_bool_vector</references>
        <referencedby refid="vector_8c_1a68744cde4b7c17a0305d9cf512494a20" compoundref="vector_8c" startline="2803" endline="2810">sort_bool_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1aead9f94df495db661d185ef0363ec1d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sort_string_vector</definition>
        <argsstring>(String *vec, size_t low, size_t high, sort_order order)</argsstring>
        <name>sort_string_vector</name>
        <param>
          <type><ref refid="structString" kindref="compound">String</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will sort a vector structure of type <ref refid="structString" kindref="compound">String</ref> in forward or reverse order</para>
<para>/param vec A vector data structure of type <ref refid="structString" kindref="compound">String</ref> /param low the lowest indice for parittioning, recommended to be 0 /param high The highest indice for sorting, recommended to be the last index /param order FORWARD for a forward sort, REVERSE for a reverse sort</para>
<para><programlisting><codeline><highlight class="normal">String<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_string_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(&amp;vec,<sp/>&quot;Xylaphone&quot;,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(&amp;vec,<sp/>&quot;Apple&quot;,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(&amp;vec,<sp/>&quot;Cucumber&quot;,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(&amp;vec,<sp/>&quot;Banana&quot;,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">sort_string_vector(&amp;vec,<sp/>0,<sp/>vec.active_length,<sp/>FORWARD);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>Apple,<sp/>Banana,<sp/>Cucumber,<sp/>Xylaphone<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_string_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3370" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2867" bodyend="2872" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3370" declcolumn="6"/>
        <references refid="structString_1a706ffaf2f520d46074dd99e7896d6673" compoundref="vector_8h" startline="97">String::active_length</references>
        <references refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" compoundref="vector_8h" startline="96">String::array</references>
        <references refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" compoundref="vector_8h" startline="49">FORWARD</references>
        <references refid="vector_8c_1a18f583c57c4938edf4ea7374eddf069e" compoundref="vector_8c" startline="2853" endline="2858">forward_comparator</references>
        <references refid="vector_8c_1aff059eec91dab02d46903ebe9591e061" compoundref="vector_8c" startline="2860" endline="2865">reverse_comparator</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a0684e2f1aee143f1769dd8ff908c852c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char sum_char_vector</definition>
        <argsstring>(Char *vec)</argsstring>
        <name>sum_char_vector</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will calculate the sum of the values in a vector data structure of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para>/param vec A vector data structure of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_short_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">char<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_char_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">char<sp/>sum_value<sp/>=<sp/>sum_char_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>15</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3392" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2877" bodyend="2883" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3392" declcolumn="6"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
        <referencedby refid="vector_8c_1a0a47e22454ec90b6c959915dbc3c87a6" compoundref="vector_8c" startline="3154" endline="3158">average_char_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a643cb8d97c368f436a0010dacfca2401" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char</type>
        <definition>unsigned char sum_uchar_vector</definition>
        <argsstring>(UChar *vec)</argsstring>
        <name>sum_uchar_vector</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will calculate the sum of the values in a vector data structure of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para>/param vec A vector data structure of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para><programlisting><codeline><highlight class="normal">UChar<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uchar_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsgined<sp/>char<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_uchar_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>char<sp/>sum_value<sp/>=<sp/>sum_uchar_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>15</highlight></codeline>
<codeline><highlight class="normal">free_uchar_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3412" column="15" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2886" bodyend="2892" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3412" declcolumn="15"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
        <referencedby refid="vector_8c_1ad821bfcf3659a78a11a5c9c7fd72a277" compoundref="vector_8c" startline="3161" endline="3165">average_uchar_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a54d410de6d79f482b3d560bcb78fd2ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>short int</type>
        <definition>short int sum_short_vector</definition>
        <argsstring>(Short *vec)</argsstring>
        <name>sum_short_vector</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will calculate the sum of the values in a vector data structure of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para>/param vec A vector data structure of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para><programlisting><codeline><highlight class="normal">Short<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_short_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">short<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_short_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">short<sp/>int<sp/>sum_value<sp/>=<sp/>sum_short_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>15</highlight></codeline>
<codeline><highlight class="normal">free_short_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3431" column="11" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2895" bodyend="2901" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3431" declcolumn="11"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
        <referencedby refid="vector_8c_1a5a553d82722c04ec4b613014fa1d0688" compoundref="vector_8c" startline="3167" endline="3171">average_short_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a67f48de636722d00447f21d5040f8d81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned short int</type>
        <definition>unsigned short int sum_ushort_vector</definition>
        <argsstring>(UShort *vec)</argsstring>
        <name>sum_ushort_vector</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will calculate the sum of the values in a vector data structure of type <ref refid="structUShort" kindref="compound">UShort</ref></para>
<para>/param vec A vector data structure of type <ref refid="structUShort" kindref="compound">UShort</ref></para>
<para><programlisting><codeline><highlight class="normal">UShort<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ushort_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>short<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ushort_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>short<sp/>int<sp/>sum_value<sp/>=<sp/>sum_ushort_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>15</highlight></codeline>
<codeline><highlight class="normal">free_ushort_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3451" column="20" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2904" bodyend="2910" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3451" declcolumn="20"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
        <referencedby refid="vector_8c_1a96018578b7bce5eb04f4b4dbbd63b582" compoundref="vector_8c" startline="3174" endline="3178">average_ushort_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1aaf01dd9c2caec4100d4315bd8d525a30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sum_int_vector</definition>
        <argsstring>(Int *vec)</argsstring>
        <name>sum_int_vector</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will calculate the sum of the values in a vector data structure of type <ref refid="structInt" kindref="compound">Int</ref></para>
<para>/param vec A vector data structure of type <ref refid="structInt" kindref="compound">Int</ref></para>
<para><programlisting><codeline><highlight class="normal">Int<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_int_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_int_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>sum_value<sp/>=<sp/>sum_int_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>15</highlight></codeline>
<codeline><highlight class="normal">free_int_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3471" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2913" bodyend="2919" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3471" declcolumn="5"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
        <referencedby refid="vector_8c_1a2e384c1e58cf1f6486ae0a8bc2e46379" compoundref="vector_8c" startline="3181" endline="3185">average_int_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a791fe9c8f9bd1d04158b01c3aa022edd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int sum_uint_vector</definition>
        <argsstring>(UInt *vec)</argsstring>
        <name>sum_uint_vector</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will calculate the sum of the values in a vector data structure of type <ref refid="structUInt" kindref="compound">UInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structUInt" kindref="compound">UInt</ref></para>
<para><programlisting><codeline><highlight class="normal">UInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uint_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_uint_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>int<sp/>sum_value<sp/>=<sp/>sum_uint_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>15</highlight></codeline>
<codeline><highlight class="normal">free_uint_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3491" column="14" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2922" bodyend="2928" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3491" declcolumn="14"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
        <referencedby refid="vector_8c_1a35959e6bd4010b04681750611d00a7b7" compoundref="vector_8c" startline="3188" endline="3192">average_uint_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1af2ca62fb5fa87cccef8750d24b3979da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int sum_long_vector</definition>
        <argsstring>(LInt *vec)</argsstring>
        <name>sum_long_vector</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will calculate the sum of the values in a vector data structure of type <ref refid="structLInt" kindref="compound">LInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structLInt" kindref="compound">LInt</ref></para>
<para><programlisting><codeline><highlight class="normal">LInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_long_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_long_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>int<sp/>sum_value<sp/>=<sp/>sum_long_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>15</highlight></codeline>
<codeline><highlight class="normal">free_long_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3511" column="10" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2931" bodyend="2937" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3511" declcolumn="10"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
        <referencedby refid="vector_8c_1ad1feee1c2712401a20fbe6699f5c4bc7" compoundref="vector_8c" startline="3195" endline="3199">average_long_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a3233da20e23c20659dd5aba81307b58d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long int</type>
        <definition>unsigned long int sum_ulong_vector</definition>
        <argsstring>(ULInt *vec)</argsstring>
        <name>sum_ulong_vector</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will calculate the sum of the values in a vector data structure of type <ref refid="structULInt" kindref="compound">ULInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structULInt" kindref="compound">ULInt</ref></para>
<para><programlisting><codeline><highlight class="normal">ULInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ulong_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ulong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>int<sp/>sum_value<sp/>=<sp/>sum_ulong_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>15</highlight></codeline>
<codeline><highlight class="normal">free_ulong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3531" column="19" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2940" bodyend="2946" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3531" declcolumn="19"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
        <referencedby refid="vector_8c_1aa94c4a725c6ab558c748baa93b652363" compoundref="vector_8c" startline="3202" endline="3206">average_ulong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a838510507e7f386e844fd1e5e3ae494a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long long int</type>
        <definition>long long int sum_llong_vector</definition>
        <argsstring>(LLInt *vec)</argsstring>
        <name>sum_llong_vector</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will calculate the sum of the values in a vector data structure of type <ref refid="structLLInt" kindref="compound">LLInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structLLInt" kindref="compound">LLInt</ref></para>
<para><programlisting><codeline><highlight class="normal">LLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_llong_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_llong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>long<sp/>int<sp/>sum_value<sp/>=<sp/>sum_llong_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>15</highlight></codeline>
<codeline><highlight class="normal">free_llong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3551" column="15" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2949" bodyend="2955" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3551" declcolumn="15"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
        <referencedby refid="vector_8c_1ae3782b50d088b4488da3a8283670ffcc" compoundref="vector_8c" startline="3209" endline="3213">average_llong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1af1cc1dfd0470ab00fc1537ebcbb5c089" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long long int</type>
        <definition>unsigned long long int sum_ullong_vector</definition>
        <argsstring>(ULLInt *vec)</argsstring>
        <name>sum_ullong_vector</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will calculate the sum of the values in a vector data structure of type <ref refid="structULLInt" kindref="compound">ULLInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structULLInt" kindref="compound">ULLInt</ref></para>
<para><programlisting><codeline><highlight class="normal">ULLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ullong_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ullong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>long<sp/>int<sp/>sum_value<sp/>=<sp/>sum_ullong_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>15</highlight></codeline>
<codeline><highlight class="normal">free_ullong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3571" column="24" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2958" bodyend="2964" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3571" declcolumn="24"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
        <referencedby refid="vector_8c_1abb879670618c44d1259b4cb689d36698" compoundref="vector_8c" startline="3216" endline="3220">average_ullong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ab9177b68251ddf43f4a245afd559e462" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float sum_float_vector</definition>
        <argsstring>(Flt *vec)</argsstring>
        <name>sum_float_vector</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will calculate the sum of the values in a vector data structure of type <ref refid="structFlt" kindref="compound">Flt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structFlt" kindref="compound">Flt</ref></para>
<para><programlisting><codeline><highlight class="normal">Flt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_float_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>a[5]<sp/>=<sp/>{1.,<sp/>2.,<sp/>3.,<sp/>4.,<sp/>5.};</highlight></codeline>
<codeline><highlight class="normal">insert_float_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>sum_value<sp/>=<sp/>sum_float_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>15</highlight></codeline>
<codeline><highlight class="normal">free_float_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3591" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2967" bodyend="2973" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3591" declcolumn="7"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
        <referencedby refid="vector_8c_1a95e8f18d7457adb1784ca850c7afa01e" compoundref="vector_8c" startline="3223" endline="3227">average_float_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a98a70f4f173d451a1ff5357f4779289d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double sum_double_vector</definition>
        <argsstring>(Dble *vec)</argsstring>
        <name>sum_double_vector</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will calculate the sum of the values in a vector data structure of type <ref refid="structDble" kindref="compound">Dble</ref></para>
<para>/param vec A vector data structure of type <ref refid="structDble" kindref="compound">Dble</ref></para>
<para><programlisting><codeline><highlight class="normal">Dble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_double_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>a[5]<sp/>=<sp/>{1.,<sp/>2.,<sp/>3.,<sp/>4.,<sp/>5.};</highlight></codeline>
<codeline><highlight class="normal">insert_double_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>sum_value<sp/>=<sp/>sum_double_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>15</highlight></codeline>
<codeline><highlight class="normal">free_double_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3611" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2976" bodyend="2982" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3611" declcolumn="8"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
        <referencedby refid="vector_8c_1ab0985989db7774a2f4ccf0f6bc7fd0ed" compoundref="vector_8c" startline="3230" endline="3234">average_double_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1af2df2f0fe19814004ab61a91521d7b21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long double</type>
        <definition>long double sum_ldouble_vector</definition>
        <argsstring>(LDble *vec)</argsstring>
        <name>sum_ldouble_vector</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will calculate the sum of the values in a vector data structure of type <ref refid="structLDble" kindref="compound">LDble</ref></para>
<para>/param vec A vector data structure of type <ref refid="structLDble" kindref="compound">LDble</ref></para>
<para><programlisting><codeline><highlight class="normal">LDble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ldouble_vector(vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>a[5]<sp/>=<sp/>{1.,<sp/>2.,<sp/>3.,<sp/>4.,<sp/>5.};</highlight></codeline>
<codeline><highlight class="normal">insert_ldouble_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>sum_value<sp/>=<sp/>sum_ldouble_vector(vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>15</highlight></codeline>
<codeline><highlight class="normal">free_ldouble_vector(&amp;vec)</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3631" column="13" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2985" bodyend="2991" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3631" declcolumn="13"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
        <referencedby refid="vector_8c_1a136fac1692146b0fc1dd1f548b6a07a4" compoundref="vector_8c" startline="3237" endline="3241">average_ldouble_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a877296aab1e625bc7b103322f6b93b14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structChar" kindref="compound">Char</ref></type>
        <definition>Char cumsum_char_vector</definition>
        <argsstring>(Char *vec)</argsstring>
        <name>cumsum_char_vector</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return an <ref refid="structChar" kindref="compound">Char</ref> vector container that holds an array containing the cumulative sum of the values in the input array</para>
<para>/param vec A vector container of type <ref refid="structChar" kindref="compound">Char</ref> /return return_vec A vector container of type <ref refid="structChar" kindref="compound">Char</ref></para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_char_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">char<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_char_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">Char<sp/>cum_vec<sp/>=<sp/>cumsum_char_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vum_vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>3,<sp/>6,<sp/>10,<sp/>15<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3654" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="2996" bodyend="3005" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3654" declcolumn="6"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
        <references refid="vector_8c_1aecde718777430d31ec254f8a4f40cce0" compoundref="vector_8c" startline="182" endline="194">init_char_vector</references>
        <references refid="vector_8c_1ab4f076e9a6e7d0795c2c3a0216c5c97e" compoundref="vector_8c" startline="712" endline="742">push_char_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a2850df1b78d17fd2e45847e8bf1e51c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structUChar" kindref="compound">UChar</ref></type>
        <definition>UChar cumsum_uchar_vector</definition>
        <argsstring>(UChar *vec)</argsstring>
        <name>cumsum_uchar_vector</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return an <ref refid="structUChar" kindref="compound">UChar</ref> vector container that holds an array containing the cumulative sum of the values in the input array</para>
<para>/param vec A vector container of type <ref refid="structUChar" kindref="compound">UChar</ref> /return return_vec A vector container of type <ref refid="structUChar" kindref="compound">UChar</ref></para>
<para><programlisting><codeline><highlight class="normal">UChar<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uchar_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>char<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_uchar_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">UChar<sp/>cum_vec<sp/>=<sp/>cumsum_uchar_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vum_vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>3,<sp/>6,<sp/>10,<sp/>15<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uchar_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3675" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3008" bodyend="3017" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3675" declcolumn="7"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
        <references refid="vector_8c_1a9289ec52674f95ebf45ac81b70dfdc67" compoundref="vector_8c" startline="197" endline="209">init_uchar_vector</references>
        <references refid="vector_8c_1acc6fd3b434ba25d3473adff60160500b" compoundref="vector_8c" startline="745" endline="775">push_uchar_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a588f2bea0a2ac3d8bf87184d873a2804" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structShort" kindref="compound">Short</ref></type>
        <definition>Short cumsum_short_vector</definition>
        <argsstring>(Short *vec)</argsstring>
        <name>cumsum_short_vector</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return an <ref refid="structShort" kindref="compound">Short</ref> vector container that holds an array containing the cumulative sum of the values in the input array</para>
<para>/param vec A vector container of type <ref refid="structShort" kindref="compound">Short</ref> /return return_vec A vector container of type <ref refid="structUShort" kindref="compound">UShort</ref></para>
<para><programlisting><codeline><highlight class="normal">Short<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_short_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">short<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_short_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">Short<sp/>cum_vec<sp/>=<sp/>cumsum_short_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vum_vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>3,<sp/>6,<sp/>10,<sp/>15<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_short_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3695" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3020" bodyend="3029" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3695" declcolumn="7"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
        <references refid="vector_8c_1a749211e8a46a8b2297b3c6ebb78aed0e" compoundref="vector_8c" startline="18" endline="30">init_short_vector</references>
        <references refid="vector_8c_1a38068c17aa5cf7286175572d43219b8d" compoundref="vector_8c" startline="349" endline="379">push_short_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a94f7fe260f499b1a18150332e1a0e427" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structUShort" kindref="compound">UShort</ref></type>
        <definition>UShort cumsum_ushort_vector</definition>
        <argsstring>(UShort *vec)</argsstring>
        <name>cumsum_ushort_vector</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return an <ref refid="structUShort" kindref="compound">UShort</ref> vector container that holds an array containing the cumulative sum of the values in the input array</para>
<para>/param vec A vector container of type <ref refid="structUShort" kindref="compound">UShort</ref> /return return_vec A vector container of type <ref refid="structUShort" kindref="compound">UShort</ref></para>
<para><programlisting><codeline><highlight class="normal">UShort<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ushort_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>short<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ushort_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">UShort<sp/>cum_vec<sp/>=<sp/>cumsum_ushort_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vum_vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>3,<sp/>6,<sp/>10,<sp/>15<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ushort_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3716" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3032" bodyend="3041" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3716" declcolumn="8"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
        <references refid="vector_8c_1aa63398bdb55f97b891b93404a89de14d" compoundref="vector_8c" startline="33" endline="45">init_ushort_vector</references>
        <references refid="vector_8c_1a97670c026df2a05dda5b0c85ebeb4d69" compoundref="vector_8c" startline="382" endline="412">push_ushort_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1acaf8f7f369483e4dcb9a7af53e79492c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structInt" kindref="compound">Int</ref></type>
        <definition>Int cumsum_int_vector</definition>
        <argsstring>(Int *vec)</argsstring>
        <name>cumsum_int_vector</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return an <ref refid="structInt" kindref="compound">Int</ref> vector container that holds an array containing the cumulative sum of the values in the input array</para>
<para>/param vec A vector container of type <ref refid="structInt" kindref="compound">Int</ref> /return return_vec A vector container of type <ref refid="structInt" kindref="compound">Int</ref></para>
<para><programlisting><codeline><highlight class="normal">Int<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_int_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_int_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">Int<sp/>cum_vec<sp/>=<sp/>cumsum_int_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vum_vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>3,<sp/>6,<sp/>10,<sp/>15<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_int_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3737" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3044" bodyend="3053" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3737" declcolumn="5"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
        <references refid="vector_8c_1a9fdb6c5fdd9f0d5a3bfb751f9e82968e" compoundref="vector_8c" startline="48" endline="60">init_int_vector</references>
        <references refid="vector_8c_1a6baf75dc56de293f3dbdc8ac40934980" compoundref="vector_8c" startline="415" endline="445">push_int_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1abe44138d94c38f7d65d62f63dddf668b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structUInt" kindref="compound">UInt</ref></type>
        <definition>UInt cumsum_uint_vector</definition>
        <argsstring>(UInt *vec)</argsstring>
        <name>cumsum_uint_vector</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return an <ref refid="structUInt" kindref="compound">UInt</ref> vector container that holds an array containing the cumulative sum of the values in the input array</para>
<para>/param vec A vector container of type <ref refid="structUInt" kindref="compound">UInt</ref> /return return_vec A vector container of type <ref refid="structUInt" kindref="compound">UInt</ref></para>
<para><programlisting><codeline><highlight class="normal">UInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uint_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_uint_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">UInt<sp/>cum_vec<sp/>=<sp/>cumsum_uint_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vum_vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>3,<sp/>6,<sp/>10,<sp/>15<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uint_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3758" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3056" bodyend="3065" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3758" declcolumn="6"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
        <references refid="vector_8c_1a9d8eb1d9ce65365d7b044fe684387a3f" compoundref="vector_8c" startline="63" endline="75">init_uint_vector</references>
        <references refid="vector_8c_1a787fc2bba6112c4ede10d0ec14ab3825" compoundref="vector_8c" startline="448" endline="478">push_uint_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1aacdbfadbd42e44ba909b315b43152012" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structLInt" kindref="compound">LInt</ref></type>
        <definition>LInt cumsum_long_vector</definition>
        <argsstring>(LInt *vec)</argsstring>
        <name>cumsum_long_vector</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return an <ref refid="structLInt" kindref="compound">LInt</ref> vector container that holds an array containing the cumulative sum of the values in the input array</para>
<para>/param vec A vector container of type <ref refid="structLInt" kindref="compound">LInt</ref> /return return_vec A vector container of type <ref refid="structLInt" kindref="compound">LInt</ref></para>
<para><programlisting><codeline><highlight class="normal">LInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_long_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_long_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">LInt<sp/>cum_vec<sp/>=<sp/>cumsum_long_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vum_vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>3,<sp/>6,<sp/>10,<sp/>15<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_long_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3779" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3068" bodyend="3077" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3779" declcolumn="6"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
        <references refid="vector_8c_1ac59c5fed0f4cd6b9aaf4c87b7a997bd3" compoundref="vector_8c" startline="78" endline="90">init_long_vector</references>
        <references refid="vector_8c_1a6135368684b7d740482cfc775417f255" compoundref="vector_8c" startline="481" endline="511">push_long_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ae856339059aa7e6f5db1d5bd7de43306" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structULInt" kindref="compound">ULInt</ref></type>
        <definition>ULInt cumsum_ulong_vector</definition>
        <argsstring>(ULInt *vec)</argsstring>
        <name>cumsum_ulong_vector</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return an <ref refid="structULInt" kindref="compound">ULInt</ref> vector container that holds an array containing the cumulative sum of the values in the input array</para>
<para>/param vec A vector container of type <ref refid="structULInt" kindref="compound">ULInt</ref> /return return_vec A vector container of type <ref refid="structULInt" kindref="compound">ULInt</ref></para>
<para><programlisting><codeline><highlight class="normal">ULInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ulong_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ulong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">ULInt<sp/>cum_vec<sp/>=<sp/>cumsum_ulong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vum_vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>3,<sp/>6,<sp/>10,<sp/>15<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ulong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3800" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3080" bodyend="3089" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3800" declcolumn="7"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
        <references refid="vector_8c_1af08098b392c0ff01db799bff9c83a521" compoundref="vector_8c" startline="93" endline="105">init_ulong_vector</references>
        <references refid="vector_8c_1aea5f95b56df2836ee553face60351e61" compoundref="vector_8c" startline="514" endline="544">push_ulong_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a531b30e8b67bc20cad9865cc3d8afe50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structLLInt" kindref="compound">LLInt</ref></type>
        <definition>LLInt cumsum_llong_vector</definition>
        <argsstring>(LLInt *vec)</argsstring>
        <name>cumsum_llong_vector</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return an <ref refid="structLLInt" kindref="compound">LLInt</ref> vector container that holds an array containing the cumulative sum of the values in the input array</para>
<para>/param vec A vector container of type <ref refid="structLLInt" kindref="compound">LLInt</ref> /return return_vec A vector container of type <ref refid="structLLInt" kindref="compound">LLInt</ref></para>
<para><programlisting><codeline><highlight class="normal">LLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_llong_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_llong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">LLInt<sp/>cum_vec<sp/>=<sp/>cumsum_llong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vum_vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>3,<sp/>6,<sp/>10,<sp/>15<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_llong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3821" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3092" bodyend="3101" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3821" declcolumn="7"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
        <references refid="vector_8c_1a65eda538d3c07a8beb1475c1a214ff67" compoundref="vector_8c" startline="107" endline="119">init_llong_vector</references>
        <references refid="vector_8c_1a93f7e28f97718d9d7c5c84df61c1466c" compoundref="vector_8c" startline="547" endline="577">push_llong_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a07bde722230b2f57f1b14304054d1d6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structULLInt" kindref="compound">ULLInt</ref></type>
        <definition>ULLInt cumsum_ullong_vector</definition>
        <argsstring>(ULLInt *vec)</argsstring>
        <name>cumsum_ullong_vector</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return an <ref refid="structULLInt" kindref="compound">ULLInt</ref> vector container that holds an array containing the cumulative sum of the values in the input array</para>
<para>/param vec A vector container of type <ref refid="structULLInt" kindref="compound">ULLInt</ref> /return return_vec A vector container of type <ref refid="structULLInt" kindref="compound">ULLInt</ref></para>
<para><programlisting><codeline><highlight class="normal">ULLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ullong_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ullong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">ULLInt<sp/>cum_vec<sp/>=<sp/>cumsum_ullong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vum_vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>3,<sp/>6,<sp/>10,<sp/>15<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ullong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3842" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3104" bodyend="3113" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3842" declcolumn="8"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
        <references refid="vector_8c_1ab05d31d34c87d8d6cd76f48539bf367f" compoundref="vector_8c" startline="122" endline="134">init_ullong_vector</references>
        <references refid="vector_8c_1a3478a298e62d85cb93f11a78f64d6f80" compoundref="vector_8c" startline="580" endline="610">push_ullong_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a9ddb912a129b46a9a2f2d147b4a1ddc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structFlt" kindref="compound">Flt</ref></type>
        <definition>Flt cumsum_float_vector</definition>
        <argsstring>(Flt *vec)</argsstring>
        <name>cumsum_float_vector</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return an <ref refid="structFlt" kindref="compound">Flt</ref> vector container that holds an array containing the cumulative sum of the values in the input array</para>
<para>/param vec A vector container of type <ref refid="structFlt" kindref="compound">Flt</ref> /return return_vec A vector container of type <ref refid="structFlt" kindref="compound">Flt</ref></para>
<para><programlisting><codeline><highlight class="normal">Flt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_float_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_float_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">Flt<sp/>cum_vec<sp/>=<sp/>cumsum_float_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vum_vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>3,<sp/>6,<sp/>10,<sp/>15<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_float_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3863" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3116" bodyend="3125" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3863" declcolumn="5"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
        <references refid="vector_8c_1a92bba70874a1570bd9c87a2a7385af35" compoundref="vector_8c" startline="137" endline="149">init_float_vector</references>
        <references refid="vector_8c_1a31e02f437f4f9f43d1126e017ae1cac3" compoundref="vector_8c" startline="613" endline="643">push_float_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ae8512eab3bf15409bda6bce1d6ec0380" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDble" kindref="compound">Dble</ref></type>
        <definition>Dble cumsum_double_vector</definition>
        <argsstring>(Dble *vec)</argsstring>
        <name>cumsum_double_vector</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return an <ref refid="structDble" kindref="compound">Dble</ref> vector container that holds an array containing the cumulative sum of the values in the input array</para>
<para>/param vec A vector container of type <ref refid="structDble" kindref="compound">Dble</ref> /return return_vec A vector container of type <ref refid="structDble" kindref="compound">Dble</ref></para>
<para><programlisting><codeline><highlight class="normal">Dble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_double_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_double_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">Dble<sp/>cum_vec<sp/>=<sp/>cumsum_double_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vum_vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>3,<sp/>6,<sp/>10,<sp/>15<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_double_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3884" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3128" bodyend="3137" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3884" declcolumn="6"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
        <references refid="vector_8c_1a2c0735f69da8e40535b5ecceace1a399" compoundref="vector_8c" startline="152" endline="164">init_double_vector</references>
        <references refid="vector_8c_1ab312c467d82a0fccc66cbb89a6b8de5c" compoundref="vector_8c" startline="646" endline="676">push_double_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ae0f64fd00879ff39b5ffbca0e80c197b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structLDble" kindref="compound">LDble</ref></type>
        <definition>LDble cumsum_ldouble_vector</definition>
        <argsstring>(LDble *vec)</argsstring>
        <name>cumsum_ldouble_vector</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return an <ref refid="structLDble" kindref="compound">LDble</ref> vector container that holds an array containing the cumulative sum of the values in the input array</para>
<para>/param vec A vector container of type <ref refid="structLDble" kindref="compound">LDble</ref> /return return_vec A vector container of type <ref refid="structLDble" kindref="compound">LDble</ref></para>
<para><programlisting><codeline><highlight class="normal">LDble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ldouble_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ldouble_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">LDble<sp/>cum_vec<sp/>=<sp/>cumsum_ldouble_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vum_vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>1,<sp/>3,<sp/>6,<sp/>10,<sp/>15<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ldouble_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3905" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3140" bodyend="3149" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3905" declcolumn="7"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
        <references refid="vector_8c_1a79d9f9d1d1cb31d09620bc5cdc73e94e" compoundref="vector_8c" startline="167" endline="179">init_ldouble_vector</references>
        <references refid="vector_8c_1ad001560a2793c40efb1c64532cefe2e2" compoundref="vector_8c" startline="679" endline="709">push_ldouble_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a0a47e22454ec90b6c959915dbc3c87a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char average_char_vector</definition>
        <argsstring>(Char *vec)</argsstring>
        <name>average_char_vector</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return the average value of the data in a vector data structure of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para>/param vec A vector data structure of type <ref refid="structChar" kindref="compound">Char</ref> /return avg The average value in the input data structure of type <ref refid="structChar" kindref="compound">Char</ref></para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_char_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">char<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_char_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">char<sp/>b<sp/>=<sp/>average_char_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(b);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.00000</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3928" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3154" bodyend="3158" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3928" declcolumn="6"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="vector_8c_1a0684e2f1aee143f1769dd8ff908c852c" compoundref="vector_8c" startline="2877" endline="2883">sum_char_vector</references>
        <referencedby refid="vector_8c_1a918b7824d676e70026969bf6af72dba7" compoundref="vector_8c" startline="3246" endline="3301">stdev_char_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ad821bfcf3659a78a11a5c9c7fd72a277" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char</type>
        <definition>unsigned char average_uchar_vector</definition>
        <argsstring>(UChar *vec)</argsstring>
        <name>average_uchar_vector</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return the average value of the data in a vector data structure of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para>/param vec A vector data structure of type <ref refid="structChar" kindref="compound">Char</ref> /return avg The average value in the input data structure of type <ref refid="structChar" kindref="compound">Char</ref></para>
<para><programlisting><codeline><highlight class="normal">UChar<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uchar_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>char<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_uchar_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>char<sp/>b<sp/>=<sp/>average_uchar_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(b);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.00000</highlight></codeline>
<codeline><highlight class="normal">free_uchar_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3949" column="15" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3161" bodyend="3165" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3949" declcolumn="15"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="vector_8c_1a643cb8d97c368f436a0010dacfca2401" compoundref="vector_8c" startline="2886" endline="2892">sum_uchar_vector</references>
        <referencedby refid="vector_8c_1a9315ed5e7e8966f095ee8d334c5e10a4" compoundref="vector_8c" startline="3304" endline="3359">stdev_uchar_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a5a553d82722c04ec4b613014fa1d0688" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float average_short_vector</definition>
        <argsstring>(Short *vec)</argsstring>
        <name>average_short_vector</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return the average value of the data in a vector data structure of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para>/param vec A vector data structure of type <ref refid="structShort" kindref="compound">Short</ref> /return avg The average value in the input data structure of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para><programlisting><codeline><highlight class="normal">Short<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_short_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">short<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_short_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>b<sp/>=<sp/>average_short_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(b);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.00000</highlight></codeline>
<codeline><highlight class="normal">free_short_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3970" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3167" bodyend="3171" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3970" declcolumn="7"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="vector_8c_1a54d410de6d79f482b3d560bcb78fd2ff" compoundref="vector_8c" startline="2895" endline="2901">sum_short_vector</references>
        <referencedby refid="vector_8c_1a193f4372f93ae17ab490841af7e508c3" compoundref="vector_8c" startline="3362" endline="3417">stdev_short_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a96018578b7bce5eb04f4b4dbbd63b582" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float average_ushort_vector</definition>
        <argsstring>(UShort *vec)</argsstring>
        <name>average_ushort_vector</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return the average value of the data in a vector data structure of type <ref refid="structUShort" kindref="compound">UShort</ref></para>
<para>/param vec A vector data structure of type <ref refid="structUShort" kindref="compound">UShort</ref> /return avg The average value in the input data structure of type <ref refid="structUShort" kindref="compound">UShort</ref></para>
<para><programlisting><codeline><highlight class="normal">UShort<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ushort_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>short<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ushort_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>b<sp/>=<sp/>average_ushort_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(b);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.00000</highlight></codeline>
<codeline><highlight class="normal">free_ushort_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="3991" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3174" bodyend="3178" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="3991" declcolumn="7"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="vector_8c_1a67f48de636722d00447f21d5040f8d81" compoundref="vector_8c" startline="2904" endline="2910">sum_ushort_vector</references>
        <referencedby refid="vector_8c_1ae0c29568372c468d83c1a5f33d4c60c6" compoundref="vector_8c" startline="3420" endline="3475">stdev_ushort_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a2e384c1e58cf1f6486ae0a8bc2e46379" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float average_int_vector</definition>
        <argsstring>(Int *vec)</argsstring>
        <name>average_int_vector</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return the average value of the data in a vector data structure of type <ref refid="structInt" kindref="compound">Int</ref></para>
<para>/param vec A vector data structure of type <ref refid="structInt" kindref="compound">Int</ref> /return avg The average value in the input data structure of type <ref refid="structInt" kindref="compound">Int</ref></para>
<para><programlisting><codeline><highlight class="normal">Int<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_int_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_int_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>b<sp/>=<sp/>average_int_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(b);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.00000</highlight></codeline>
<codeline><highlight class="normal">free_int_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4012" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3181" bodyend="3185" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4012" declcolumn="7"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="vector_8c_1aaf01dd9c2caec4100d4315bd8d525a30" compoundref="vector_8c" startline="2913" endline="2919">sum_int_vector</references>
        <referencedby refid="vector_8c_1aa469dd50aa2a8cd43ad5c577016145e8" compoundref="vector_8c" startline="3478" endline="3533">stdev_int_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a35959e6bd4010b04681750611d00a7b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float average_uint_vector</definition>
        <argsstring>(UInt *vec)</argsstring>
        <name>average_uint_vector</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return the average value of the data in a vector data structure of type <ref refid="structUInt" kindref="compound">UInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structUInt" kindref="compound">UInt</ref> /return avg The average value in the input data structure of type <ref refid="structUInt" kindref="compound">UInt</ref></para>
<para><programlisting><codeline><highlight class="normal">UInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uint_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_uint_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>b<sp/>=<sp/>average_uint_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(b);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.00000</highlight></codeline>
<codeline><highlight class="normal">free_uint_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4033" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3188" bodyend="3192" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4033" declcolumn="7"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="vector_8c_1a791fe9c8f9bd1d04158b01c3aa022edd" compoundref="vector_8c" startline="2922" endline="2928">sum_uint_vector</references>
        <referencedby refid="vector_8c_1a2a72fa8e25403401326d07853c45c7fe" compoundref="vector_8c" startline="3536" endline="3591">stdev_uint_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ad1feee1c2712401a20fbe6699f5c4bc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double average_long_vector</definition>
        <argsstring>(LInt *vec)</argsstring>
        <name>average_long_vector</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return the average value of the data in a vector data structure of type <ref refid="structLInt" kindref="compound">LInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structLInt" kindref="compound">LInt</ref> /return avg The average value in the input data structure of type <ref refid="structLInt" kindref="compound">LInt</ref></para>
<para><programlisting><codeline><highlight class="normal">LInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_long_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_long_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>b<sp/>=<sp/>average_long_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(b);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.00000</highlight></codeline>
<codeline><highlight class="normal">free_long_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4054" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3195" bodyend="3199" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4054" declcolumn="8"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="vector_8c_1af2ca62fb5fa87cccef8750d24b3979da" compoundref="vector_8c" startline="2931" endline="2937">sum_long_vector</references>
        <referencedby refid="vector_8c_1ab875bc51d7595b4e6fe536770cfe62c5" compoundref="vector_8c" startline="3594" endline="3649">stdev_long_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1aa94c4a725c6ab558c748baa93b652363" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double average_ulong_vector</definition>
        <argsstring>(ULInt *vec)</argsstring>
        <name>average_ulong_vector</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return the average value of the data in a vector data structure of type <ref refid="structULInt" kindref="compound">ULInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structULInt" kindref="compound">ULInt</ref> /return avg The average value in the input data structure of type <ref refid="structULInt" kindref="compound">ULInt</ref></para>
<para><programlisting><codeline><highlight class="normal">ULInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ulong_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ulong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>b<sp/>=<sp/>average_ulong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(b);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.00000</highlight></codeline>
<codeline><highlight class="normal">free_ulong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4075" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3202" bodyend="3206" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4075" declcolumn="8"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="vector_8c_1a3233da20e23c20659dd5aba81307b58d" compoundref="vector_8c" startline="2940" endline="2946">sum_ulong_vector</references>
        <referencedby refid="vector_8c_1a3cd9fa1fbe73338e380ccc9b98a6b768" compoundref="vector_8c" startline="3652" endline="3707">stdev_ulong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ae3782b50d088b4488da3a8283670ffcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long double</type>
        <definition>long double average_llong_vector</definition>
        <argsstring>(LLInt *vec)</argsstring>
        <name>average_llong_vector</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return the average value of the data in a vector data structure of type <ref refid="structLLInt" kindref="compound">LLInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structLLInt" kindref="compound">LLInt</ref> /return avg The average value in the input data structure of type <ref refid="structLLInt" kindref="compound">LLInt</ref></para>
<para><programlisting><codeline><highlight class="normal">LLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_llong_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_llong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>b<sp/>=<sp/>average_llong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(b);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.00000</highlight></codeline>
<codeline><highlight class="normal">free_llong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4096" column="13" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3209" bodyend="3213" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4096" declcolumn="13"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="vector_8c_1a838510507e7f386e844fd1e5e3ae494a" compoundref="vector_8c" startline="2949" endline="2955">sum_llong_vector</references>
        <referencedby refid="vector_8c_1a5b29dc6f20528b67a4a53208c5beefe7" compoundref="vector_8c" startline="3710" endline="3765">stdev_llong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1abb879670618c44d1259b4cb689d36698" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long double</type>
        <definition>long double average_ullong_vector</definition>
        <argsstring>(ULLInt *vec)</argsstring>
        <name>average_ullong_vector</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return the average value of the data in a vector data structure of type <ref refid="structULLInt" kindref="compound">ULLInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structULLInt" kindref="compound">ULLInt</ref> /return avg The average value in the input data structure of type <ref refid="structULLInt" kindref="compound">ULLInt</ref></para>
<para><programlisting><codeline><highlight class="normal">ULLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ullong_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ullong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>b<sp/>=<sp/>average_ullong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(b);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.00000</highlight></codeline>
<codeline><highlight class="normal">free_ullong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4117" column="13" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3216" bodyend="3220" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4117" declcolumn="13"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="vector_8c_1af1cc1dfd0470ab00fc1537ebcbb5c089" compoundref="vector_8c" startline="2958" endline="2964">sum_ullong_vector</references>
        <referencedby refid="vector_8c_1a9cb0b02a7bedef69397ef758fd36baa6" compoundref="vector_8c" startline="3768" endline="3823">stdev_ullong_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a95e8f18d7457adb1784ca850c7afa01e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float average_float_vector</definition>
        <argsstring>(Flt *vec)</argsstring>
        <name>average_float_vector</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return the average value of the data in a vector data structure of type <ref refid="structFlt" kindref="compound">Flt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structFlt" kindref="compound">Flt</ref> /return avg The average value in the input data structure of type <ref refid="structFlt" kindref="compound">Flt</ref></para>
<para><programlisting><codeline><highlight class="normal">Flt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_float_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_float_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>b<sp/>=<sp/>average_float_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(b);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.00000</highlight></codeline>
<codeline><highlight class="normal">free_float_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4138" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3223" bodyend="3227" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4138" declcolumn="7"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="vector_8c_1ab9177b68251ddf43f4a245afd559e462" compoundref="vector_8c" startline="2967" endline="2973">sum_float_vector</references>
        <referencedby refid="vector_8c_1abb791f292ea37822fa3c8f20749b8571" compoundref="vector_8c" startline="3826" endline="3881">stdev_float_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ab0985989db7774a2f4ccf0f6bc7fd0ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double average_double_vector</definition>
        <argsstring>(Dble *vec)</argsstring>
        <name>average_double_vector</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return the average value of the data in a vector data structure of type <ref refid="structDble" kindref="compound">Dble</ref></para>
<para>/param vec A vector data structure of type <ref refid="structDble" kindref="compound">Dble</ref> /return avg The average value in the input data structure of type <ref refid="structDble" kindref="compound">Dble</ref></para>
<para><programlisting><codeline><highlight class="normal">Dble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_double_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_double_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>b<sp/>=<sp/>average_double_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(b);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.00000</highlight></codeline>
<codeline><highlight class="normal">free_double_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4159" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3230" bodyend="3234" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4159" declcolumn="8"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="vector_8c_1a98a70f4f173d451a1ff5357f4779289d" compoundref="vector_8c" startline="2976" endline="2982">sum_double_vector</references>
        <referencedby refid="vector_8c_1aa05c06bd35f0e74c8a07ef0257a8aa67" compoundref="vector_8c" startline="3884" endline="3939">stdev_double_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a136fac1692146b0fc1dd1f548b6a07a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long double</type>
        <definition>long double average_ldouble_vector</definition>
        <argsstring>(LDble *vec)</argsstring>
        <name>average_ldouble_vector</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will return the average value of the data in a vector data structure of type <ref refid="structLDble" kindref="compound">LDble</ref></para>
<para>/param vec A vector data structure of type <ref refid="structLDble" kindref="compound">LDble</ref> /return avg The average value in the input data structure of type <ref refid="structLDble" kindref="compound">LDble</ref></para>
<para><programlisting><codeline><highlight class="normal">LDble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ldouble_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ldouble_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>b<sp/>=<sp/>average_ldouble_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(b);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.00000</highlight></codeline>
<codeline><highlight class="normal">free_ldouble_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4180" column="13" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3237" bodyend="3241" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4180" declcolumn="13"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="vector_8c_1af2df2f0fe19814004ab61a91521d7b21" compoundref="vector_8c" startline="2985" endline="2991">sum_ldouble_vector</references>
        <referencedby refid="vector_8c_1abf8b31942231ba26f9f5d4729cdd5370" compoundref="vector_8c" startline="3942" endline="3997">stdev_ldouble_vector</referencedby>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a918b7824d676e70026969bf6af72dba7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float stdev_char_vector</definition>
        <argsstring>(Char *vec)</argsstring>
        <name>stdev_char_vector</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function wil calculate the standard deviation for the values in a vector container.</para>
<para>/param vec A vector data structure of type <ref refid="structChar" kindref="compound">Char</ref></para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_char_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">char<sp/>a[10]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10};</highlight></codeline>
<codeline><highlight class="normal">insert_char_vector(&amp;vec,<sp/>a,<sp/>10,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>stdev<sp/>=<sp/>stdev_char_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(stdev);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.2076</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4202" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3246" bodyend="3301" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4202" declcolumn="7"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
        <references refid="vector_8c_1a0a47e22454ec90b6c959915dbc3c87a6" compoundref="vector_8c" startline="3154" endline="3158">average_char_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a9315ed5e7e8966f095ee8d334c5e10a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float stdev_uchar_vector</definition>
        <argsstring>(UChar *vec)</argsstring>
        <name>stdev_uchar_vector</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function wil calculate the standard deviation for the values in a vector container.</para>
<para>/param vec A vector data structure of type <ref refid="structUChar" kindref="compound">UChar</ref></para>
<para><programlisting><codeline><highlight class="normal">UChar<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uchar_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>char<sp/>a[10]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10};</highlight></codeline>
<codeline><highlight class="normal">insert_uchar_vector(&amp;vec,<sp/>a,<sp/>10,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>stdev<sp/>=<sp/>stdev_uchar_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(stdev);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.2076</highlight></codeline>
<codeline><highlight class="normal">free_uchar_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4222" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3304" bodyend="3359" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4222" declcolumn="7"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
        <references refid="vector_8c_1ad821bfcf3659a78a11a5c9c7fd72a277" compoundref="vector_8c" startline="3161" endline="3165">average_uchar_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a193f4372f93ae17ab490841af7e508c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float stdev_short_vector</definition>
        <argsstring>(Short *vec)</argsstring>
        <name>stdev_short_vector</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function wil calculate the standard deviation for the values in a vector container.</para>
<para>/param vec A vector data structure of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para><programlisting><codeline><highlight class="normal">Short<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_short_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">short<sp/>int<sp/>a[10]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10};</highlight></codeline>
<codeline><highlight class="normal">insert_short_vector(&amp;vec,<sp/>a,<sp/>10,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>stdev<sp/>=<sp/>stdev_short_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(stdev);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.2076</highlight></codeline>
<codeline><highlight class="normal">free_short_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4241" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3362" bodyend="3417" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4241" declcolumn="7"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
        <references refid="vector_8c_1a5a553d82722c04ec4b613014fa1d0688" compoundref="vector_8c" startline="3167" endline="3171">average_short_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ae0c29568372c468d83c1a5f33d4c60c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float stdev_ushort_vector</definition>
        <argsstring>(UShort *vec)</argsstring>
        <name>stdev_ushort_vector</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function wil calculate the standard deviation for the values in a vector container.</para>
<para>/param vec A vector data structure of type <ref refid="structUShort" kindref="compound">UShort</ref></para>
<para><programlisting><codeline><highlight class="normal">UShort<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ushort_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>short<sp/>int<sp/>a[10]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10};</highlight></codeline>
<codeline><highlight class="normal">insert_ushort_vector(&amp;vec,<sp/>a,<sp/>10,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>stdev<sp/>=<sp/>stdev_ushort_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(stdev);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.2076</highlight></codeline>
<codeline><highlight class="normal">free_ushort_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4261" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3420" bodyend="3475" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4261" declcolumn="7"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
        <references refid="vector_8c_1a96018578b7bce5eb04f4b4dbbd63b582" compoundref="vector_8c" startline="3174" endline="3178">average_ushort_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1aa469dd50aa2a8cd43ad5c577016145e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float stdev_int_vector</definition>
        <argsstring>(Int *vec)</argsstring>
        <name>stdev_int_vector</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function wil calculate the standard deviation for the values in a vector container.</para>
<para>/param vec A vector data structure of type <ref refid="structInt" kindref="compound">Int</ref></para>
<para><programlisting><codeline><highlight class="normal">Int<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_int_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>a[10]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10};</highlight></codeline>
<codeline><highlight class="normal">insert_int_vector(&amp;vec,<sp/>a,<sp/>10,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>stdev<sp/>=<sp/>stdev_int_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(stdev);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.2076</highlight></codeline>
<codeline><highlight class="normal">free_int_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4281" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3478" bodyend="3533" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4281" declcolumn="7"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
        <references refid="vector_8c_1a2e384c1e58cf1f6486ae0a8bc2e46379" compoundref="vector_8c" startline="3181" endline="3185">average_int_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a2a72fa8e25403401326d07853c45c7fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float stdev_uint_vector</definition>
        <argsstring>(UInt *vec)</argsstring>
        <name>stdev_uint_vector</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function wil calculate the standard deviation for the values in a vector container.</para>
<para>/param vec A vector data structure of type <ref refid="structUInt" kindref="compound">UInt</ref></para>
<para><programlisting><codeline><highlight class="normal">UInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uint_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>int<sp/>a[10]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10};</highlight></codeline>
<codeline><highlight class="normal">insert_uint_vector(&amp;vec,<sp/>a,<sp/>10,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>stdev<sp/>=<sp/>stdev_uint_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(stdev);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.2076</highlight></codeline>
<codeline><highlight class="normal">free_uint_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4301" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3536" bodyend="3591" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4301" declcolumn="7"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
        <references refid="vector_8c_1a35959e6bd4010b04681750611d00a7b7" compoundref="vector_8c" startline="3188" endline="3192">average_uint_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ab875bc51d7595b4e6fe536770cfe62c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double stdev_long_vector</definition>
        <argsstring>(LInt *vec)</argsstring>
        <name>stdev_long_vector</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function wil calculate the standard deviation for the values in a vector container.</para>
<para>/param vec A vector data structure of type <ref refid="structLInt" kindref="compound">LInt</ref></para>
<para><programlisting><codeline><highlight class="normal">LInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_long_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>int<sp/>a[10]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10};</highlight></codeline>
<codeline><highlight class="normal">insert_long_vector(&amp;vec,<sp/>a,<sp/>10,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>stdev<sp/>=<sp/>stdev_long_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(stdev);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.2076</highlight></codeline>
<codeline><highlight class="normal">free_long_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4321" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3594" bodyend="3649" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4321" declcolumn="8"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
        <references refid="vector_8c_1ad1feee1c2712401a20fbe6699f5c4bc7" compoundref="vector_8c" startline="3195" endline="3199">average_long_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a3cd9fa1fbe73338e380ccc9b98a6b768" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double stdev_ulong_vector</definition>
        <argsstring>(ULInt *vec)</argsstring>
        <name>stdev_ulong_vector</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function wil calculate the standard deviation for the values in a vector container.</para>
<para>/param vec A vector data structure of type <ref refid="structULInt" kindref="compound">ULInt</ref></para>
<para><programlisting><codeline><highlight class="normal">ULInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ulong_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>int<sp/>a[10]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10};</highlight></codeline>
<codeline><highlight class="normal">insert_ulong_vector(&amp;vec,<sp/>a,<sp/>10,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>stdev<sp/>=<sp/>stdev_ulong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(stdev);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.2076</highlight></codeline>
<codeline><highlight class="normal">free_ulong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4341" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3652" bodyend="3707" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4341" declcolumn="8"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
        <references refid="vector_8c_1aa94c4a725c6ab558c748baa93b652363" compoundref="vector_8c" startline="3202" endline="3206">average_ulong_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a5b29dc6f20528b67a4a53208c5beefe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long double</type>
        <definition>long double stdev_llong_vector</definition>
        <argsstring>(LLInt *vec)</argsstring>
        <name>stdev_llong_vector</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function wil calculate the standard deviation for the values in a vector container.</para>
<para>/param vec A vector data structure of type <ref refid="structLLInt" kindref="compound">LLInt</ref></para>
<para><programlisting><codeline><highlight class="normal">LLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_llong_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>long<sp/>int<sp/>a[10]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10};</highlight></codeline>
<codeline><highlight class="normal">insert_llong_vector(&amp;vec,<sp/>a,<sp/>10,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>stdev<sp/>=<sp/>stdev_llong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(stdev);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.2076</highlight></codeline>
<codeline><highlight class="normal">free_llong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4361" column="13" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3710" bodyend="3765" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4361" declcolumn="13"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
        <references refid="vector_8c_1ae3782b50d088b4488da3a8283670ffcc" compoundref="vector_8c" startline="3209" endline="3213">average_llong_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a9cb0b02a7bedef69397ef758fd36baa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long double</type>
        <definition>long double stdev_ullong_vector</definition>
        <argsstring>(ULLInt *vec)</argsstring>
        <name>stdev_ullong_vector</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function wil calculate the standard deviation for the values in a vector container.</para>
<para>/param vec A vector data structure of type <ref refid="structULLInt" kindref="compound">ULLInt</ref></para>
<para><programlisting><codeline><highlight class="normal">ULLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ullong_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>long<sp/>int<sp/>a[10]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10};</highlight></codeline>
<codeline><highlight class="normal">insert_ullong_vector(&amp;vec,<sp/>a,<sp/>10,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>stdev<sp/>=<sp/>stdev_ullong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(stdev);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.2076</highlight></codeline>
<codeline><highlight class="normal">free_ullong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4381" column="13" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3768" bodyend="3823" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4381" declcolumn="13"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
        <references refid="vector_8c_1abb879670618c44d1259b4cb689d36698" compoundref="vector_8c" startline="3216" endline="3220">average_ullong_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1abb791f292ea37822fa3c8f20749b8571" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float stdev_float_vector</definition>
        <argsstring>(Flt *vec)</argsstring>
        <name>stdev_float_vector</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function wil calculate the standard deviation for the values in a vector container.</para>
<para>/param vec A vector data structure of type <ref refid="structFlt" kindref="compound">Flt</ref></para>
<para><programlisting><codeline><highlight class="normal">Flt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_float_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>a[10]<sp/>=<sp/>{1.,<sp/>2.,<sp/>3.,<sp/>4.,<sp/>5.,<sp/>6.,<sp/>7.,<sp/>8.,<sp/>9.,<sp/>10.};</highlight></codeline>
<codeline><highlight class="normal">insert_float_vector(&amp;vec,<sp/>a,<sp/>10,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>stdev<sp/>=<sp/>stdev_float_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(stdev);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.2076</highlight></codeline>
<codeline><highlight class="normal">free_float_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4401" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3826" bodyend="3881" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4401" declcolumn="7"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
        <references refid="vector_8c_1a95e8f18d7457adb1784ca850c7afa01e" compoundref="vector_8c" startline="3223" endline="3227">average_float_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1aa05c06bd35f0e74c8a07ef0257a8aa67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double stdev_double_vector</definition>
        <argsstring>(Dble *vec)</argsstring>
        <name>stdev_double_vector</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function wil calculate the standard deviation for the values in a vector container.</para>
<para>/param vec A vector data structure of type <ref refid="structDble" kindref="compound">Dble</ref></para>
<para><programlisting><codeline><highlight class="normal">Dble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_double_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>a[10]<sp/>=<sp/>{1.,<sp/>2.,<sp/>3.,<sp/>4.,<sp/>5.,<sp/>6.,<sp/>7.,<sp/>8.,<sp/>9.,<sp/>10.};</highlight></codeline>
<codeline><highlight class="normal">insert_double_vector(&amp;vec,<sp/>a,<sp/>10,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>stdev<sp/>=<sp/>stdev_double_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(stdev);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.2076</highlight></codeline>
<codeline><highlight class="normal">free_double_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4421" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3884" bodyend="3939" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4421" declcolumn="8"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
        <references refid="vector_8c_1ab0985989db7774a2f4ccf0f6bc7fd0ed" compoundref="vector_8c" startline="3230" endline="3234">average_double_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1abf8b31942231ba26f9f5d4729cdd5370" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long double</type>
        <definition>long double stdev_ldouble_vector</definition>
        <argsstring>(LDble *vec)</argsstring>
        <name>stdev_ldouble_vector</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function wil calculate the standard deviation for the values in a vector container.</para>
<para>/param vec A vector data structure of type <ref refid="structLDble" kindref="compound">LDble</ref></para>
<para><programlisting><codeline><highlight class="normal">LDble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ldouble_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>a[10]<sp/>=<sp/>{1.,<sp/>2.,<sp/>3.,<sp/>4.,<sp/>5.,<sp/>6.,<sp/>7.,<sp/>8.,<sp/>9.,<sp/>10.};</highlight></codeline>
<codeline><highlight class="normal">insert_ldouble_vector(&amp;vec,<sp/>a,<sp/>10,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>stdev<sp/>=<sp/>stdev_ldouble_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(stdev);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.2076</highlight></codeline>
<codeline><highlight class="normal">free_ldouble_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4441" column="13" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="3942" bodyend="3997" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4441" declcolumn="13"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
        <references refid="vector_8c_1a136fac1692146b0fc1dd1f548b6a07a4" compoundref="vector_8c" startline="3237" endline="3241">average_ldouble_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ac45503684793e5582c2bdac1d7d52ba3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char max_char_vector</definition>
        <argsstring>(Char *vec)</argsstring>
        <name>max_char_vector</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the max value in a vector data structure of type <ref refid="structChar" kindref="compound">Char</ref></para>
<para>/param vec A vector data structure of type <ref refid="structChar" kindref="compound">Char</ref></para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_char_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">char<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_char_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">char<sp/>max<sp/>=<sp/>max_char_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>5</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4463" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4002" bodyend="4010" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4463" declcolumn="6"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a20c0c3f6f0baca86dd48608bbf4fb02e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char</type>
        <definition>unsigned char max_uchar_vector</definition>
        <argsstring>(UChar *vec)</argsstring>
        <name>max_uchar_vector</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the max value in a vector data structure of type <ref refid="structUChar" kindref="compound">UChar</ref></para>
<para>/param vec A vector data structure of type <ref refid="structUChar" kindref="compound">UChar</ref></para>
<para><programlisting><codeline><highlight class="normal">UChar<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uchar_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>char<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_uchar_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>char<sp/>max<sp/>=<sp/>max_uchar_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>5</highlight></codeline>
<codeline><highlight class="normal">free_uchar_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4483" column="15" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4013" bodyend="4021" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4483" declcolumn="15"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a9322308e4f52e03ae336549fd42b7934" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>short int</type>
        <definition>short int max_short_vector</definition>
        <argsstring>(Short *vec)</argsstring>
        <name>max_short_vector</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the max value in a vector data structure of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para>/param vec A vector data structure of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para><programlisting><codeline><highlight class="normal">Short<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_short_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">short<sp/>int<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_short_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">short<sp/>int<sp/>max<sp/>=<sp/>max_short_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>5</highlight></codeline>
<codeline><highlight class="normal">free_short_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4503" column="11" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4024" bodyend="4032" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4503" declcolumn="11"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a60d805f5dc29474286fb04c939b5c509" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned short int</type>
        <definition>unsigned short int max_ushort_vector</definition>
        <argsstring>(UShort *vec)</argsstring>
        <name>max_ushort_vector</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the max value in a vector data structure of type <ref refid="structUShort" kindref="compound">UShort</ref></para>
<para>/param vec A vector data structure of type <ref refid="structUShort" kindref="compound">UShort</ref></para>
<para><programlisting><codeline><highlight class="normal">UShort<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ushort_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>short<sp/>int<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ushort_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>short<sp/>int<sp/>max<sp/>=<sp/>max_ushort_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>5</highlight></codeline>
<codeline><highlight class="normal">free_ushort_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4523" column="20" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4035" bodyend="4043" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4523" declcolumn="20"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a2b015405abe5287fffe31e5dc0e31808" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int max_int_vector</definition>
        <argsstring>(Int *vec)</argsstring>
        <name>max_int_vector</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the max value in a vector data structure of type <ref refid="structInt" kindref="compound">Int</ref></para>
<para>/param vec A vector data structure of type <ref refid="structInt" kindref="compound">Int</ref></para>
<para><programlisting><codeline><highlight class="normal">Int<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_int_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_int_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>max<sp/>=<sp/>max_int_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>5</highlight></codeline>
<codeline><highlight class="normal">free_int_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4543" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4046" bodyend="4054" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4543" declcolumn="5"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a174988fd6cd94257cb6332b91429839d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int max_uint_vector</definition>
        <argsstring>(UInt *vec)</argsstring>
        <name>max_uint_vector</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the max value in a vector data structure of type <ref refid="structUInt" kindref="compound">UInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structUInt" kindref="compound">UInt</ref></para>
<para><programlisting><codeline><highlight class="normal">UInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uint_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>int<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_uint_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>int<sp/>max<sp/>=<sp/>max_uint_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>5</highlight></codeline>
<codeline><highlight class="normal">free_uint_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4563" column="14" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4057" bodyend="4065" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4563" declcolumn="14"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a3b06accf11f120a22aec6d59ed16d9db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int max_long_vector</definition>
        <argsstring>(LInt *vec)</argsstring>
        <name>max_long_vector</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the max value in a vector data structure of type <ref refid="structLInt" kindref="compound">LInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structLInt" kindref="compound">LInt</ref></para>
<para><programlisting><codeline><highlight class="normal">LInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_long_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>int<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_long_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>int<sp/>max<sp/>=<sp/>max_long_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>5</highlight></codeline>
<codeline><highlight class="normal">free_long_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4583" column="10" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4068" bodyend="4076" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4583" declcolumn="10"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ab73b0a00fcc4f391123628e2913a19bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long int</type>
        <definition>unsigned long int max_ulong_vector</definition>
        <argsstring>(ULInt *vec)</argsstring>
        <name>max_ulong_vector</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the max value in a vector data structure of type <ref refid="structULInt" kindref="compound">ULInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structULInt" kindref="compound">ULInt</ref></para>
<para><programlisting><codeline><highlight class="normal">ULInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ulong_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ulong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>int<sp/>max<sp/>=<sp/>max_ulong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>5</highlight></codeline>
<codeline><highlight class="normal">free_ulong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4603" column="19" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4079" bodyend="4087" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4603" declcolumn="19"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a812e8c27f2970204cc8460728d13c96f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long long int</type>
        <definition>long long int max_llong_vector</definition>
        <argsstring>(LLInt *vec)</argsstring>
        <name>max_llong_vector</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the max value in a vector data structure of type <ref refid="structLLInt" kindref="compound">LLInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structLLInt" kindref="compound">LLInt</ref></para>
<para><programlisting><codeline><highlight class="normal">LLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_llong_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_llong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>long<sp/>int<sp/>max<sp/>=<sp/>max_llong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>5</highlight></codeline>
<codeline><highlight class="normal">free_llong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4623" column="15" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4090" bodyend="4098" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4623" declcolumn="15"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a1960c8508e6fe43960e240626c497764" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long long int</type>
        <definition>unsigned long long int max_ullong_vector</definition>
        <argsstring>(ULLInt *vec)</argsstring>
        <name>max_ullong_vector</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the max value in a vector data structure of type <ref refid="structULLInt" kindref="compound">ULLInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structULLInt" kindref="compound">ULLInt</ref></para>
<para><programlisting><codeline><highlight class="normal">ULLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ullong_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ullong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>long<sp/>int<sp/>max<sp/>=<sp/>max_ullong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>5</highlight></codeline>
<codeline><highlight class="normal">free_ullong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4643" column="24" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4101" bodyend="4109" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4643" declcolumn="24"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a6a09841dc59b5a463a167ee7c2911efe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float max_float_vector</definition>
        <argsstring>(Flt *vec)</argsstring>
        <name>max_float_vector</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the max value in a vector data structure of type <ref refid="structFlt" kindref="compound">Flt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structFlt" kindref="compound">Flt</ref></para>
<para><programlisting><codeline><highlight class="normal">Flt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_float_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>a[5]<sp/>=<sp/>{<sp/>1.1,<sp/>2.2,<sp/>3.3,<sp/>4.4,<sp/>5.5};</highlight></codeline>
<codeline><highlight class="normal">insert_float_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>max<sp/>=<sp/>max_float_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>5.5</highlight></codeline>
<codeline><highlight class="normal">free_float_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4663" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4112" bodyend="4120" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4663" declcolumn="7"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a2da642346c710d417636ad41cd99b9a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double max_double_vector</definition>
        <argsstring>(Dble *vec)</argsstring>
        <name>max_double_vector</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the max value in a vector data structure of type <ref refid="structDble" kindref="compound">Dble</ref></para>
<para>/param vec A vector data structure of type <ref refid="structDble" kindref="compound">Dble</ref></para>
<para><programlisting><codeline><highlight class="normal">Dble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_double_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>a[5]<sp/>=<sp/>{<sp/>1.1,<sp/>2.2,<sp/>3.3,<sp/>4.4,<sp/>5.5};</highlight></codeline>
<codeline><highlight class="normal">insert_double_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>max<sp/>=<sp/>max_double_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>5.5</highlight></codeline>
<codeline><highlight class="normal">free_double_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4683" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4123" bodyend="4131" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4683" declcolumn="8"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1adcda6720fac922e691d3bf4927edb42a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long double</type>
        <definition>long double max_ldouble_vector</definition>
        <argsstring>(LDble *vec)</argsstring>
        <name>max_ldouble_vector</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the max value in a vector data structure of type <ref refid="structLDble" kindref="compound">LDble</ref></para>
<para>/param vec A vector data structure of type <ref refid="structLDble" kindref="compound">LDble</ref></para>
<para><programlisting><codeline><highlight class="normal">LDble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ldouble_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>a[5]<sp/>=<sp/>{<sp/>1.1,<sp/>2.2,<sp/>3.3,<sp/>4.4,<sp/>5.5};</highlight></codeline>
<codeline><highlight class="normal">insert_ldouble_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>max<sp/>=<sp/>max_ldouble_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>5.5</highlight></codeline>
<codeline><highlight class="normal">free_ldouble_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4703" column="13" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4134" bodyend="4142" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4703" declcolumn="13"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a891486b9b55a8c3ac25a1225553fb0c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char min_char_vector</definition>
        <argsstring>(Char *vec)</argsstring>
        <name>min_char_vector</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the min value in a vector data structure of type <ref refid="structChar" kindref="compound">Char</ref></para>
<para>/param vec A vector data structure of type <ref refid="structChar" kindref="compound">Char</ref> /return min The minimum value</para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_char_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">char<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_char_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">char<sp/>min<sp/>=<sp/>min_char_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>1</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4726" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4147" bodyend="4155" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4726" declcolumn="6"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a1dbc7c797a21eb6c44d009cb497b50ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char</type>
        <definition>unsigned char min_uchar_vector</definition>
        <argsstring>(UChar *vec)</argsstring>
        <name>min_uchar_vector</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the min value in a vector data structure of type <ref refid="structUChar" kindref="compound">UChar</ref></para>
<para>/param vec A vector data structure of type <ref refid="structShort" kindref="compound">Short</ref> /param min The minimum values</para>
<para><programlisting><codeline><highlight class="normal">UChar<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uchar_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>char<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_uchar_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>char<sp/>min<sp/>=<sp/>min_uchar_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>1</highlight></codeline>
<codeline><highlight class="normal">free_uchar_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4747" column="15" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4158" bodyend="4166" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4747" declcolumn="15"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a21be2c6c074005bfa1c33603299f3181" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>short int</type>
        <definition>short int min_short_vector</definition>
        <argsstring>(Short *vec)</argsstring>
        <name>min_short_vector</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the min value in a vector data structure of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para>/param vec A vector data structure of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para><programlisting><codeline><highlight class="normal">Short<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_short_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">short<sp/>int<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_short_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">short<sp/>int<sp/>min<sp/>=<sp/>min_short_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>1</highlight></codeline>
<codeline><highlight class="normal">free_short_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4767" column="11" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4169" bodyend="4177" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4767" declcolumn="11"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a3b2bb12ccbe4e256ec4da071673dd601" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned short int</type>
        <definition>unsigned short int min_ushort_vector</definition>
        <argsstring>(UShort *vec)</argsstring>
        <name>min_ushort_vector</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the min value in a vector data structure of type <ref refid="structUShort" kindref="compound">UShort</ref></para>
<para>/param vec A vector data structure of type <ref refid="structUShort" kindref="compound">UShort</ref></para>
<para><programlisting><codeline><highlight class="normal">UShort<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ushort_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>short<sp/>int<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ushort_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>short<sp/>int<sp/>min<sp/>=<sp/>min_ushort_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>1</highlight></codeline>
<codeline><highlight class="normal">free_ushort_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4787" column="20" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4180" bodyend="4188" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4787" declcolumn="20"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1aad99e117541f381f0c14f5620507f6e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int min_int_vector</definition>
        <argsstring>(Int *vec)</argsstring>
        <name>min_int_vector</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the min value in a vector data structure of type <ref refid="structInt" kindref="compound">Int</ref></para>
<para>/param vec A vector data structure of type <ref refid="structInt" kindref="compound">Int</ref></para>
<para><programlisting><codeline><highlight class="normal">Int<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_int_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_int_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>min<sp/>=<sp/>min_int_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>1</highlight></codeline>
<codeline><highlight class="normal">free_int_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4807" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4191" bodyend="4199" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4807" declcolumn="5"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a449905d346deae4f4a83314c592a5b80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int min_uint_vector</definition>
        <argsstring>(UInt *vec)</argsstring>
        <name>min_uint_vector</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the min value in a vector data structure of type <ref refid="structUInt" kindref="compound">UInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structUInt" kindref="compound">UInt</ref></para>
<para><programlisting><codeline><highlight class="normal">UInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uint_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>int<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_uint_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>int<sp/>min<sp/>=<sp/>min_uint_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>1</highlight></codeline>
<codeline><highlight class="normal">free_uint_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4827" column="14" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4202" bodyend="4210" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4827" declcolumn="14"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1aaff52778fc2f05ace6de3570530e9068" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int min_long_vector</definition>
        <argsstring>(LInt *vec)</argsstring>
        <name>min_long_vector</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the min value in a vector data structure of type <ref refid="structLInt" kindref="compound">LInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structLInt" kindref="compound">LInt</ref></para>
<para><programlisting><codeline><highlight class="normal">LInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_long_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>int<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_long_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>int<sp/>min<sp/>=<sp/>min_long_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>1</highlight></codeline>
<codeline><highlight class="normal">free_long_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4847" column="10" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4213" bodyend="4221" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4847" declcolumn="10"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a98b9ea464f1a6e1012f3aae9031a8a13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long int</type>
        <definition>unsigned long int min_ulong_vector</definition>
        <argsstring>(ULInt *vec)</argsstring>
        <name>min_ulong_vector</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the min value in a vector data structure of type <ref refid="structULInt" kindref="compound">ULInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structULInt" kindref="compound">ULInt</ref></para>
<para><programlisting><codeline><highlight class="normal">ULInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ulong_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ulong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>int<sp/>min<sp/>=<sp/>min_ulong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>1</highlight></codeline>
<codeline><highlight class="normal">free_ulong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4867" column="19" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4224" bodyend="4232" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4867" declcolumn="19"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ad1a7c046cbcac65a71e5442ec5680bdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long long int</type>
        <definition>long long int min_llong_vector</definition>
        <argsstring>(LLInt *vec)</argsstring>
        <name>min_llong_vector</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the min value in a vector data structure of type <ref refid="structLLInt" kindref="compound">LLInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structLLInt" kindref="compound">LLInt</ref></para>
<para><programlisting><codeline><highlight class="normal">LLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_llong_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_llong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>long<sp/>int<sp/>min<sp/>=<sp/>min_llong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>1</highlight></codeline>
<codeline><highlight class="normal">free_llong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4887" column="15" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4235" bodyend="4243" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4887" declcolumn="15"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a10aea428d676da30abd474d11dbab300" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long long int</type>
        <definition>unsigned long long int min_ullong_vector</definition>
        <argsstring>(ULLInt *vec)</argsstring>
        <name>min_ullong_vector</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the min value in a vector data structure of type <ref refid="structULLInt" kindref="compound">ULLInt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structULLInt" kindref="compound">ULLInt</ref></para>
<para><programlisting><codeline><highlight class="normal">ULLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ullong_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ullong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>long<sp/>int<sp/>min<sp/>=<sp/>min_ullong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>1</highlight></codeline>
<codeline><highlight class="normal">free_ullong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4907" column="24" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4246" bodyend="4254" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4907" declcolumn="24"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a37e7749c40c9ecefb35c6f677e6e2786" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float min_float_vector</definition>
        <argsstring>(Flt *vec)</argsstring>
        <name>min_float_vector</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the min value in a vector data structure of type <ref refid="structFlt" kindref="compound">Flt</ref></para>
<para>/param vec A vector data structure of type <ref refid="structFlt" kindref="compound">Flt</ref></para>
<para><programlisting><codeline><highlight class="normal">Flt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_float_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>a[5]<sp/>=<sp/>{1.,<sp/>2.,<sp/>3.,<sp/>4.,<sp/>5.};</highlight></codeline>
<codeline><highlight class="normal">insert_float_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>min<sp/>=<sp/>min_float_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>1</highlight></codeline>
<codeline><highlight class="normal">free_float_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4927" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4257" bodyend="4265" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4927" declcolumn="7"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ac870c654ea8b8143650fb8504880d80a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double min_double_vector</definition>
        <argsstring>(Dble *vec)</argsstring>
        <name>min_double_vector</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the min value in a vector data structure of type <ref refid="structDble" kindref="compound">Dble</ref></para>
<para>/param vec A vector data structure of type <ref refid="structDble" kindref="compound">Dble</ref></para>
<para><programlisting><codeline><highlight class="normal">Dble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_double_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>a[5]<sp/>=<sp/>{<sp/>1.,<sp/>2.,<sp/>3.,<sp/>4.,<sp/>5.};</highlight></codeline>
<codeline><highlight class="normal">insert_double_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>min<sp/>=<sp/>min_double_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>1</highlight></codeline>
<codeline><highlight class="normal">free_double_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4947" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4268" bodyend="4276" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4947" declcolumn="8"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1af3eef7302375a05b37b3ae4e0d8251a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long double</type>
        <definition>long double min_ldouble_vector</definition>
        <argsstring>(LDble *vec)</argsstring>
        <name>min_ldouble_vector</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will determine the min value in a vector data structure of type <ref refid="structLDble" kindref="compound">LDble</ref></para>
<para>/param vec A vector data structure of type <ref refid="structLDble" kindref="compound">LDble</ref></para>
<para><programlisting><codeline><highlight class="normal">LDble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ldouble_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>a[5]<sp/>=<sp/>{<sp/>1.,<sp/>2.,<sp/>3.,<sp/>4.,<sp/>5.};</highlight></codeline>
<codeline><highlight class="normal">insert_ldouble_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>min<sp/>=<sp/>min_ldouble_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">PRINT(max);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>1</highlight></codeline>
<codeline><highlight class="normal">free_ldouble_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4967" column="13" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4279" bodyend="4287" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4967" declcolumn="13"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ac3589c6090a8dc24ffe4211dbb42b15f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void range_char_vector</definition>
        <argsstring>(Char *vec, char start, char end, char delta)</argsstring>
        <name>range_char_vector</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>char</type>
          <declname>start</declname>
        </param>
        <param>
          <type>char</type>
          <declname>end</declname>
        </param>
        <param>
          <type>char</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will add a range of data points to a vector data structure that start at a user defined data point and ends at another, or the nearest data point.</para>
<para>/param vec A vector data structure of type <ref refid="structChar" kindref="compound">Char</ref> /param start The start point /param end The end point /param delta The difference between each data point</para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_char_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">range_char_vector(&amp;vec,<sp/>2,<sp/>20,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>[<sp/>2,<sp/>4,<sp/>6,<sp/>8,<sp/>10,<sp/>12,<sp/>14,<sp/>16,<sp/>18,<sp/>20<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="4991" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4292" bodyend="4299" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="4991" declcolumn="6"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="vector_8c_1ab4f076e9a6e7d0795c2c3a0216c5c97e" compoundref="vector_8c" startline="712" endline="742">push_char_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a14f0626112aa000e6739a14556f761ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void range_uchar_vector</definition>
        <argsstring>(UChar *vec, unsigned char start, unsigned char end, unsigned char delta)</argsstring>
        <name>range_uchar_vector</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>start</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>end</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will add a range of data points to a vector data structure that start at a user defined data point and ends at another, or the nearest data point.</para>
<para>/param vec A vector data structure of type <ref refid="structUChar" kindref="compound">UChar</ref> /param start The start point /param end The end point /param delta The difference between each data point</para>
<para><programlisting><codeline><highlight class="normal">UChar<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uchar_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">range_uchar_vector(&amp;vec,<sp/>2,<sp/>20,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>[<sp/>2,<sp/>4,<sp/>6,<sp/>8,<sp/>10,<sp/>12,<sp/>14,<sp/>16,<sp/>18,<sp/>20<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uchar_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5013" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4302" bodyend="4309" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5013" declcolumn="6"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="vector_8c_1acc6fd3b434ba25d3473adff60160500b" compoundref="vector_8c" startline="745" endline="775">push_uchar_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1adb305706da4585539cd057cfa0ec0e2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void range_short_vector</definition>
        <argsstring>(Short *vec, short int start, short int end, short int delta)</argsstring>
        <name>range_short_vector</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>short int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>short int</type>
          <declname>end</declname>
        </param>
        <param>
          <type>short int</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will add a range of data points to a vector data structure that start at a user defined data point and ends at another, or the nearest data point.</para>
<para>/param vec A vector data structure of type <ref refid="structShort" kindref="compound">Short</ref> /param start The start point /param end The end point /param delta The difference between each data point</para>
<para><programlisting><codeline><highlight class="normal">Short<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_short_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">range_short_vector(&amp;vec,<sp/>2,<sp/>20,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>[<sp/>2,<sp/>4,<sp/>6,<sp/>8,<sp/>10,<sp/>12,<sp/>14,<sp/>16,<sp/>18,<sp/>20<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_short_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5035" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4312" bodyend="4319" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5035" declcolumn="6"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="vector_8c_1a38068c17aa5cf7286175572d43219b8d" compoundref="vector_8c" startline="349" endline="379">push_short_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a062892c86bd6a4934d91c804684cf755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void range_ushort_vector</definition>
        <argsstring>(UShort *vec, unsigned short int start, unsigned short int end, unsigned short int delta)</argsstring>
        <name>range_ushort_vector</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned short int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>unsigned short int</type>
          <declname>end</declname>
        </param>
        <param>
          <type>unsigned short int</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will add a range of data points to a vector data structure that start at a user defined data point and ends at another, or the nearest data point.</para>
<para>/param vec A vector data structure of type <ref refid="structUShort" kindref="compound">UShort</ref> /param start The start point /param end The end point /param delta The difference between each data point</para>
<para><programlisting><codeline><highlight class="normal">UShort<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ushort_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">range_ushort_vector(&amp;vec,<sp/>2,<sp/>20,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>[<sp/>2,<sp/>4,<sp/>6,<sp/>8,<sp/>10,<sp/>12,<sp/>14,<sp/>16,<sp/>18,<sp/>20<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ushort_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5057" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4322" bodyend="4330" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5057" declcolumn="6"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="vector_8c_1a97670c026df2a05dda5b0c85ebeb4d69" compoundref="vector_8c" startline="382" endline="412">push_ushort_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a184898353e0603cd18372448c8a842e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void range_int_vector</definition>
        <argsstring>(Int *vec, int start, int end, int delta)</argsstring>
        <name>range_int_vector</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>end</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will add a range of data points to a vector data structure that start at a user defined data point and ends at another, or the nearest data point.</para>
<para>/param vec A vector data structure of type <ref refid="structInt" kindref="compound">Int</ref> /param start The start point /param end The end point /param delta The difference between each data point</para>
<para><programlisting><codeline><highlight class="normal">Int<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_int_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">range_int_vector(&amp;vec,<sp/>2,<sp/>20,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>[<sp/>2,<sp/>4,<sp/>6,<sp/>8,<sp/>10,<sp/>12,<sp/>14,<sp/>16,<sp/>18,<sp/>20<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_int_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5080" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4333" bodyend="4340" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5080" declcolumn="6"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="vector_8c_1a6baf75dc56de293f3dbdc8ac40934980" compoundref="vector_8c" startline="415" endline="445">push_int_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1adce9ffbf72bc5678dbd702bf9840f363" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void range_uint_vector</definition>
        <argsstring>(UInt *vec, unsigned int start, unsigned int end, unsigned int delta)</argsstring>
        <name>range_uint_vector</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>end</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will add a range of data points to a vector data structure that start at a user defined data point and ends at another, or the nearest data point.</para>
<para>/param vec A vector data structure of type <ref refid="structUInt" kindref="compound">UInt</ref> /param start The start point /param end The end point /param delta The difference between each data point</para>
<para><programlisting><codeline><highlight class="normal">UInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uint_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">range_uint_vector(&amp;vec,<sp/>2,<sp/>20,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>[<sp/>2,<sp/>4,<sp/>6,<sp/>8,<sp/>10,<sp/>12,<sp/>14,<sp/>16,<sp/>18,<sp/>20<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uint_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5102" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4343" bodyend="4351" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5102" declcolumn="6"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="vector_8c_1a787fc2bba6112c4ede10d0ec14ab3825" compoundref="vector_8c" startline="448" endline="478">push_uint_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1aed9932998976a7d3ce615075dd5af09b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void range_long_vector</definition>
        <argsstring>(LInt *vec, long int start, long int end, long int delta)</argsstring>
        <name>range_long_vector</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>end</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will add a range of data points to a vector data structure that start at a user defined data point and ends at another, or the nearest data point.</para>
<para>/param vec A vector data structure of type <ref refid="structLInt" kindref="compound">LInt</ref> /param start The start point /param end The end point /param delta The difference between each data point</para>
<para><programlisting><codeline><highlight class="normal">LInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_long_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">range_long_vector(&amp;vec,<sp/>2,<sp/>20,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>[<sp/>2,<sp/>4,<sp/>6,<sp/>8,<sp/>10,<sp/>12,<sp/>14,<sp/>16,<sp/>18,<sp/>20<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_long_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5124" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4354" bodyend="4361" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5124" declcolumn="6"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="vector_8c_1a6135368684b7d740482cfc775417f255" compoundref="vector_8c" startline="481" endline="511">push_long_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a4fe9caa2febfe85a1107394d8b42c348" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void range_ulong_vector</definition>
        <argsstring>(ULInt *vec, unsigned long int start, unsigned long int end, unsigned long int delta)</argsstring>
        <name>range_ulong_vector</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned long int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>unsigned long int</type>
          <declname>end</declname>
        </param>
        <param>
          <type>unsigned long int</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will add a range of data points to a vector data structure that start at a user defined data point and ends at another, or the nearest data point.</para>
<para>/param vec A vector data structure of type <ref refid="structULInt" kindref="compound">ULInt</ref> /param start The start point /param end The end point /param delta The difference between each data point</para>
<para><programlisting><codeline><highlight class="normal">ULInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ulong_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">range_ulong_vector(&amp;vec,<sp/>2,<sp/>20,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>[<sp/>2,<sp/>4,<sp/>6,<sp/>8,<sp/>10,<sp/>12,<sp/>14,<sp/>16,<sp/>18,<sp/>20<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ulong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5146" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4364" bodyend="4372" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5146" declcolumn="6"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="vector_8c_1aea5f95b56df2836ee553face60351e61" compoundref="vector_8c" startline="514" endline="544">push_ulong_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1afa81d739815cef7056167d48361e0891" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void range_llong_vector</definition>
        <argsstring>(LLInt *vec, long long int start, long long int end, long long int delta)</argsstring>
        <name>range_llong_vector</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long long int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>long long int</type>
          <declname>end</declname>
        </param>
        <param>
          <type>long long int</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will add a range of data points to a vector data structure that start at a user defined data point and ends at another, or the nearest data point.</para>
<para>/param vec A vector data structure of type <ref refid="structLLInt" kindref="compound">LLInt</ref> /param start The start point /param end The end point /param delta The difference between each data point</para>
<para><programlisting><codeline><highlight class="normal">LLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_llong_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">range_llong_vector(&amp;vec,<sp/>2,<sp/>20,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>[<sp/>2,<sp/>4,<sp/>6,<sp/>8,<sp/>10,<sp/>12,<sp/>14,<sp/>16,<sp/>18,<sp/>20<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_llong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5169" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4375" bodyend="4382" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5169" declcolumn="6"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="vector_8c_1a93f7e28f97718d9d7c5c84df61c1466c" compoundref="vector_8c" startline="547" endline="577">push_llong_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a6b8d5f1723a1e5e9a0d03da80e93b68e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void range_ullong_vector</definition>
        <argsstring>(ULLInt *vec, unsigned long long int start, unsigned long long int end, unsigned long long int delta)</argsstring>
        <name>range_ullong_vector</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned long long int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>unsigned long long int</type>
          <declname>end</declname>
        </param>
        <param>
          <type>unsigned long long int</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will add a range of data points to a vector data structure that start at a user defined data point and ends at another, or the nearest data point.</para>
<para>/param vec A vector data structure of type <ref refid="structULLInt" kindref="compound">ULLInt</ref> /param start The start point /param end The end point /param delta The difference between each data point</para>
<para><programlisting><codeline><highlight class="normal">ULLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ullong_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">range_ullong_vector(&amp;vec,<sp/>2,<sp/>20,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>[<sp/>2,<sp/>4,<sp/>6,<sp/>8,<sp/>10,<sp/>12,<sp/>14,<sp/>16,<sp/>18,<sp/>20<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ullong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5192" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4385" bodyend="4393" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5192" declcolumn="6"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="vector_8c_1a3478a298e62d85cb93f11a78f64d6f80" compoundref="vector_8c" startline="580" endline="610">push_ullong_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a85d0392c18b7db31c0a14bc2aa13448c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void range_float_vector</definition>
        <argsstring>(Flt *vec, float start, float end, float delta)</argsstring>
        <name>range_float_vector</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>float</type>
          <declname>start</declname>
        </param>
        <param>
          <type>float</type>
          <declname>end</declname>
        </param>
        <param>
          <type>float</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will add a range of data points to a vector data structure that start at a user defined data point and ends at another, or the nearest data point.</para>
<para>/param vec A vector data structure of type <ref refid="structFlt" kindref="compound">Flt</ref> /param start The start point /param end The end point /param delta The difference between each data point</para>
<para><programlisting><codeline><highlight class="normal">Flt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_float_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">range_float_vector(&amp;vec,<sp/>2,<sp/>20,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>[<sp/>2,<sp/>4,<sp/>6,<sp/>8,<sp/>10,<sp/>12,<sp/>14,<sp/>16,<sp/>18,<sp/>20<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_float_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5216" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4396" bodyend="4403" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5216" declcolumn="6"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="vector_8c_1a31e02f437f4f9f43d1126e017ae1cac3" compoundref="vector_8c" startline="613" endline="643">push_float_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a636afa2f2e2af7dbbd34b7cb42d11163" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void range_double_vector</definition>
        <argsstring>(Dble *vec, double start, double end, double delta)</argsstring>
        <name>range_double_vector</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>double</type>
          <declname>start</declname>
        </param>
        <param>
          <type>double</type>
          <declname>end</declname>
        </param>
        <param>
          <type>double</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will add a range of data points to a vector data structure that start at a user defined data point and ends at another, or the nearest data point.</para>
<para>/param vec A vector data structure of type <ref refid="structDble" kindref="compound">Dble</ref> /param start The start point /param end The end point /param delta The difference between each data point</para>
<para><programlisting><codeline><highlight class="normal">Dble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_double_vectoe(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">range_double_vector(&amp;vec,<sp/>2,<sp/>20,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>[<sp/>2,<sp/>4,<sp/>6,<sp/>8,<sp/>10,<sp/>12,<sp/>14,<sp/>16,<sp/>18,<sp/>20<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_double_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5238" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4406" bodyend="4414" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5238" declcolumn="6"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="vector_8c_1ab312c467d82a0fccc66cbb89a6b8de5c" compoundref="vector_8c" startline="646" endline="676">push_double_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ae5505a9a69a6701bcafa4b92eb06055f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void range_ldouble_vector</definition>
        <argsstring>(LDble *vec, long double start, long double end, long double delta)</argsstring>
        <name>range_ldouble_vector</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>start</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>end</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will add a range of data points to a vector data structure that start at a user defined data point and ends at another, or the nearest data point.</para>
<para>/param vec A vector data structure of type <ref refid="structLDble" kindref="compound">LDble</ref> /param start The start point /param end The end point /param delta The difference between each data point</para>
<para><programlisting><codeline><highlight class="normal">LDble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ldouble_vector(&amp;vec,<sp/>10)</highlight></codeline>
<codeline><highlight class="normal">range_ldouble_vector(&amp;vec,<sp/>2,<sp/>20,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>[<sp/>2,<sp/>4,<sp/>6,<sp/>8,<sp/>10,<sp/>12,<sp/>14,<sp/>16,<sp/>18,<sp/>20<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ldouble_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5260" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4417" bodyend="4425" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5260" declcolumn="7"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="vector_8c_1ad001560a2793c40efb1c64532cefe2e2" compoundref="vector_8c" startline="679" endline="709">push_ldouble_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ab88c9075f7ac94dd8656a8eec4a14a94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structShort" kindref="compound">Short</ref></type>
        <definition>Short copy_short_vector</definition>
        <argsstring>(Short *vec)</argsstring>
        <name>copy_short_vector</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will create and return a deep copy of an <ref refid="structShort" kindref="compound">Short</ref> struct</para>
<para>/param vec A vector struct of type <ref refid="structShort" kindref="compound">Short</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5270" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4477" bodyend="4482" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5270" declcolumn="7"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
        <references refid="vector_8c_1a749211e8a46a8b2297b3c6ebb78aed0e" compoundref="vector_8c" startline="18" endline="30">init_short_vector</references>
        <references refid="vector_8c_1a2ed595a869e30a4c834c1d2cf5b934ee" compoundref="vector_8c" startline="833" endline="866">insert_short_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1af70602cee86af9597513bc67b2878244" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structUShort" kindref="compound">UShort</ref></type>
        <definition>UShort copy_ushort_vector</definition>
        <argsstring>(UShort *vec)</argsstring>
        <name>copy_ushort_vector</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will create and return a deep copy of an <ref refid="structUShort" kindref="compound">UShort</ref> struct</para>
<para>/param vec A vector struct of type <ref refid="structUShort" kindref="compound">UShort</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5278" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4485" bodyend="4490" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5278" declcolumn="8"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
        <references refid="vector_8c_1aa63398bdb55f97b891b93404a89de14d" compoundref="vector_8c" startline="33" endline="45">init_ushort_vector</references>
        <references refid="vector_8c_1aa8495c3a316b6d93c8697d194c86fc2b" compoundref="vector_8c" startline="869" endline="902">insert_ushort_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a5fd73621c9da27949814495f00a3296f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structInt" kindref="compound">Int</ref></type>
        <definition>Int copy_int_vector</definition>
        <argsstring>(Int *vec)</argsstring>
        <name>copy_int_vector</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will create and return a deep copy of an <ref refid="structInt" kindref="compound">Int</ref> struct</para>
<para>/param vec A vector struct of type <ref refid="structInt" kindref="compound">Int</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5286" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4493" bodyend="4498" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5286" declcolumn="5"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
        <references refid="vector_8c_1a9fdb6c5fdd9f0d5a3bfb751f9e82968e" compoundref="vector_8c" startline="48" endline="60">init_int_vector</references>
        <references refid="vector_8c_1a0acf8b86d4a95be517c7af80f8eff4ac" compoundref="vector_8c" startline="905" endline="938">insert_int_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a6bf7c67135858a07103fff23436b7d77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structUInt" kindref="compound">UInt</ref></type>
        <definition>UInt copy_uint_vector</definition>
        <argsstring>(UInt *vec)</argsstring>
        <name>copy_uint_vector</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will create and return a deep copy of an <ref refid="structUInt" kindref="compound">UInt</ref> struct</para>
<para>/param vec A vector struct of type <ref refid="structUInt" kindref="compound">UInt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5294" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4501" bodyend="4506" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5294" declcolumn="6"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
        <references refid="vector_8c_1a9d8eb1d9ce65365d7b044fe684387a3f" compoundref="vector_8c" startline="63" endline="75">init_uint_vector</references>
        <references refid="vector_8c_1ad78d40537dece17df4f506fd6ba7dc34" compoundref="vector_8c" startline="941" endline="974">insert_uint_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1abc614587816c37e5dfd70c2a832da165" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structLInt" kindref="compound">LInt</ref></type>
        <definition>LInt copy_long_vector</definition>
        <argsstring>(LInt *vec)</argsstring>
        <name>copy_long_vector</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will create and return a deep copy of an <ref refid="structLInt" kindref="compound">LInt</ref> struct</para>
<para>/param vec A vector struct of type <ref refid="structLInt" kindref="compound">LInt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5302" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4509" bodyend="4514" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5302" declcolumn="6"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
        <references refid="vector_8c_1ac59c5fed0f4cd6b9aaf4c87b7a997bd3" compoundref="vector_8c" startline="78" endline="90">init_long_vector</references>
        <references refid="vector_8c_1ab5d840518e5e7bbd9ed243681b7124f7" compoundref="vector_8c" startline="977" endline="1010">insert_long_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a31f85f1454385a608eebc7d150417b7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structULInt" kindref="compound">ULInt</ref></type>
        <definition>ULInt copy_ulong_vector</definition>
        <argsstring>(ULInt *vec)</argsstring>
        <name>copy_ulong_vector</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will create and return a deep copy of an <ref refid="structULInt" kindref="compound">ULInt</ref> struct</para>
<para>/param vec A vector struct of type <ref refid="structULInt" kindref="compound">ULInt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5310" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4517" bodyend="4522" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5310" declcolumn="7"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
        <references refid="vector_8c_1af08098b392c0ff01db799bff9c83a521" compoundref="vector_8c" startline="93" endline="105">init_ulong_vector</references>
        <references refid="vector_8c_1aa419c32bb276bfe866787e1744669b94" compoundref="vector_8c" startline="1013" endline="1046">insert_ulong_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a2a8c6a77d383c5251686fc600c829005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structLLInt" kindref="compound">LLInt</ref></type>
        <definition>LLInt copy_llong_vector</definition>
        <argsstring>(LLInt *vec)</argsstring>
        <name>copy_llong_vector</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will create and return a deep copy of an <ref refid="structLLInt" kindref="compound">LLInt</ref> struct</para>
<para>/param vec A vector struct of type <ref refid="structLLInt" kindref="compound">LLInt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5318" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4525" bodyend="4530" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5318" declcolumn="7"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
        <references refid="vector_8c_1a65eda538d3c07a8beb1475c1a214ff67" compoundref="vector_8c" startline="107" endline="119">init_llong_vector</references>
        <references refid="vector_8c_1a9817d90055331624db7529c5d74a80ad" compoundref="vector_8c" startline="1049" endline="1082">insert_llong_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1abe7076983c8f386b305b615137dcd249" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structULLInt" kindref="compound">ULLInt</ref></type>
        <definition>ULLInt copy_ullong_vector</definition>
        <argsstring>(ULLInt *vec)</argsstring>
        <name>copy_ullong_vector</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will create and return a deep copy of an <ref refid="structULLInt" kindref="compound">ULLInt</ref> struct</para>
<para>/param vec A vector struct of type <ref refid="structULLInt" kindref="compound">ULLInt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5326" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4533" bodyend="4538" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5326" declcolumn="8"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
        <references refid="vector_8c_1ab05d31d34c87d8d6cd76f48539bf367f" compoundref="vector_8c" startline="122" endline="134">init_ullong_vector</references>
        <references refid="vector_8c_1afccda80cf8e96d76846df29a256f6974" compoundref="vector_8c" startline="1085" endline="1118">insert_ullong_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a440353dc4ac989fb88b34e7f5649dd05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structFlt" kindref="compound">Flt</ref></type>
        <definition>Flt copy_float_vector</definition>
        <argsstring>(Flt *vec)</argsstring>
        <name>copy_float_vector</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will create and return a deep copy of an <ref refid="structFlt" kindref="compound">Flt</ref> struct</para>
<para>/param vec A vector struct of type <ref refid="structFlt" kindref="compound">Flt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5334" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4541" bodyend="4546" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5334" declcolumn="5"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
        <references refid="vector_8c_1a92bba70874a1570bd9c87a2a7385af35" compoundref="vector_8c" startline="137" endline="149">init_float_vector</references>
        <references refid="vector_8c_1a17ee89c38df38d9d1d5b0cb2e33266d1" compoundref="vector_8c" startline="1121" endline="1154">insert_float_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a2d51a8a92a5c0e73345ade59b126ff35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDble" kindref="compound">Dble</ref></type>
        <definition>Dble copy_double_vector</definition>
        <argsstring>(Dble *vec)</argsstring>
        <name>copy_double_vector</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will create and return a deep copy of an <ref refid="structDble" kindref="compound">Dble</ref> struct</para>
<para>/param vec A vector struct of type <ref refid="structDble" kindref="compound">Dble</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5342" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4549" bodyend="4554" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5342" declcolumn="6"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
        <references refid="vector_8c_1a2c0735f69da8e40535b5ecceace1a399" compoundref="vector_8c" startline="152" endline="164">init_double_vector</references>
        <references refid="vector_8c_1af1e86e2b45b0339cc18ba5b35bf01132" compoundref="vector_8c" startline="1157" endline="1190">insert_double_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a3fa3120b9c06e25fc840f90c7e10c5a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structLDble" kindref="compound">LDble</ref></type>
        <definition>LDble copy_ldouble_vector</definition>
        <argsstring>(LDble *vec)</argsstring>
        <name>copy_ldouble_vector</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will create and return a deep copy of an <ref refid="structLDble" kindref="compound">LDble</ref> struct</para>
<para>/param vec A vector struct of type <ref refid="structLDble" kindref="compound">LDble</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5350" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4557" bodyend="4562" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5350" declcolumn="7"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
        <references refid="vector_8c_1a79d9f9d1d1cb31d09620bc5cdc73e94e" compoundref="vector_8c" startline="167" endline="179">init_ldouble_vector</references>
        <references refid="vector_8c_1a0ec3e3b802f62c5f9cdd9b7d197bd4a1" compoundref="vector_8c" startline="1193" endline="1226">insert_ldouble_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a430a540aea6caac8002281b9a2ddbf7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structChar" kindref="compound">Char</ref></type>
        <definition>Char copy_char_vector</definition>
        <argsstring>(Char *vec)</argsstring>
        <name>copy_char_vector</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will create and return a deep copy of an <ref refid="structChar" kindref="compound">Char</ref> struct</para>
<para>/param vec A vector struct of type <ref refid="structChar" kindref="compound">Char</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5358" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4565" bodyend="4570" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5358" declcolumn="6"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
        <references refid="vector_8c_1aecde718777430d31ec254f8a4f40cce0" compoundref="vector_8c" startline="182" endline="194">init_char_vector</references>
        <references refid="vector_8c_1a9e9db9d87d5a9f3bb6dae1ba5668ef12" compoundref="vector_8c" startline="1229" endline="1262">insert_char_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ac3e7f4298d195586bfc0cf8b0fc1a053" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structUChar" kindref="compound">UChar</ref></type>
        <definition>UChar copy_uchar_vector</definition>
        <argsstring>(UChar *vec)</argsstring>
        <name>copy_uchar_vector</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will create and return a deep copy of an <ref refid="structUChar" kindref="compound">UChar</ref> struct</para>
<para>/param vec A vector struct of type <ref refid="structUChar" kindref="compound">UChar</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5366" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4573" bodyend="4578" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5366" declcolumn="7"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
        <references refid="vector_8c_1a9289ec52674f95ebf45ac81b70dfdc67" compoundref="vector_8c" startline="197" endline="209">init_uchar_vector</references>
        <references refid="vector_8c_1ae5b1c45f4d2083c6d87f217646609a2d" compoundref="vector_8c" startline="1265" endline="1298">insert_uchar_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a2e6c2d82128d66d5fe6800ee6ad9d277" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structBool" kindref="compound">Bool</ref></type>
        <definition>Bool copy_bool_vector</definition>
        <argsstring>(Bool *vec)</argsstring>
        <name>copy_bool_vector</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will create and return a deep copy of an <ref refid="structBool" kindref="compound">Bool</ref> struct</para>
<para>/param vec A vector struct of type <ref refid="structBool" kindref="compound">Bool</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5374" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4581" bodyend="4586" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5374" declcolumn="6"/>
        <references refid="structBool_1a5445f6ef94d239208dc797c289fded75" compoundref="vector_8h" startline="90">Bool::active_length</references>
        <references refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" compoundref="vector_8h" startline="90">Bool::array</references>
        <references refid="vector_8c_1a2e1ea608c0b9b0768ba61facb8df913f" compoundref="vector_8c" startline="212" endline="224">init_bool_vector</references>
        <references refid="vector_8c_1ab344e3b36aa397f037cb2c573e1d3aff" compoundref="vector_8c" startline="1301" endline="1334">insert_bool_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a2cb84d3851679202a04f76066bc80a6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structString" kindref="compound">String</ref></type>
        <definition>String copy_string_vector</definition>
        <argsstring>(String *vec)</argsstring>
        <name>copy_string_vector</name>
        <param>
          <type><ref refid="structString" kindref="compound">String</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will create and return a deep copy of an <ref refid="structString" kindref="compound">String</ref> struct</para>
<para>/param vec A vector struct of type <ref refid="structString" kindref="compound">String</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5382" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4589" bodyend="4596" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5382" declcolumn="8"/>
        <references refid="structString_1a706ffaf2f520d46074dd99e7896d6673" compoundref="vector_8h" startline="97">String::active_length</references>
        <references refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" compoundref="vector_8h" startline="96">String::array</references>
        <references refid="vector_8c_1ad5c4c9d8676c13f1f381b0b6c1119c4d" compoundref="vector_8c" startline="227" endline="231">init_string_vector</references>
        <references refid="vector_8c_1a078616c26d55c1ddb2ec4c551298a4f8" compoundref="vector_8c" startline="811" endline="829">push_string_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a88653cd8b508937a9efe184fe04ed2fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>short</type>
        <definition>short short_vector_data</definition>
        <argsstring>(Short *vec, size_t index)</argsstring>
        <name>short_vector_data</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will retireve the data from a user specified index in a vector or array of type <ref refid="structShort" kindref="compound">Short</ref></para>
<para>/param vec A linked list struct of type <ref refid="structShort" kindref="compound">Short</ref> /param index The index from where data will be retrieved /return dat An unsigned bool data point</para>
<para><programlisting><codeline><highlight class="normal">Short<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_short_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">short<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_short_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">PRINT(short_vector_data(&amp;vec,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3</highlight></codeline>
<codeline><highlight class="normal">free_short_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5405" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4430" bodyend="4430" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5405" declcolumn="7"/>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ae64308782a33a82a606c6463d0511a19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned short int</type>
        <definition>unsigned short int ushort_vector_data</definition>
        <argsstring>(UShort *vec, size_t index)</argsstring>
        <name>ushort_vector_data</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will retireve the data from a user specified index in a vector or array of type <ref refid="structUShort" kindref="compound">UShort</ref></para>
<para>/param vec A linked list struct of type <ref refid="structUShort" kindref="compound">UShort</ref> /param index The index from where data will be retrieved /return dat An unsigned bool data point</para>
<para><programlisting><codeline><highlight class="normal">UShort<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ushort_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>short<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ushort_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">PRINT(ushort_vector_data(&amp;vec,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3</highlight></codeline>
<codeline><highlight class="normal">free_ushort_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5426" column="20" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4433" bodyend="4433" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5426" declcolumn="20"/>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a3804e8951d833849ea5c7333b832bf1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int int_vector_data</definition>
        <argsstring>(Int *vec, size_t index)</argsstring>
        <name>int_vector_data</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will retireve the data from a user specified index in a vector or array of type <ref refid="structInt" kindref="compound">Int</ref></para>
<para>/param vec A linked list struct of type <ref refid="structInt" kindref="compound">Int</ref> /param index The index from where data will be retrieved /return dat An unsigned bool data point</para>
<para><programlisting><codeline><highlight class="normal">Int<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_int_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_int_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">PRINT(int_vector_data(&amp;vec,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3</highlight></codeline>
<codeline><highlight class="normal">free_int_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5447" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4436" bodyend="4436" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5447" declcolumn="5"/>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ac6172e0e9433875fa34c0faaf8647c6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int uint_vector_data</definition>
        <argsstring>(UInt *vec, size_t index)</argsstring>
        <name>uint_vector_data</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will retireve the data from a user specified index in a vector or array of type <ref refid="structUInt" kindref="compound">UInt</ref></para>
<para>/param vec A linked list struct of type <ref refid="structUInt" kindref="compound">UInt</ref> /param index The index from where data will be retrieved /return dat An unsigned bool data point</para>
<para><programlisting><codeline><highlight class="normal">UInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uint_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_uint_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">PRINT(uint_vector_data(&amp;vec,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3</highlight></codeline>
<codeline><highlight class="normal">free_uint_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5468" column="14" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4439" bodyend="4439" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5468" declcolumn="14"/>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a78c08d70ca4769c5fa2e4d87bcd35f4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int long_vector_data</definition>
        <argsstring>(LInt *vec, size_t index)</argsstring>
        <name>long_vector_data</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will retireve the data from a user specified index in a vector or array of type <ref refid="structLInt" kindref="compound">LInt</ref></para>
<para>/param vec A linked list struct of type <ref refid="structLInt" kindref="compound">LInt</ref> /param index The index from where data will be retrieved /return dat An unsigned bool data point</para>
<para><programlisting><codeline><highlight class="normal">LInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_long_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_long_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">PRINT(long_vector_data(&amp;vec,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3</highlight></codeline>
<codeline><highlight class="normal">free_long_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5489" column="10" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4442" bodyend="4442" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5489" declcolumn="10"/>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ae7aed886f0e33fc044d7d7bafcea088b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long int</type>
        <definition>unsigned long int ulong_vector_data</definition>
        <argsstring>(ULInt *vec, size_t index)</argsstring>
        <name>ulong_vector_data</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will retireve the data from a user specified index in a vector or array of type <ref refid="structULInt" kindref="compound">ULInt</ref></para>
<para>/param vec A linked list struct of type <ref refid="structULInt" kindref="compound">ULInt</ref> /param index The index from where data will be retrieved /return dat An unsigned bool data point</para>
<para><programlisting><codeline><highlight class="normal">ULInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ulong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ulong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">PRINT(ulong_vector_data(&amp;vec,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3</highlight></codeline>
<codeline><highlight class="normal">free_ulong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5510" column="19" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4445" bodyend="4445" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5510" declcolumn="19"/>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ac368c61f3aceee6f22f7fdfd9c6866bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long long int</type>
        <definition>long long int llong_vector_data</definition>
        <argsstring>(LLInt *vec, size_t index)</argsstring>
        <name>llong_vector_data</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will retireve the data from a user specified index in a vector or array of type <ref refid="structLLInt" kindref="compound">LLInt</ref></para>
<para>/param vec A linked list struct of type <ref refid="structLLInt" kindref="compound">LLInt</ref> /param index The index from where data will be retrieved /return dat An unsigned bool data point</para>
<para><programlisting><codeline><highlight class="normal">LLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_llong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_llong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">PRINT(llong_vector_data(&amp;vec,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3</highlight></codeline>
<codeline><highlight class="normal">free_llong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5531" column="15" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4448" bodyend="4448" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5531" declcolumn="15"/>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a401a9795be5292f8c20fb032218c4b1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long long int</type>
        <definition>unsigned long long int ullong_vector_data</definition>
        <argsstring>(ULLInt *vec, size_t index)</argsstring>
        <name>ullong_vector_data</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will retireve the data from a user specified index in a vector or array of type <ref refid="structULLInt" kindref="compound">ULLInt</ref></para>
<para>/param vec A linked list struct of type <ref refid="structULLInt" kindref="compound">ULLInt</ref> /param index The index from where data will be retrieved /return dat An unsigned bool data point</para>
<para><programlisting><codeline><highlight class="normal">ULLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ullong_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ullong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">PRINT(ullong_vector_data(&amp;vec,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3</highlight></codeline>
<codeline><highlight class="normal">free_ullong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5552" column="24" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4451" bodyend="4451" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5552" declcolumn="24"/>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a84fbf5e526da1adcad6858a643df2462" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float float_vector_data</definition>
        <argsstring>(Flt *vec, size_t index)</argsstring>
        <name>float_vector_data</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will retireve the data from a user specified index in a vector or array of type <ref refid="structFlt" kindref="compound">Flt</ref></para>
<para>/param vec A linked list struct of type <ref refid="structFlt" kindref="compound">Flt</ref> /param index The index from where data will be retrieved /return dat An unsigned bool data point</para>
<para><programlisting><codeline><highlight class="normal">Flt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_float_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_float_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">PRINT(float_vector_data(&amp;vec,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.000</highlight></codeline>
<codeline><highlight class="normal">free_float_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5573" column="7" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4454" bodyend="4454" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5573" declcolumn="7"/>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a1c5e11f6eff0482afd6666532c1c150f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double double_vector_data</definition>
        <argsstring>(Dble *vec, size_t index)</argsstring>
        <name>double_vector_data</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will retireve the data from a user specified index in a vector or array of type <ref refid="structDble" kindref="compound">Dble</ref></para>
<para>/param vec A linked list struct of type <ref refid="structDble" kindref="compound">Dble</ref> /param index The index from where data will be retrieved /return dat An unsigned bool data point</para>
<para><programlisting><codeline><highlight class="normal">Dble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_double_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_double_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">PRINT(double_vector_data(&amp;vec,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.000</highlight></codeline>
<codeline><highlight class="normal">free_double_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5594" column="8" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4457" bodyend="4457" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5594" declcolumn="8"/>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a4ff7d557d90612b873092b0b9dd82b15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long double</type>
        <definition>long double ldouble_vector_data</definition>
        <argsstring>(LDble *vec, size_t index)</argsstring>
        <name>ldouble_vector_data</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will retireve the data from a user specified index in a vector or array of type <ref refid="structLDble" kindref="compound">LDble</ref></para>
<para>/param vec A linked list struct of type <ref refid="structLDble" kindref="compound">LDble</ref> /param index The index from where data will be retrieved /return dat An unsigned bool data point</para>
<para><programlisting><codeline><highlight class="normal">LDble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ldouble_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>double<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal">insert_ldouble_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">PRINT(ldouble_vector_data(&amp;vec,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>3.000</highlight></codeline>
<codeline><highlight class="normal">free_ldouble_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5615" column="13" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4460" bodyend="4460" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5615" declcolumn="13"/>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1aa99d3902c062bd4e5e31b85ccd8867bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char char_vector_data</definition>
        <argsstring>(Char *vec, size_t index)</argsstring>
        <name>char_vector_data</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will retireve the data from a user specified index in a vector or array of type <ref refid="structChar" kindref="compound">Char</ref></para>
<para>/param vec A linked list struct of type <ref refid="structChar" kindref="compound">Char</ref> /param index The index from where data will be retrieved /return dat An unsigned bool data point</para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_char_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">char<sp/>a[5]<sp/>=<sp/>{&apos;a&apos;,<sp/>&apos;b&apos;,<sp/>&apos;c&apos;,<sp/>&apos;d&apos;,<sp/>&apos;e&apos;};</highlight></codeline>
<codeline><highlight class="normal">insert_char_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">PRINT(char_vector_data(&amp;vec,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>c</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5636" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4463" bodyend="4463" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5636" declcolumn="6"/>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a5ec8248dfe94805dce29484cf23b9db5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char</type>
        <definition>unsigned char uchar_vector_data</definition>
        <argsstring>(UChar *vec, size_t index)</argsstring>
        <name>uchar_vector_data</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will retireve the data from a user specified index in a vector or array of type <ref refid="structUChar" kindref="compound">UChar</ref></para>
<para>/param vec A linked list struct of type <ref refid="structUChar" kindref="compound">UChar</ref> /param index The index from where data will be retrieved /return dat An unsigned bool data point</para>
<para><programlisting><codeline><highlight class="normal">UChar<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uchar_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>char<sp/>a[5]<sp/>=<sp/>{&apos;a&apos;,<sp/>&apos;b&apos;,<sp/>&apos;c&apos;,<sp/>&apos;d&apos;,<sp/>&apos;e&apos;};</highlight></codeline>
<codeline><highlight class="normal">insert_uchar_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">PRINT(uchar_vector_data(&amp;vec,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>c</highlight></codeline>
<codeline><highlight class="normal">free_uchar_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5657" column="15" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4466" bodyend="4466" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5657" declcolumn="15"/>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ab8ec8940661d127593fab26f02d3961a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bool_vector_data</definition>
        <argsstring>(Bool *vec, size_t index)</argsstring>
        <name>bool_vector_data</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will retireve the data from a user specified index in a vector or array of type <ref refid="structBool" kindref="compound">Bool</ref></para>
<para>/param vec A linked list struct of type <ref refid="structBool" kindref="compound">Bool</ref> /param index The index from where data will be retrieved /return dat An unsigned bool data point</para>
<para><programlisting><codeline><highlight class="normal">Bool<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_bool_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>a[5]<sp/>=<sp/>{true,<sp/>true,<sp/>false,<sp/>false,<sp/>true};</highlight></codeline>
<codeline><highlight class="normal">insert_bool_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">PRINT(bool_vector_data(&amp;vec,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>false</highlight></codeline>
<codeline><highlight class="normal">free_bool_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5678" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4469" bodyend="4469" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5678" declcolumn="6"/>
        <references refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" compoundref="vector_8h" startline="90">Bool::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a1cb0a8bfe346307c5d842d15ffacbc0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * string_vector_data</definition>
        <argsstring>(String *vec, size_t index)</argsstring>
        <name>string_vector_data</name>
        <param>
          <type><ref refid="structString" kindref="compound">String</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will retireve the data from a user specified index in a vector or array of type <ref refid="structString" kindref="compound">String</ref></para>
<para>/param vec A linked list struct of type <ref refid="structString" kindref="compound">String</ref> /param index The index from where data will be retrieved /return dat An unsigned bool data point</para>
<para><programlisting><codeline><highlight class="normal">String<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_string_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(&amp;vec,<sp/>&quot;One&quot;,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(&amp;vec,<sp/>&quot;Two&quot;,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(&amp;vec,<sp/>&quot;Three&quot;,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(string_vector_data(&amp;vec,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>Three</highlight></codeline>
<codeline><highlight class="normal">free_string_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5700" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4472" bodyend="4472" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5700" declcolumn="6"/>
        <references refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" compoundref="vector_8h" startline="96">String::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1aeec337d3614f9c62cd652fee528e8f10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trim_short_vector</definition>
        <argsstring>(Short *vec)</argsstring>
        <name>trim_short_vector</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will resize the memory allocated to a dynamically allocated vector to the minimum necessary size.</para>
<para>/param vec A vector struct of type <ref refid="structShort" kindref="compound">Short</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5711" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4601" bodyend="4610" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5711" declcolumn="6"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1af0b6f4e61e69b8a2f74d42b09b421d88" compoundref="vector_8h" startline="77">Short::allocated_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a394639166d53eacb53725cf548f596db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trim_ushort_vector</definition>
        <argsstring>(UShort *vec)</argsstring>
        <name>trim_ushort_vector</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will resize the memory allocated to a dynamically allocated vector to the minimum necessary size.</para>
<para>/param vec A vector struct of type <ref refid="structUShort" kindref="compound">UShort</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5720" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4613" bodyend="4622" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5720" declcolumn="6"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a0ef4541f3fd3fcee1c0f5809341c84d6" compoundref="vector_8h" startline="78">UShort::allocated_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a1365d9e27b0080e8e48d9809987e0824" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trim_int_vector</definition>
        <argsstring>(Int *vec)</argsstring>
        <name>trim_int_vector</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will resize the memory allocated to a dynamically allocated vector to the minimum necessary size.</para>
<para>/param vec A vector struct of type <ref refid="structInt" kindref="compound">Int</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5729" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4625" bodyend="4634" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5729" declcolumn="6"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a63bea8755b3ce6be7e83970b9ea3bd68" compoundref="vector_8h" startline="79">Int::allocated_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1aafc05a4201bf2e5129655a7d4db8819c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trim_uint_vector</definition>
        <argsstring>(UInt *vec)</argsstring>
        <name>trim_uint_vector</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will resize the memory allocated to a dynamically allocated vector to the minimum necessary size.</para>
<para>/param vec A vector struct of type <ref refid="structUInt" kindref="compound">UInt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5738" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4637" bodyend="4646" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5738" declcolumn="6"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a05b28efaec93c388e8685403f57a07ce" compoundref="vector_8h" startline="80">UInt::allocated_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a8e0993c9b72acdbb4eec8bdea1687fd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trim_long_vector</definition>
        <argsstring>(LInt *vec)</argsstring>
        <name>trim_long_vector</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will resize the memory allocated to a dynamically allocated vector to the minimum necessary size.</para>
<para>/param vec A vector struct of type <ref refid="structLInt" kindref="compound">LInt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5747" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4649" bodyend="4658" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5747" declcolumn="6"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a21eec79c847025348ad0082aab6dee52" compoundref="vector_8h" startline="81">LInt::allocated_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a2b44394f88268b15dfaf3640cb70f42f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trim_ulong_vector</definition>
        <argsstring>(ULInt *vec)</argsstring>
        <name>trim_ulong_vector</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will resize the memory allocated to a dynamically allocated vector to the minimum necessary size.</para>
<para>/param vec A vector struct of type <ref refid="structULInt" kindref="compound">ULInt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5756" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4661" bodyend="4670" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5756" declcolumn="6"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1acf325510e03976f12c116ad68c4998ec" compoundref="vector_8h" startline="82">ULInt::allocated_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ad500a258d2da444ab4d9a0315a241ab9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trim_llong_vector</definition>
        <argsstring>(LLInt *vec)</argsstring>
        <name>trim_llong_vector</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will resize the memory allocated to a dynamically allocated vector to the minimum necessary size.</para>
<para>/param vec A vector struct of type <ref refid="structLLInt" kindref="compound">LLInt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5765" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4673" bodyend="4682" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5765" declcolumn="6"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1a967c631e7b8192f0016845623ae04759" compoundref="vector_8h" startline="83">LLInt::allocated_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1aa2e26e5c689daa0f13844939ead1e484" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trim_ullong_vector</definition>
        <argsstring>(ULLInt *vec)</argsstring>
        <name>trim_ullong_vector</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will resize the memory allocated to a dynamically allocated vector to the minimum necessary size.</para>
<para>/param vec A vector struct of type <ref refid="structULLInt" kindref="compound">ULLInt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5774" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4685" bodyend="4694" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5774" declcolumn="6"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1ac6210c003919694e4fccfc5885c8fcb4" compoundref="vector_8h" startline="84">ULLInt::allocated_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a78d86f1a5dc7e8f980fecfb2f8d12395" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trim_float_vector</definition>
        <argsstring>(Flt *vec)</argsstring>
        <name>trim_float_vector</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will resize the memory allocated to a dynamically allocated vector to the minimum necessary size.</para>
<para>/param vec A vector struct of type <ref refid="structFlt" kindref="compound">Flt</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5783" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4697" bodyend="4706" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5783" declcolumn="6"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a917603eeaae1fb22accbfc8d9252a389" compoundref="vector_8h" startline="85">Flt::allocated_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a4a91fca62c49f8628e3efdc3713be344" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trim_double_vector</definition>
        <argsstring>(Dble *vec)</argsstring>
        <name>trim_double_vector</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will resize the memory allocated to a dynamically allocated vector to the minimum necessary size.</para>
<para>/param vec A vector struct of type <ref refid="structDble" kindref="compound">Dble</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5792" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4709" bodyend="4718" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5792" declcolumn="6"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a83cb29dfe09183032473cc7ffe005f5d" compoundref="vector_8h" startline="86">Dble::allocated_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a7a50f85d6a874afbfdf345ba35b8a62e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trim_ldouble_vector</definition>
        <argsstring>(LDble *vec)</argsstring>
        <name>trim_ldouble_vector</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will resize the memory allocated to a dynamically allocated vector to the minimum necessary size.</para>
<para>/param vec A vector struct of type <ref refid="structLDble" kindref="compound">LDble</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5801" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4721" bodyend="4730" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5801" declcolumn="6"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a1f0f3fd968cab1acdebf0d43f632633f" compoundref="vector_8h" startline="87">LDble::allocated_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a4e9cace11cfb849b013d15d09053b0bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trim_char_vector</definition>
        <argsstring>(Char *vec)</argsstring>
        <name>trim_char_vector</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will resize the memory allocated to a dynamically allocated vector to the minimum necessary size.</para>
<para>/param vec A vector struct of type <ref refid="structChar" kindref="compound">Char</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5810" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4733" bodyend="4742" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5810" declcolumn="6"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1ab59977640c7539e5ae251af86d445257" compoundref="vector_8h" startline="88">Char::allocated_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a03a2814037d5194b5c291edca0155ae9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trim_uchar_vector</definition>
        <argsstring>(UChar *vec)</argsstring>
        <name>trim_uchar_vector</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will resize the memory allocated to a dynamically allocated vector to the minimum necessary size.</para>
<para>/param vec A vector struct of type <ref refid="structUChar" kindref="compound">UChar</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5819" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4745" bodyend="4754" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5819" declcolumn="6"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="structUChar_1a69ec79fc44d9f3b1455705e24a819f4b" compoundref="vector_8h" startline="89">UChar::allocated_length</references>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ae838be1f19558e27f1c9ee40b7f0f368" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trim_bool_vector</definition>
        <argsstring>(Bool *vec)</argsstring>
        <name>trim_bool_vector</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will resize the memory allocated to a dynamically allocated vector to the minimum necessary size.</para>
<para>/param vec A vector struct of type <ref refid="structBool" kindref="compound">Bool</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5828" column="6" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4757" bodyend="4766" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5828" declcolumn="6"/>
        <references refid="structBool_1a5445f6ef94d239208dc797c289fded75" compoundref="vector_8h" startline="90">Bool::active_length</references>
        <references refid="structBool_1a4a353f55a013f72befc666e8d0708212" compoundref="vector_8h" startline="90">Bool::allocated_length</references>
        <references refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" compoundref="vector_8h" startline="90">Bool::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ab1de3c266f8b9ed02a1d6ce573da1f9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int replace_short_vector_index</definition>
        <argsstring>(Short *vec, short int new_value, size_t index)</argsstring>
        <name>replace_short_vector_index</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>short int</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace the value of a vector or array at a user specified index. If the user specifies an index that is out of bounds, the function will return -1, or 1 if successfull.</para>
<para>/param vec A vector or array of type <ref refid="structShort" kindref="compound">Short</ref> /param new_value The replacement value of type short int /param index The index where a value will be replaced</para>
<para><programlisting><codeline><highlight class="normal">Short<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_short_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">short<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_short_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">replace_short_vector_index(&amp;vec,<sp/>10,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>10,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_short_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5875" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4771" bodyend="4778" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5875" declcolumn="5"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="structShort_1a04935e9b7f598fb961b481224a73351e" compoundref="vector_8h" startline="77">Short::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a7bcc2cf2fbaf836342d35f0afa29eb74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int replace_ushort_vector_index</definition>
        <argsstring>(UShort *vec, unsigned short int new_value, size_t index)</argsstring>
        <name>replace_ushort_vector_index</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned short int</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace the value of a vector or array at a user specified index. If the user specifies an index that is out of bounds, the function will return -1, or 1 if successfull.</para>
<para>/param vec A vector or array of type <ref refid="structUShort" kindref="compound">UShort</ref> /param new_value The replacement value of type unsigned short int /param index The index where a value will be replaced</para>
<para><programlisting><codeline><highlight class="normal">UShort<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ushort_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>short<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_ushort_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">replace_ushort_vector_index(&amp;vec,<sp/>10,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>10,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ushort_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5898" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4781" bodyend="4788" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5898" declcolumn="5"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="structUShort_1a2dda197933e737c731ad2643f47fd431" compoundref="vector_8h" startline="78">UShort::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a0e1744a0448c4e5dd1131593efb609b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int replace_int_vector_index</definition>
        <argsstring>(Int *vec, int new_value, size_t index)</argsstring>
        <name>replace_int_vector_index</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace the value of a vector or array at a user specified index. If the user specifies an index that is out of bounds, the function will return -1, or 1 if successfull.</para>
<para>/param vec A vector or array of type <ref refid="structInt" kindref="compound">Int</ref> /param new_value The replacement value of type int /param index The index where a value will be replaced</para>
<para><programlisting><codeline><highlight class="normal">Int<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_int_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_int_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">replace_int_vector_index(&amp;vec,<sp/>10,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>10,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_int_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5921" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4791" bodyend="4798" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5921" declcolumn="5"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="structInt_1a0bee150d7ac85db061a8eadbeaaf341f" compoundref="vector_8h" startline="79">Int::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1aa1fc20f1e5fbd217726f0fd27b8b6ed7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int replace_uint_vector_index</definition>
        <argsstring>(UInt *vec, unsigned int new_value, size_t index)</argsstring>
        <name>replace_uint_vector_index</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace the value of a vector or array at a user specified index. If the user specifies an index that is out of bounds, the function will return -1, or 1 if successfull.</para>
<para>/param vec A vector or array of type <ref refid="structUInt" kindref="compound">UInt</ref> /param new_value The replacement value of type unsigned int /param index The index where a value will be replaced</para>
<para><programlisting><codeline><highlight class="normal">UInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uint_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_uint_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">replace_uint_vector_index(&amp;vec,<sp/>10,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>10,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uint_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5944" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4801" bodyend="4808" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5944" declcolumn="5"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="structUInt_1a9da46a4a94b40c6fb93093e54d5038df" compoundref="vector_8h" startline="80">UInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a4ea2e9f2401e9cd4d1cbdbec1e149aba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int replace_long_vector_index</definition>
        <argsstring>(LInt *vec, long int new_value, size_t index)</argsstring>
        <name>replace_long_vector_index</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace the value of a vector or array at a user specified index. If the user specifies an index that is out of bounds, the function will return -1, or 1 if successfull.</para>
<para>/param vec A vector or array of type <ref refid="structLInt" kindref="compound">LInt</ref> /param new_value The replacement value of type long int /param index The index where a value will be replaced</para>
<para><programlisting><codeline><highlight class="normal">LInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_long_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_long_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">replace_long_vector_index(&amp;vec,<sp/>10,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>10,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_long_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5967" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4811" bodyend="4818" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5967" declcolumn="5"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="structLInt_1a5fda7e772b70cd9b754e2b24f4489018" compoundref="vector_8h" startline="81">LInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1abc7605a0d1c96745f5a21cde7850d646" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int replace_ulong_vector_index</definition>
        <argsstring>(ULInt *vec, unsigned long int new_value, size_t index)</argsstring>
        <name>replace_ulong_vector_index</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned long int</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace the value of a vector or array at a user specified index. If the user specifies an index that is out of bounds, the function will return -1, or 1 if successfull.</para>
<para>/param vec A vector or array of type <ref refid="structULInt" kindref="compound">ULInt</ref> /param new_value The replacement value of type unsigned long int /param index The index where a value will be replaced</para>
<para><programlisting><codeline><highlight class="normal">ULInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ulong_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_ulong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">replace_ulong_vector_index(&amp;vec,<sp/>10,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>10,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ulong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="5990" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4821" bodyend="4828" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="5990" declcolumn="5"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="structULInt_1aa9fd315970b6f4f3e04f1b061b5d444e" compoundref="vector_8h" startline="82">ULInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a3743c4611f8d5bc6f7b50d138349e419" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int replace_llong_vector_index</definition>
        <argsstring>(LLInt *vec, long long int new_value, size_t index)</argsstring>
        <name>replace_llong_vector_index</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long long int</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace the value of a vector or array at a user specified index. If the user specifies an index that is out of bounds, the function will return -1, or 1 if successfull.</para>
<para>/param vec A vector or array of type <ref refid="structLLInt" kindref="compound">LLInt</ref> /param new_value The replacement value of type long long int /param index The index where a value will be replaced</para>
<para><programlisting><codeline><highlight class="normal">LLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_llong_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_llong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">replace_llong_vector_index(&amp;vec,<sp/>10,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>10,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_llong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="6013" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4831" bodyend="4838" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="6013" declcolumn="5"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="structLLInt_1ab754b9860df1677a3ea8e1808cd412ae" compoundref="vector_8h" startline="83">LLInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1aec90d973d5ddfd94b2be73686077c4cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int replace_ullong_vector_index</definition>
        <argsstring>(ULLInt *vec, unsigned long long int new_value, size_t index)</argsstring>
        <name>replace_ullong_vector_index</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned long long int</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace the value of a vector or array at a user specified index. If the user specifies an index that is out of bounds, the function will return -1, or 1 if successfull.</para>
<para>/param vec A vector or array of type <ref refid="structULLInt" kindref="compound">ULLInt</ref> /param new_value The replacement value of type unsigned long long int /param index The index where a value will be replaced</para>
<para><programlisting><codeline><highlight class="normal">ULLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ullong_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>long<sp/>long<sp/>int<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_ullong_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">replace_ullong_vector_index(&amp;vec,<sp/>10,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>10,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ullong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="6036" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4841" bodyend="4848" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="6036" declcolumn="5"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="structULLInt_1a356fe553bcfe6a502a0ad1c10c7774a0" compoundref="vector_8h" startline="84">ULLInt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a9a562517abca96c42b1b9fe69469915f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int replace_float_vector_index</definition>
        <argsstring>(Flt *vec, float new_value, size_t index)</argsstring>
        <name>replace_float_vector_index</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>float</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace the value of a vector or array at a user specified index. If the user specifies an index that is out of bounds, the function will return -1, or 1 if successfull.</para>
<para>/param vec A vector or array of type <ref refid="structFlt" kindref="compound">Flt</ref> /param new_value The replacement value of type float /param index The index where a value will be replaced</para>
<para><programlisting><codeline><highlight class="normal">Flt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_float_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">float<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_float_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">replace_float_vector_index(&amp;vec,<sp/>10,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>10,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_float_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="6059" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4851" bodyend="4858" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="6059" declcolumn="5"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="structFlt_1a87e7b6ad39c028b824e732662b798ae8" compoundref="vector_8h" startline="85">Flt::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a25c9a8f29ce2515cf260c9a50745fc69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int replace_double_vector_index</definition>
        <argsstring>(Dble *vec, double new_value, size_t index)</argsstring>
        <name>replace_double_vector_index</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>double</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace the value of a vector or array at a user specified index. If the user specifies an index that is out of bounds, the function will return -1, or 1 if successfull.</para>
<para>/param vec A vector or array of type <ref refid="structDble" kindref="compound">Dble</ref> /param new_value The replacement value of type unsigned double /param index The index where a value will be replaced</para>
<para><programlisting><codeline><highlight class="normal">Dble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_double_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_double_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">replace_double_vector_index(&amp;vec,<sp/>10,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>10,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_double_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="6082" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4861" bodyend="4868" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="6082" declcolumn="5"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="structDble_1a581ba4d948776393590092041ca3a2e6" compoundref="vector_8h" startline="86">Dble::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a81d619ab6affe5d8ffa3e79c099c9bb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int replace_ldouble_vector_index</definition>
        <argsstring>(LDble *vec, long double new_value, size_t index)</argsstring>
        <name>replace_ldouble_vector_index</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace the value of a vector or array at a user specified index. If the user specifies an index that is out of bounds, the function will return -1, or 1 if successfull.</para>
<para>/param vec A vector or array of type <ref refid="structLDble" kindref="compound">LDble</ref> /param new_value The replacement value of type long double /param index The index where a value will be replaced</para>
<para><programlisting><codeline><highlight class="normal">LDble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ldouble_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">ldouble<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_ldouble_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">replace_ldouble_vector_index(&amp;vec,<sp/>10,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>10,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ldouble_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="6105" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4871" bodyend="4878" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="6105" declcolumn="5"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="structLDble_1a100e4d029269084cfc49f13c1ba8e0e7" compoundref="vector_8h" startline="87">LDble::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1aadfbe9f5e5b78204f55c342826be1cd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int replace_bool_vector_index</definition>
        <argsstring>(Bool *vec, bool new_value, size_t index)</argsstring>
        <name>replace_bool_vector_index</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace the value of a vector or array at a user specified index. If the user specifies an index that is out of bounds, the function will return -1, or 1 if successfull.</para>
<para>/param vec A vector or array of type <ref refid="structBool" kindref="compound">Bool</ref> /param new_value The replacement value of type bool /param index The index where a value will be replaced</para>
<para><programlisting><codeline><highlight class="normal">Bool<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_bool_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">insert_bool_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">replace_bool_vector_index(&amp;vec,<sp/>10,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>1,<sp/>2,<sp/>10,<sp/>4<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_bool_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="6128" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4901" bodyend="4908" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="6128" declcolumn="5"/>
        <references refid="structBool_1a5445f6ef94d239208dc797c289fded75" compoundref="vector_8h" startline="90">Bool::active_length</references>
        <references refid="structBool_1aa91d9d8bfa9100cf5576cfdb1672cee2" compoundref="vector_8h" startline="90">Bool::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a011a6f61257e9d5cc3296475ae8845ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int replace_string_vector_index</definition>
        <argsstring>(String *vec, char *new_value, size_t index)</argsstring>
        <name>replace_string_vector_index</name>
        <param>
          <type><ref refid="structString" kindref="compound">String</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace the value of a vector or array at a user specified index. If the user specifies an index that is out of bounds, the function will return -1, or 1 if successfull.</para>
<para>/param vec A vector or array of type <ref refid="structString" kindref="compound">String</ref> /param new_value The replacement value of type char* /param index The index where a value will be replaced</para>
<para><programlisting><codeline><highlight class="normal">String<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_string_vector(&amp;vec);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(&amp;vec,<sp/>&quot;One&quot;,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(&amp;vec,<sp/>&quot;Two&quot;,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(&amp;vec,<sp/>&quot;Three&quot;,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">push_string_vector(&amp;vec,<sp/>&quot;Four&quot;,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">replace_ldouble_vector_index(&amp;vec,<sp/>&quot;Five&quot;,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>One,<sp/>Two,<sp/>Five,<sp/>Four<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_string_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="6153" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4911" bodyend="4918" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="6153" declcolumn="5"/>
        <references refid="structString_1a706ffaf2f520d46074dd99e7896d6673" compoundref="vector_8h" startline="97">String::active_length</references>
        <references refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" compoundref="vector_8h" startline="96">String::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a5f8e0b70e42100f1ef36d8ba5f9115bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int replace_char_vector_index</definition>
        <argsstring>(Char *vec, char new_value, size_t index)</argsstring>
        <name>replace_char_vector_index</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>char</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace the value of a vector or array at a user specified index. If the user specifies an index that is out of bounds, the function will return -1, or 1 if successfull.</para>
<para>/param vec A vector or array of type <ref refid="structChar" kindref="compound">Char</ref> /param new_value The replacement value of type char /param index The index where a value will be replaced</para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_char_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">char<sp/>a[5]<sp/>=<sp/>{&apos;a&apos;,<sp/>&apos;b&apos;,<sp/>&apos;c&apos;,<sp/>&apos;d&apos;};</highlight></codeline>
<codeline><highlight class="normal">insert_char_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">replace_char_vector_index(&amp;vec,<sp/>&apos;q&apos;,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>a,<sp/>b,<sp/>q,<sp/>d<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="6176" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4881" bodyend="4888" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="6176" declcolumn="5"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="structChar_1a8c919e2af7a18c4d3a8baec732c98a67" compoundref="vector_8h" startline="88">Char::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a9eaf5407b4c3a2f3db66ea179836beac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int replace_uchar_vector_index</definition>
        <argsstring>(UChar *vec, unsigned char new_value, size_t index)</argsstring>
        <name>replace_uchar_vector_index</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>new_value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will replace the value of a vector or array at a user specified index. If the user specifies an index that is out of bounds, the function will return -1, or 1 if successfull.</para>
<para>/param vec A vector or array of type <ref refid="structUChar" kindref="compound">UChar</ref> /param new_value The replacement value of type unsigned char /param index The index where a value will be replaced</para>
<para><programlisting><codeline><highlight class="normal">UChar<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uchar_vector(&amp;vec,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>char<sp/>a[5]<sp/>=<sp/>{&apos;a&apos;,<sp/>&apos;b&apos;,<sp/>&apos;c&apos;,<sp/>&apos;d&apos;};</highlight></codeline>
<codeline><highlight class="normal">insert_uchar_vector(&amp;vec,<sp/>a,<sp/>5,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">replace_uchar_vector_index(&amp;vec,<sp/>&apos;q&apos;,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>&gt;&gt;<sp/>[<sp/>a,<sp/>b,<sp/>q,<sp/>d<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uchar_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="6199" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4891" bodyend="4898" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="6199" declcolumn="5"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="structUChar_1acf5b94473575f93947d914fcc915fde5" compoundref="vector_8h" startline="89">UChar::array</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a1fbfbfeed7892cd604ac2175048a1ff3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int repeat_short_vector</definition>
        <argsstring>(Short *vec, short int value, size_t num)</argsstring>
        <name>repeat_short_vector</name>
        <param>
          <type><ref refid="structShort" kindref="compound">Short</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>short int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will repeat a user defined value in a vector or array data structure a user defined number of times.</para>
<para>/param vec A vector or array data structure of type <ref refid="structShort" kindref="compound">Short</ref> /param value a value of type short int that be repeated /param num The number of times a value is to be repeated</para>
<para><programlisting><codeline><highlight class="normal">Short<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_short_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">repeat_short_vector(&amp;vec,<sp/>10,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>10,<sp/>10,<sp/>10,<sp/>10,<sp/>10<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_short_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="6221" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4923" bodyend="4930" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="6221" declcolumn="5"/>
        <references refid="structShort_1acbbd74e6339b5e0398be80890927ea67" compoundref="vector_8h" startline="77">Short::active_length</references>
        <references refid="vector_8c_1a38068c17aa5cf7286175572d43219b8d" compoundref="vector_8c" startline="349" endline="379">push_short_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a87921615a6088f8e15e74f796abd294e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int repeat_ushort_vector</definition>
        <argsstring>(UShort *vec, unsigned short int value, size_t num)</argsstring>
        <name>repeat_ushort_vector</name>
        <param>
          <type><ref refid="structUShort" kindref="compound">UShort</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned short int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will repeat a user defined value in a vector or array data structure a user defined number of times.</para>
<para>/param vec A vector or array data structure of type <ref refid="structUShort" kindref="compound">UShort</ref> /param value a value of type unsigned short int that be repeated /param num The number of times a value is to be repeated</para>
<para><programlisting><codeline><highlight class="normal">UShort<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ushort_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">repeat_ushort_vector(&amp;vec,<sp/>10,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>10,<sp/>10,<sp/>10,<sp/>10,<sp/>10<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ushort_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="6241" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4933" bodyend="4940" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="6241" declcolumn="5"/>
        <references refid="structUShort_1ac29248ce011dce670f4471a571e94002" compoundref="vector_8h" startline="78">UShort::active_length</references>
        <references refid="vector_8c_1a97670c026df2a05dda5b0c85ebeb4d69" compoundref="vector_8c" startline="382" endline="412">push_ushort_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1aeb26b3546bef2bb8e5afc6a8c93d23a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int repeat_int_vector</definition>
        <argsstring>(Int *vec, int value, size_t num)</argsstring>
        <name>repeat_int_vector</name>
        <param>
          <type><ref refid="structInt" kindref="compound">Int</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will repeat a user defined value in a vector or array data structure a user defined number of times.</para>
<para>/param vec A vector or array data structure of type <ref refid="structInt" kindref="compound">Int</ref> /param value a value of type int that be repeated /param num The number of times a value is to be repeated</para>
<para><programlisting><codeline><highlight class="normal">Int<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_int_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">repeat_int_vector(&amp;vec,<sp/>10,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>10,<sp/>10,<sp/>10,<sp/>10,<sp/>10<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_int_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="6261" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4943" bodyend="4950" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="6261" declcolumn="5"/>
        <references refid="structInt_1af876a5749646fd07a6966461e2d67a1a" compoundref="vector_8h" startline="79">Int::active_length</references>
        <references refid="vector_8c_1a6baf75dc56de293f3dbdc8ac40934980" compoundref="vector_8c" startline="415" endline="445">push_int_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a1aa1df7f7e77404e77862ca75666165c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int repeat_uint_vector</definition>
        <argsstring>(UInt *vec, unsigned int value, size_t num)</argsstring>
        <name>repeat_uint_vector</name>
        <param>
          <type><ref refid="structUInt" kindref="compound">UInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will repeat a user defined value in a vector or array data structure a user defined number of times.</para>
<para>/param vec A vector or array data structure of type <ref refid="structUInt" kindref="compound">UInt</ref> /param value a value of type unsigned int that be repeated /param num The number of times a value is to be repeated</para>
<para><programlisting><codeline><highlight class="normal">UInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uint_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">repeat_uint_vector(&amp;vec,<sp/>10,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>10,<sp/>10,<sp/>10,<sp/>10,<sp/>10<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uint_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="6281" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4953" bodyend="4960" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="6281" declcolumn="5"/>
        <references refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" compoundref="vector_8h" startline="80">UInt::active_length</references>
        <references refid="vector_8c_1a787fc2bba6112c4ede10d0ec14ab3825" compoundref="vector_8c" startline="448" endline="478">push_uint_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a1f0914c2c37de3b81b706c77be31e57a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int repeat_long_vector</definition>
        <argsstring>(LInt *vec, long int value, size_t num)</argsstring>
        <name>repeat_long_vector</name>
        <param>
          <type><ref refid="structLInt" kindref="compound">LInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will repeat a user defined value in a vector or array data structure a user defined number of times.</para>
<para>/param vec A vector or array data structure of type <ref refid="structLInt" kindref="compound">LInt</ref> /param value a value of type long int that be repeated /param num The number of times a value is to be repeated</para>
<para><programlisting><codeline><highlight class="normal">LInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_long_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">repeat_long_vector(&amp;vec,<sp/>10,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>10,<sp/>10,<sp/>10,<sp/>10,<sp/>10<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_long_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="6301" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4963" bodyend="4970" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="6301" declcolumn="5"/>
        <references refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" compoundref="vector_8h" startline="81">LInt::active_length</references>
        <references refid="vector_8c_1a6135368684b7d740482cfc775417f255" compoundref="vector_8c" startline="481" endline="511">push_long_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a8c9c95f3e41bcaa00e99db959130c509" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int repeat_ulong_vector</definition>
        <argsstring>(ULInt *vec, unsigned long int value, size_t num)</argsstring>
        <name>repeat_ulong_vector</name>
        <param>
          <type><ref refid="structULInt" kindref="compound">ULInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned long int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will repeat a user defined value in a vector or array data structure a user defined number of times.</para>
<para>/param vec A vector or array data structure of type <ref refid="structULInt" kindref="compound">ULInt</ref> /param value a value of type unsigned long int that be repeated /param num The number of times a value is to be repeated</para>
<para><programlisting><codeline><highlight class="normal">ULInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ulong_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">repeat_ulong_vector(&amp;vec,<sp/>10,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>10,<sp/>10,<sp/>10,<sp/>10,<sp/>10<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ulong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="6321" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4973" bodyend="4980" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="6321" declcolumn="5"/>
        <references refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" compoundref="vector_8h" startline="82">ULInt::active_length</references>
        <references refid="vector_8c_1aea5f95b56df2836ee553face60351e61" compoundref="vector_8c" startline="514" endline="544">push_ulong_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a7c24fd593c9332ba1779b780b85cc893" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int repeat_llong_vector</definition>
        <argsstring>(LLInt *vec, long long int value, size_t num)</argsstring>
        <name>repeat_llong_vector</name>
        <param>
          <type><ref refid="structLLInt" kindref="compound">LLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long long int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will repeat a user defined value in a vector or array data structure a user defined number of times.</para>
<para>/param vec A vector or array data structure of type <ref refid="structLLInt" kindref="compound">LLInt</ref> /param value a value of type long long int that be repeated /param num The number of times a value is to be repeated</para>
<para><programlisting><codeline><highlight class="normal">LLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_llong_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">repeat_llong_vector(&amp;vec,<sp/>10,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>10,<sp/>10,<sp/>10,<sp/>10,<sp/>10<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_llong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="6341" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4983" bodyend="4990" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="6341" declcolumn="5"/>
        <references refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" compoundref="vector_8h" startline="83">LLInt::active_length</references>
        <references refid="vector_8c_1a93f7e28f97718d9d7c5c84df61c1466c" compoundref="vector_8c" startline="547" endline="577">push_llong_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a6f8e17e6a8930bf7bf0f7422d65eeab5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int repeat_ullong_vector</definition>
        <argsstring>(ULLInt *vec, unsigned long long int value, size_t num)</argsstring>
        <name>repeat_ullong_vector</name>
        <param>
          <type><ref refid="structULLInt" kindref="compound">ULLInt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned long long int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will repeat a user defined value in a vector or array data structure a user defined number of times.</para>
<para>/param vec A vector or array data structure of type <ref refid="structULLInt" kindref="compound">ULLInt</ref> /param value a value of type unsigned long long int that be repeated /param num The number of times a value is to be repeated</para>
<para><programlisting><codeline><highlight class="normal">ULLInt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ullong_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">repeat_ullong_vector(&amp;vec,<sp/>10,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>10,<sp/>10,<sp/>10,<sp/>10,<sp/>10<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ullong_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="6361" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="4993" bodyend="5000" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="6361" declcolumn="5"/>
        <references refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" compoundref="vector_8h" startline="84">ULLInt::active_length</references>
        <references refid="vector_8c_1a3478a298e62d85cb93f11a78f64d6f80" compoundref="vector_8c" startline="580" endline="610">push_ullong_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a58a085c7febff1b1bd9e6ec90510b36a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int repeat_float_vector</definition>
        <argsstring>(Flt *vec, float value, size_t num)</argsstring>
        <name>repeat_float_vector</name>
        <param>
          <type><ref refid="structFlt" kindref="compound">Flt</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will repeat a user defined value in a vector or array data structure a user defined number of times.</para>
<para>/param vec A vector or array data structure of type <ref refid="structFlt" kindref="compound">Flt</ref> /param value a value of type float that be repeated /param num The number of times a value is to be repeated</para>
<para><programlisting><codeline><highlight class="normal">Flt<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_float_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">repeat_float_vector(&amp;vec,<sp/>10.f,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>10.000,<sp/>10.000,<sp/>10.000,<sp/>10.000,<sp/>10.000<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_float_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="6381" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="5003" bodyend="5010" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="6381" declcolumn="5"/>
        <references refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" compoundref="vector_8h" startline="85">Flt::active_length</references>
        <references refid="vector_8c_1a31e02f437f4f9f43d1126e017ae1cac3" compoundref="vector_8c" startline="613" endline="643">push_float_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1ac2a03364dd0dc653854b1f70101514c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int repeat_double_vector</definition>
        <argsstring>(Dble *vec, double value, size_t num)</argsstring>
        <name>repeat_double_vector</name>
        <param>
          <type><ref refid="structDble" kindref="compound">Dble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will repeat a user defined value in a vector or array data structure a user defined number of times.</para>
<para>/param vec A vector or array data structure of type <ref refid="structDble" kindref="compound">Dble</ref> /param value a value of type double that be repeated /param num The number of times a value is to be repeated</para>
<para><programlisting><codeline><highlight class="normal">Dble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_double_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">repeat_double_vector(&amp;vec,<sp/>10.,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>10,<sp/>10,<sp/>10,<sp/>10,<sp/>10<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_double_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="6401" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="5013" bodyend="5020" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="6401" declcolumn="5"/>
        <references refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" compoundref="vector_8h" startline="86">Dble::active_length</references>
        <references refid="vector_8c_1ab312c467d82a0fccc66cbb89a6b8de5c" compoundref="vector_8c" startline="646" endline="676">push_double_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a34a56cde6bc6f420f8b9063bf87232e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int repeat_ldouble_vector</definition>
        <argsstring>(LDble *vec, long double value, size_t num)</argsstring>
        <name>repeat_ldouble_vector</name>
        <param>
          <type><ref refid="structLDble" kindref="compound">LDble</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>long double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will repeat a user defined value in a vector or array data structure a user defined number of times.</para>
<para>/param vec A vector or array data structure of type <ref refid="structLDble" kindref="compound">LDble</ref> /param value a value of type long double that be repeated /param num The number of times a value is to be repeated</para>
<para><programlisting><codeline><highlight class="normal">LDble<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_ldouble_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">repeat_ldouble_vector(&amp;vec,<sp/>10.,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>10,<sp/>10,<sp/>10,<sp/>10,<sp/>10<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_ldouble_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="6421" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="5023" bodyend="5030" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="6421" declcolumn="5"/>
        <references refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" compoundref="vector_8h" startline="87">LDble::active_length</references>
        <references refid="vector_8c_1ad001560a2793c40efb1c64532cefe2e2" compoundref="vector_8c" startline="679" endline="709">push_ldouble_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a10df883121d1f71d331ae6ba273357f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int repeat_bool_vector</definition>
        <argsstring>(Bool *vec, bool value, size_t num)</argsstring>
        <name>repeat_bool_vector</name>
        <param>
          <type><ref refid="structBool" kindref="compound">Bool</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will repeat a user defined value in a vector or array data structure a user defined number of times.</para>
<para>/param vec A vector or array data structure of type <ref refid="structBool" kindref="compound">Bool</ref> /param value a value of type bool that be repeated /param num The number of times a value is to be repeated</para>
<para><programlisting><codeline><highlight class="normal">Bool<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_bool_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">repeat_bool_vector(&amp;vec,<sp/>true,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>true,<sp/>true,<sp/>true,<sp/>true,<sp/>true<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_bool_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="6441" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="5033" bodyend="5040" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="6441" declcolumn="5"/>
        <references refid="structBool_1a5445f6ef94d239208dc797c289fded75" compoundref="vector_8h" startline="90">Bool::active_length</references>
        <references refid="vector_8c_1a66a1a1c291efbab607defa13421167dc" compoundref="vector_8c" startline="778" endline="808">push_bool_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1a9f6bd7ebba53e2d4eb0b8e3d8931029c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int repeat_string_vector</definition>
        <argsstring>(String *vec, char *value, size_t num)</argsstring>
        <name>repeat_string_vector</name>
        <param>
          <type><ref refid="structString" kindref="compound">String</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will repeat a user defined value in a vector or array data structure a user defined number of times.</para>
<para>/param vec A vector or array data structure of type <ref refid="structString" kindref="compound">String</ref> /param value a value of type char* that be repeated /param num The number of times a value is to be repeated</para>
<para><programlisting><codeline><highlight class="normal">String<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_string_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">repeat_string_vector(&amp;vec,<sp/>&quot;Hello&quot;,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>Hello,<sp/>Hello,<sp/>Hello,<sp/>Hello,<sp/>Hello<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_string_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="6461" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="5063" bodyend="5070" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="6461" declcolumn="5"/>
        <references refid="structString_1a706ffaf2f520d46074dd99e7896d6673" compoundref="vector_8h" startline="97">String::active_length</references>
        <references refid="vector_8c_1a078616c26d55c1ddb2ec4c551298a4f8" compoundref="vector_8c" startline="811" endline="829">push_string_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1aece15dcc8e9d3cf0fa0cb65c0b7a05f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int repeat_char_vector</definition>
        <argsstring>(Char *vec, char value, size_t num)</argsstring>
        <name>repeat_char_vector</name>
        <param>
          <type><ref refid="structChar" kindref="compound">Char</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>char</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will repeat a user defined value in a vector or array data structure a user defined number of times.</para>
<para>/param vec A vector or array data structure of type <ref refid="structChar" kindref="compound">Char</ref> /param value a value of type char that be repeated /param num The number of times a value is to be repeated</para>
<para><programlisting><codeline><highlight class="normal">Char<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_char_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">repeat_char_vector(&amp;vec,<sp/>&apos;h&apos;,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>H,<sp/>H,<sp/>H,<sp/>H,<sp/>H<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_char_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="6481" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="5043" bodyend="5050" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="6481" declcolumn="5"/>
        <references refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" compoundref="vector_8h" startline="88">Char::active_length</references>
        <references refid="vector_8c_1ab4f076e9a6e7d0795c2c3a0216c5c97e" compoundref="vector_8c" startline="712" endline="742">push_char_vector</references>
      </memberdef>
      <memberdef kind="function" id="vector_8h_1aa03b84f9a537aa95ab335f38448051a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int repeat_uchar_vector</definition>
        <argsstring>(UChar *vec, unsigned char value, size_t num)</argsstring>
        <name>repeat_uchar_vector</name>
        <param>
          <type><ref refid="structUChar" kindref="compound">UChar</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will repeat a user defined value in a vector or array data structure a user defined number of times.</para>
<para>/param vec A vector or array data structure of type <ref refid="structUChar" kindref="compound">UChar</ref> /param value a value of type char that be repeated /param num The number of times a value is to be repeated</para>
<para><programlisting><codeline><highlight class="normal">UChar<sp/>vec;</highlight></codeline>
<codeline><highlight class="normal">init_uchar_vector(&amp;vec,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">repeat_uchar_vector(&amp;vec,<sp/>&apos;h&apos;,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">PRINT(vec);</highlight></codeline>
<codeline><highlight class="normal">[<sp/>H,<sp/>H,<sp/>H,<sp/>H,<sp/>H<sp/>]</highlight></codeline>
<codeline><highlight class="normal">free_uchar_vector(&amp;vec);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" line="6501" column="5" bodyfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.c" bodystart="5053" bodyend="5060" declfile="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h" declline="6501" declcolumn="5"/>
        <references refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" compoundref="vector_8h" startline="89">UChar::active_length</references>
        <references refid="vector_8c_1acc6fd3b434ba25d3473adff60160500b" compoundref="vector_8c" startline="745" endline="775">push_uchar_vector</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>File:<sp/><sp/><sp/><sp/>vector.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>Purpose:<sp/>Describe<sp/>the<sp/>file<sp/>purpose<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Source<sp/>Metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>Author:<sp/><sp/>Jonathan<sp/>A.<sp/>Webb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>Date:<sp/><sp/><sp/><sp/>March<sp/>31,<sp/>2023</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>Version:<sp/>1.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>Copyright:<sp/>Copyright<sp/>2022,<sp/>Jon<sp/>Webb<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Include<sp/>modules<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>vector_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>vector_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="swap_8h" kindref="compound">swap.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SET<sp/>UP<sp/>RELEVANT<sp/>ENUMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="vector_8h_1ad756268621f03e4812b68792b291fff5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38" refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5aaac65e0072e6ff1f4c3209d2fdd8730a" kindref="member">DYNAMIC</ref>,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" kindref="member">STATIC</ref></highlight></codeline>
<codeline lineno="40" refid="vector_8h_1ad756268621f03e4812b68792b291fff5ae55a36a850c67d46b3b3325de7fce0b8" refkind="member"><highlight class="normal">}<sp/><ref refid="vector_8h_1ad756268621f03e4812b68792b291fff5" kindref="member">mem_type</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="vector_8h_1af40f59df20b550c793c470752e457636" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49" refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636aa26736999186daf8146f809e863712a1" kindref="member">FORWARD</ref>,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636a906b7cc20b42994dda4da492767c1de9" kindref="member">REVERSE</ref></highlight></codeline>
<codeline lineno="51" refid="vector_8h_1af40f59df20b550c793c470752e457636a906b7cc20b42994dda4da492767c1de9" refkind="member"><highlight class="normal">}<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="vector_8h_1a84eaf8fe661d2d8eb9275491bc8329df" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VECTOR_STRUCT(type,<sp/>dtype)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>struct<sp/>{type<sp/>*array;<sp/>size_t<sp/>allocated_length;<sp/>size_t<sp/>active_length;<sp/>mem_type<sp/>dat_type;<sp/>}<sp/>dtype</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Pre-define<sp/>struct_vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="structShort_1acbbd74e6339b5e0398be80890927ea67" refkind="member"><highlight class="normal"><ref refid="vector_8h_1a84eaf8fe661d2d8eb9275491bc8329df" kindref="member">VECTOR_STRUCT</ref>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">,<sp/><ref refid="structShort" kindref="compound">Short</ref>);</highlight></codeline>
<codeline lineno="78" refid="structUShort_1ac29248ce011dce670f4471a571e94002" refkind="member"><highlight class="normal"><ref refid="vector_8h_1a84eaf8fe661d2d8eb9275491bc8329df" kindref="member">VECTOR_STRUCT</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/><ref refid="structUShort" kindref="compound">UShort</ref>);</highlight></codeline>
<codeline lineno="79" refid="structInt_1af876a5749646fd07a6966461e2d67a1a" refkind="member"><highlight class="normal"><ref refid="vector_8h_1a84eaf8fe661d2d8eb9275491bc8329df" kindref="member">VECTOR_STRUCT</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/><ref refid="structInt" kindref="compound">Int</ref>);</highlight></codeline>
<codeline lineno="80" refid="structUInt_1a674db00cf632dbe64f92bdfcbaa274ec" refkind="member"><highlight class="normal"><ref refid="vector_8h_1a84eaf8fe661d2d8eb9275491bc8329df" kindref="member">VECTOR_STRUCT</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">,<sp/><ref refid="structUInt" kindref="compound">UInt</ref>);</highlight></codeline>
<codeline lineno="81" refid="structLInt_1aed77ebed11b13b3fcbe367eaa774cbca" refkind="member"><highlight class="normal"><ref refid="vector_8h_1a84eaf8fe661d2d8eb9275491bc8329df" kindref="member">VECTOR_STRUCT</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/><ref refid="structLInt" kindref="compound">LInt</ref>);</highlight></codeline>
<codeline lineno="82" refid="structULInt_1acef5b8ecd93a66f86d4d82464795895f" refkind="member"><highlight class="normal"><ref refid="vector_8h_1a84eaf8fe661d2d8eb9275491bc8329df" kindref="member">VECTOR_STRUCT</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/><ref refid="structULInt" kindref="compound">ULInt</ref>);</highlight></codeline>
<codeline lineno="83" refid="structLLInt_1a28859bb1fe518cff33b31b69deb08ca4" refkind="member"><highlight class="normal"><ref refid="vector_8h_1a84eaf8fe661d2d8eb9275491bc8329df" kindref="member">VECTOR_STRUCT</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/><ref refid="structLLInt" kindref="compound">LLInt</ref>);</highlight></codeline>
<codeline lineno="84" refid="structULLInt_1ac482706169eaadbdf2211aa54bf63d2b" refkind="member"><highlight class="normal"><ref refid="vector_8h_1a84eaf8fe661d2d8eb9275491bc8329df" kindref="member">VECTOR_STRUCT</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/><ref refid="structULLInt" kindref="compound">ULLInt</ref>);</highlight></codeline>
<codeline lineno="85" refid="structFlt_1a2fa1599d2472633868a9aef0ae510754" refkind="member"><highlight class="normal"><ref refid="vector_8h_1a84eaf8fe661d2d8eb9275491bc8329df" kindref="member">VECTOR_STRUCT</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/><ref refid="structFlt" kindref="compound">Flt</ref>);</highlight></codeline>
<codeline lineno="86" refid="structDble_1afffcb8f62c1716ac8bf2449666f4fa9d" refkind="member"><highlight class="normal"><ref refid="vector_8h_1a84eaf8fe661d2d8eb9275491bc8329df" kindref="member">VECTOR_STRUCT</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/><ref refid="structDble" kindref="compound">Dble</ref>);</highlight></codeline>
<codeline lineno="87" refid="structLDble_1a57fae05b26ff167c0242e48e751c1646" refkind="member"><highlight class="normal"><ref refid="vector_8h_1a84eaf8fe661d2d8eb9275491bc8329df" kindref="member">VECTOR_STRUCT</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/><ref refid="structLDble" kindref="compound">LDble</ref>);</highlight></codeline>
<codeline lineno="88" refid="structChar_1a1b23d7524f08c6dc4e32bf1f1bf204c8" refkind="member"><highlight class="normal"><ref refid="vector_8h_1a84eaf8fe661d2d8eb9275491bc8329df" kindref="member">VECTOR_STRUCT</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/><ref refid="structChar" kindref="compound">Char</ref>);</highlight></codeline>
<codeline lineno="89" refid="structUChar_1ad5f4ad3198262dd20c82eaab936228cd" refkind="member"><highlight class="normal"><ref refid="vector_8h_1a84eaf8fe661d2d8eb9275491bc8329df" kindref="member">VECTOR_STRUCT</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/><ref refid="structUChar" kindref="compound">UChar</ref>);</highlight></codeline>
<codeline lineno="90" refid="structBool_1a5445f6ef94d239208dc797c289fded75" refkind="member"><highlight class="normal"><ref refid="vector_8h_1a84eaf8fe661d2d8eb9275491bc8329df" kindref="member">VECTOR_STRUCT</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/><ref refid="structBool" kindref="compound">Bool</ref>);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>String<sp/>struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="structString" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96" refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<ref refid="structString_1a984d87136c3d76ab3145bdb65880a3fa" kindref="member">array</ref>;</highlight></codeline>
<codeline lineno="97" refid="structString_1a706ffaf2f520d46074dd99e7896d6673" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structString_1a706ffaf2f520d46074dd99e7896d6673" kindref="member">active_length</ref>;</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}<sp/><ref refid="structString" kindref="compound">String</ref>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INIT_VECTOR<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a749211e8a46a8b2297b3c6ebb78aed0e" kindref="member">init_short_vector</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1aa63398bdb55f97b891b93404a89de14d" kindref="member">init_ushort_vector</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a9fdb6c5fdd9f0d5a3bfb751f9e82968e" kindref="member">init_int_vector</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>initialize<sp/>a<sp/>vector<sp/>struct<sp/>of<sp/>type<sp/>UInt<sp/>to<sp/>containt<sp/>a</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/>dynamically<sp/>allocated<sp/>array<sp/>of<sp/>length.</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/>/param<sp/>vec<sp/>A<sp/>Vector<sp/>struct<sp/>of<sp/>type<sp/>UInt</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/>/param<sp/>length<sp/>The<sp/>initial<sp/>guess<sp/>for<sp/>the<sp/>number<sp/>of<sp/>indices<sp/>in<sp/>the<sp/>dynamically</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocated<sp/>array.</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a9d8eb1d9ce65365d7b044fe684387a3f" kindref="member">init_uint_vector</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>initialize<sp/>a<sp/>vector<sp/>struct<sp/>of<sp/>type<sp/>LInt<sp/>to<sp/>containt<sp/>a</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/>dynamically<sp/>allocated<sp/>array<sp/>of<sp/>length.</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*<sp/>/param<sp/>vec<sp/>A<sp/>Vector<sp/>struct<sp/>of<sp/>type<sp/>LInt</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/>/param<sp/>length<sp/>The<sp/>initial<sp/>guess<sp/>for<sp/>the<sp/>number<sp/>of<sp/>indices<sp/>in<sp/>the<sp/>dynamically</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocated<sp/>array.</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ac59c5fed0f4cd6b9aaf4c87b7a997bd3" kindref="member">init_long_vector</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>initialize<sp/>a<sp/>vector<sp/>struct<sp/>of<sp/>type<sp/>ULInt<sp/>to<sp/>containt<sp/>a</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/>dynamically<sp/>allocated<sp/>array<sp/>of<sp/>length.</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/>/param<sp/>vec<sp/>A<sp/>Vector<sp/>struct<sp/>of<sp/>type<sp/>ULInt</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/>/param<sp/>length<sp/>The<sp/>initial<sp/>guess<sp/>for<sp/>the<sp/>number<sp/>of<sp/>indices<sp/>in<sp/>the<sp/>dynamically</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocated<sp/>array.</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1af08098b392c0ff01db799bff9c83a521" kindref="member">init_ulong_vector</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>initialize<sp/>a<sp/>vector<sp/>struct<sp/>of<sp/>type<sp/>LLInt<sp/>to<sp/>containt<sp/>a</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/>dynamically<sp/>allocated<sp/>array<sp/>of<sp/>length.</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/>/param<sp/>vec<sp/>A<sp/>Vector<sp/>struct<sp/>of<sp/>type<sp/>LLInt</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/>/param<sp/>length<sp/>The<sp/>initial<sp/>guess<sp/>for<sp/>the<sp/>number<sp/>of<sp/>indices<sp/>in<sp/>the<sp/>dynamically</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocated<sp/>array.</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a65eda538d3c07a8beb1475c1a214ff67" kindref="member">init_llong_vector</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>initialize<sp/>a<sp/>vector<sp/>struct<sp/>of<sp/>type<sp/>ULLInt<sp/>to<sp/>containt<sp/>a</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/>dynamically<sp/>allocated<sp/>array<sp/>of<sp/>length.</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*<sp/>/param<sp/>vec<sp/>A<sp/>Vector<sp/>struct<sp/>of<sp/>type<sp/>ULLInt</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*<sp/>/param<sp/>length<sp/>The<sp/>initial<sp/>guess<sp/>for<sp/>the<sp/>number<sp/>of<sp/>indices<sp/>in<sp/>the<sp/>dynamically</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocated<sp/>array.</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ab05d31d34c87d8d6cd76f48539bf367f" kindref="member">init_ullong_vector</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>initialize<sp/>a<sp/>vector<sp/>struct<sp/>of<sp/>type<sp/>Flt<sp/>to<sp/>containt<sp/>a</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*<sp/>dynamically<sp/>allocated<sp/>array<sp/>of<sp/>length.</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*<sp/>/param<sp/>vec<sp/>A<sp/>Vector<sp/>struct<sp/>of<sp/>type<sp/>Flt</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/>/param<sp/>length<sp/>The<sp/>initial<sp/>guess<sp/>for<sp/>the<sp/>number<sp/>of<sp/>indices<sp/>in<sp/>the<sp/>dynamically</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocated<sp/>array.</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a92bba70874a1570bd9c87a2a7385af35" kindref="member">init_float_vector</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>initialize<sp/>a<sp/>vector<sp/>struct<sp/>of<sp/>type<sp/>Dble<sp/>to<sp/>containt<sp/>a</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/>dynamically<sp/>allocated<sp/>array<sp/>of<sp/>length.</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/>/param<sp/>vec<sp/>A<sp/>Vector<sp/>struct<sp/>of<sp/>type<sp/>Dble</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/>/param<sp/>length<sp/>The<sp/>initial<sp/>guess<sp/>for<sp/>the<sp/>number<sp/>of<sp/>indices<sp/>in<sp/>the<sp/>dynamically</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocated<sp/>array.</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a2c0735f69da8e40535b5ecceace1a399" kindref="member">init_double_vector</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>initialize<sp/>a<sp/>vector<sp/>struct<sp/>of<sp/>type<sp/>LDble<sp/>to<sp/>containt<sp/>a</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/>dynamically<sp/>allocated<sp/>array<sp/>of<sp/>length.</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/>/param<sp/>vec<sp/>A<sp/>Vector<sp/>struct<sp/>of<sp/>type<sp/>LDble</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/>/param<sp/>length<sp/>The<sp/>initial<sp/>guess<sp/>for<sp/>the<sp/>number<sp/>of<sp/>indices<sp/>in<sp/>the<sp/>dynamically</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocated<sp/>array.</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a79d9f9d1d1cb31d09620bc5cdc73e94e" kindref="member">init_ldouble_vector</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>initialize<sp/>a<sp/>vector<sp/>struct<sp/>of<sp/>type<sp/>Char<sp/>to<sp/>containt<sp/>a</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*<sp/>dynamically<sp/>allocated<sp/>array<sp/>of<sp/>length.</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/>/param<sp/>vec<sp/>A<sp/>Vector<sp/>struct<sp/>of<sp/>type<sp/>Char</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*<sp/>/param<sp/>length<sp/>The<sp/>initial<sp/>guess<sp/>for<sp/>the<sp/>number<sp/>of<sp/>indices<sp/>in<sp/>the<sp/>dynamically</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocated<sp/>array.</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1aecde718777430d31ec254f8a4f40cce0" kindref="member">init_char_vector</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>initialize<sp/>a<sp/>vector<sp/>struct<sp/>of<sp/>type<sp/>UChar<sp/>to<sp/>containt<sp/>a</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*<sp/>dynamically<sp/>allocated<sp/>array<sp/>of<sp/>length.</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*<sp/>/param<sp/>vec<sp/>A<sp/>Vector<sp/>struct<sp/>of<sp/>type<sp/>UChar</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*<sp/>/param<sp/>length<sp/>The<sp/>initial<sp/>guess<sp/>for<sp/>the<sp/>number<sp/>of<sp/>indices<sp/>in<sp/>the<sp/>dynamically</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocated<sp/>array.</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a9289ec52674f95ebf45ac81b70dfdc67" kindref="member">init_uchar_vector</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>initialize<sp/>a<sp/>vector<sp/>struct<sp/>of<sp/>type<sp/>Bool<sp/>to<sp/>containt<sp/>a</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*<sp/>dynamically<sp/>allocated<sp/>array<sp/>of<sp/>length.</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*<sp/>/param<sp/>vec<sp/>A<sp/>Vector<sp/>struct<sp/>of<sp/>type<sp/>Bool</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*<sp/>/param<sp/>length<sp/>The<sp/>initial<sp/>guess<sp/>for<sp/>the<sp/>number<sp/>of<sp/>indices<sp/>in<sp/>the<sp/>dynamically</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocated<sp/>array.</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a2e1ea608c0b9b0768ba61facb8df913f" kindref="member">init_bool_vector</ref>(<ref refid="structBool" kindref="compound">Bool</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ad5c4c9d8676c13f1f381b0b6c1119c4d" kindref="member">init_string_vector</ref>(<ref refid="structString" kindref="compound">String</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="284" refid="vector_8h_1a78b085b69ede6314aedfc346b480a078" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INIT_VECTOR(T,<sp/>length)<sp/>_Generic(<sp/>(T),<sp/>Short:<sp/>init_short_vector,<sp/>\</highlight></codeline>
<codeline lineno="285"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UShort:<sp/>init_ushort_vector,<sp/>\</highlight></codeline>
<codeline lineno="286"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Int:<sp/>init_int_vector,<sp/>\</highlight></codeline>
<codeline lineno="287"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UInt:<sp/>init_uint_vector,<sp/>\</highlight></codeline>
<codeline lineno="288"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LInt:<sp/>init_long_vector,<sp/>\</highlight></codeline>
<codeline lineno="289"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ULInt:<sp/>init_ulong_vector,<sp/>\</highlight></codeline>
<codeline lineno="290"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LLInt:<sp/>init_llong_vector,<sp/>\</highlight></codeline>
<codeline lineno="291"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ULLInt:<sp/>init_ullong_vector,<sp/>\</highlight></codeline>
<codeline lineno="292"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Flt:<sp/>init_float_vector,<sp/>\</highlight></codeline>
<codeline lineno="293"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dble:<sp/>init_double_vector,<sp/>\</highlight></codeline>
<codeline lineno="294"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LDble:<sp/>init_ldouble_vector,<sp/>\</highlight></codeline>
<codeline lineno="295"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Char:<sp/>init_char_vector,<sp/>\</highlight></codeline>
<codeline lineno="296"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UChar:<sp/>init_uchar_vector,<sp/>\</highlight></codeline>
<codeline lineno="297"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bool:<sp/>init_bool_vector)(&amp;T,<sp/>length)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INIT_TYPE_ARRAY<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1acb7b3bcd9252ad84ea9d05436f57bd6c" kindref="member">init_short_array</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>allocated_length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>active_length);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1abbac579a20b2655deda9ec8a915fcfb7" kindref="member">init_ushort_array</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>allocated_length,</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>active_length);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a29734ea7a6541b75cd3824bc05e3e589" kindref="member">init_int_array</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>allocated_length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>active_length);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a2739fb21bf4216de09c51c393b89ece7" kindref="member">init_uint_array</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>allocated_length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>active_length);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1acbddef55e279d25613203d2f14957597" kindref="member">init_long_array</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>allocated_length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>active_length);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1acdf31865e9c36adc693dd7fa7fadcacc" kindref="member">init_ulong_array</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>allocated_length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>active_length);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a65e3799f14e154e10bd3ce7a4d4fe184" kindref="member">init_llong_array</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>allocated_length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>active_length);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a39d896e588ac932b9958b4f2e32d97c2" kindref="member">init_ullong_array</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>allocated_length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>active_length);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a5fcc9ae29ce6bd76060856b388992240" kindref="member">init_float_array</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>allocated_length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>active_length);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1af1f590cad5f66c4caded12d7cd92675b" kindref="member">init_double_array</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>allocated_length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>active_length);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ae670278f7c9522a0fdc6b261cb76e5e5" kindref="member">init_ldouble_array</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>allocated_length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>active_length);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a85ef363e6bfd0897ffc5ccb10c5eb721" kindref="member">init_char_array</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>allocated_length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>active_length);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a2f22fc4866a5c4e5ba5cc10fbf73bb5e" kindref="member">init_uchar_array</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>allocated_length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>active_length);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ad2512ad5d79463921401fee2bf996b10" kindref="member">init_bool_array</ref>(<ref refid="structBool" kindref="compound">Bool</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*arr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>allocated_length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>active_length);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INIT_ARRAY<sp/>GENERIC<sp/>OPERATOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Controlling<sp/>expression<sp/>to<sp/>define<sp/>function<sp/>type<sp/>for<sp/>INIT_VECTOR<sp/>macro</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571" refid="vector_8h_1a77aa58ae761e2e9fe859c4ac316bec41" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INIT_ARRAY(T,<sp/>arr,<sp/>aloc_len,<sp/>active_len)<sp/>_Generic(<sp/>(T),<sp/>Short:<sp/>init_short_array,<sp/>\</highlight></codeline>
<codeline lineno="572"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UShort:<sp/>init_ushort_array,<sp/>\</highlight></codeline>
<codeline lineno="573"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Int:<sp/>init_int_array,<sp/>\</highlight></codeline>
<codeline lineno="574"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UInt:<sp/>init_uint_array,<sp/>\</highlight></codeline>
<codeline lineno="575"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LInt:<sp/>init_long_array,<sp/>\</highlight></codeline>
<codeline lineno="576"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ULInt:<sp/>init_ulong_array,<sp/>\</highlight></codeline>
<codeline lineno="577"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LLInt:<sp/>init_llong_array,<sp/>\</highlight></codeline>
<codeline lineno="578"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ULLInt:<sp/>init_ullong_array,<sp/>\</highlight></codeline>
<codeline lineno="579"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Flt:<sp/>init_float_array,<sp/>\</highlight></codeline>
<codeline lineno="580"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dble:<sp/>init_double_array,<sp/>\</highlight></codeline>
<codeline lineno="581"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LDble:<sp/>init_ldouble_array,<sp/>\</highlight></codeline>
<codeline lineno="582"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Char:<sp/>init_char_array,<sp/>\</highlight></codeline>
<codeline lineno="583"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UChar:<sp/>init_uchar_array,<sp/>\</highlight></codeline>
<codeline lineno="584"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bool:<sp/>init_bool_array)(&amp;T,<sp/>arr,<sp/>aloc_len,<sp/>active_len)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="589"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>pushes<sp/>a<sp/>scalar<sp/>short<sp/>value<sp/>to<sp/>a<sp/>user<sp/>defined<sp/>indice</highlight></codeline>
<codeline lineno="590"><highlight class="comment"><sp/>*<sp/>in<sp/>a<sp/>Short<sp/>vector<sp/>struc.</highlight></codeline>
<codeline lineno="591"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="592"><highlight class="comment"><sp/>*<sp/>/param<sp/>vec<sp/>A<sp/>vector<sp/>struct<sp/>of<sp/>type<sp/>Short</highlight></codeline>
<codeline lineno="593"><highlight class="comment"><sp/>*<sp/>/param<sp/>value<sp/>The<sp/>scalar<sp/>value<sp/>of<sp/>type<sp/>short</highlight></codeline>
<codeline lineno="594"><highlight class="comment"><sp/>*<sp/>/param<sp/>index<sp/>The<sp/>index<sp/>where<sp/>the<sp/>data<sp/>will<sp/>be<sp/>pushed.</highlight></codeline>
<codeline lineno="595"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="596"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="597"><highlight class="comment"><sp/>*<sp/>#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline lineno="598"><highlight class="comment"><sp/>*<sp/>#include<sp/>&quot;print.h&quot;</highlight></codeline>
<codeline lineno="599"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="600"><highlight class="comment"><sp/>*<sp/>Short<sp/>vec;</highlight></codeline>
<codeline lineno="601"><highlight class="comment"><sp/>*<sp/>init_short_vector(vec,<sp/>3);</highlight></codeline>
<codeline lineno="602"><highlight class="comment"><sp/>*<sp/>push_short_vector(vec,<sp/>1,<sp/>vec.active_length);</highlight></codeline>
<codeline lineno="603"><highlight class="comment"><sp/>*<sp/>push_short_vector(vec,<sp/>2,<sp/>vec.active_length);</highlight></codeline>
<codeline lineno="604"><highlight class="comment"><sp/>*<sp/>push_short_vector(vec,<sp/>5,<sp/>0);</highlight></codeline>
<codeline lineno="605"><highlight class="comment"><sp/>*<sp/>PRINT(vec);</highlight></codeline>
<codeline lineno="606"><highlight class="comment"><sp/>*<sp/>//<sp/>&gt;&gt;<sp/>[<sp/>5,<sp/>1,<sp/>2<sp/>]</highlight></codeline>
<codeline lineno="607"><highlight class="comment"><sp/>*<sp/>free_short_vector(vec)&apos;</highlight></codeline>
<codeline lineno="608"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="609"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a38068c17aa5cf7286175572d43219b8d" kindref="member">push_short_vector</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="614"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>pushes<sp/>a<sp/>scalar<sp/>unsigned<sp/>short<sp/>value<sp/>to<sp/>a<sp/>user<sp/>defined<sp/>indice</highlight></codeline>
<codeline lineno="615"><highlight class="comment"><sp/>*<sp/>in<sp/>a<sp/>UShort<sp/>vector<sp/>struc.</highlight></codeline>
<codeline lineno="616"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="617"><highlight class="comment"><sp/>*<sp/>/param<sp/>vec<sp/>A<sp/>vector<sp/>struct<sp/>of<sp/>type<sp/>UShort</highlight></codeline>
<codeline lineno="618"><highlight class="comment"><sp/>*<sp/>/param<sp/>value<sp/>The<sp/>scalar<sp/>value<sp/>of<sp/>type<sp/>unsigned<sp/>short</highlight></codeline>
<codeline lineno="619"><highlight class="comment"><sp/>*<sp/>/param<sp/>index<sp/>The<sp/>index<sp/>where<sp/>the<sp/>data<sp/>will<sp/>be<sp/>pushed.</highlight></codeline>
<codeline lineno="620"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="621"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="622"><highlight class="comment"><sp/>*<sp/>#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline lineno="623"><highlight class="comment"><sp/>*<sp/>#include<sp/>&quot;print.h&quot;</highlight></codeline>
<codeline lineno="624"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="625"><highlight class="comment"><sp/>*<sp/>UShort<sp/>vec;</highlight></codeline>
<codeline lineno="626"><highlight class="comment"><sp/>*<sp/>init_ushort_vector(vec,<sp/>3);</highlight></codeline>
<codeline lineno="627"><highlight class="comment"><sp/>*<sp/>push_ushort_vector(vec,<sp/>1,<sp/>vec.active_length);</highlight></codeline>
<codeline lineno="628"><highlight class="comment"><sp/>*<sp/>push_ushort_vector(vec,<sp/>2,<sp/>vec.active_length);</highlight></codeline>
<codeline lineno="629"><highlight class="comment"><sp/>*<sp/>push_ushort_vector(vec,<sp/>5,<sp/>0);</highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/>*<sp/>PRINT(vec);</highlight></codeline>
<codeline lineno="631"><highlight class="comment"><sp/>*<sp/>//<sp/>&gt;&gt;<sp/>[<sp/>5,<sp/>1,<sp/>2<sp/>]</highlight></codeline>
<codeline lineno="632"><highlight class="comment"><sp/>*<sp/>free_ushort_vector(vec)&apos;</highlight></codeline>
<codeline lineno="633"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="634"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a97670c026df2a05dda5b0c85ebeb4d69" kindref="member">push_ushort_vector</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="639"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>pushes<sp/>a<sp/>scalar<sp/>int<sp/>value<sp/>to<sp/>a<sp/>user<sp/>defined<sp/>indice</highlight></codeline>
<codeline lineno="640"><highlight class="comment"><sp/>*<sp/>in<sp/>a<sp/>Int<sp/>vector<sp/>struc.</highlight></codeline>
<codeline lineno="641"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="642"><highlight class="comment"><sp/>*<sp/>/param<sp/>vec<sp/>A<sp/>vector<sp/>struct<sp/>of<sp/>type<sp/>Int</highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/>*<sp/>/param<sp/>value<sp/>The<sp/>scalar<sp/>value<sp/>of<sp/>type<sp/>int</highlight></codeline>
<codeline lineno="644"><highlight class="comment"><sp/>*<sp/>/param<sp/>index<sp/>The<sp/>index<sp/>where<sp/>the<sp/>data<sp/>will<sp/>be<sp/>pushed.</highlight></codeline>
<codeline lineno="645"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="646"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="647"><highlight class="comment"><sp/>*<sp/>#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline lineno="648"><highlight class="comment"><sp/>*<sp/>#include<sp/>&quot;print.h&quot;</highlight></codeline>
<codeline lineno="649"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="650"><highlight class="comment"><sp/>*<sp/>Int<sp/>vec;</highlight></codeline>
<codeline lineno="651"><highlight class="comment"><sp/>*<sp/>init_int_vector(vec,<sp/>3);</highlight></codeline>
<codeline lineno="652"><highlight class="comment"><sp/>*<sp/>push_int_vector(vec,<sp/>1,<sp/>vec.active_length);</highlight></codeline>
<codeline lineno="653"><highlight class="comment"><sp/>*<sp/>push_int_vector(vec,<sp/>2,<sp/>vec.active_length);</highlight></codeline>
<codeline lineno="654"><highlight class="comment"><sp/>*<sp/>push_int_vector(vec,<sp/>5,<sp/>0);</highlight></codeline>
<codeline lineno="655"><highlight class="comment"><sp/>*<sp/>PRINT(vec);</highlight></codeline>
<codeline lineno="656"><highlight class="comment"><sp/>*<sp/>//<sp/>&gt;&gt;<sp/>[<sp/>5,<sp/>1,<sp/>2<sp/>]</highlight></codeline>
<codeline lineno="657"><highlight class="comment"><sp/>*<sp/>free_int_vector(vec)&apos;</highlight></codeline>
<codeline lineno="658"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="659"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a6baf75dc56de293f3dbdc8ac40934980" kindref="member">push_int_vector</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="664"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>pushes<sp/>a<sp/>scalar<sp/>unsigned<sp/>int<sp/>value<sp/>to<sp/>a<sp/>user<sp/>defined<sp/>indice</highlight></codeline>
<codeline lineno="665"><highlight class="comment"><sp/>*<sp/>in<sp/>a<sp/>UInt<sp/>vector<sp/>struc.</highlight></codeline>
<codeline lineno="666"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="667"><highlight class="comment"><sp/>*<sp/>/param<sp/>vec<sp/>A<sp/>vector<sp/>struct<sp/>of<sp/>type<sp/>UInt</highlight></codeline>
<codeline lineno="668"><highlight class="comment"><sp/>*<sp/>/param<sp/>value<sp/>The<sp/>scalar<sp/>value<sp/>of<sp/>type<sp/>unsigned<sp/>int</highlight></codeline>
<codeline lineno="669"><highlight class="comment"><sp/>*<sp/>/param<sp/>index<sp/>The<sp/>index<sp/>where<sp/>the<sp/>data<sp/>will<sp/>be<sp/>pushed.</highlight></codeline>
<codeline lineno="670"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="671"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="672"><highlight class="comment"><sp/>*<sp/>#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline lineno="673"><highlight class="comment"><sp/>*<sp/>#include<sp/>&quot;print.h&quot;</highlight></codeline>
<codeline lineno="674"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="675"><highlight class="comment"><sp/>*<sp/>UInt<sp/>vec;</highlight></codeline>
<codeline lineno="676"><highlight class="comment"><sp/>*<sp/>init_uint_vector(vec,<sp/>3);</highlight></codeline>
<codeline lineno="677"><highlight class="comment"><sp/>*<sp/>push_uint_vector(vec,<sp/>1,<sp/>vec.active_length);</highlight></codeline>
<codeline lineno="678"><highlight class="comment"><sp/>*<sp/>push_uint_vector(vec,<sp/>2,<sp/>vec.active_length);</highlight></codeline>
<codeline lineno="679"><highlight class="comment"><sp/>*<sp/>push_uint_vector(vec,<sp/>5,<sp/>0);</highlight></codeline>
<codeline lineno="680"><highlight class="comment"><sp/>*<sp/>PRINT(vec);</highlight></codeline>
<codeline lineno="681"><highlight class="comment"><sp/>*<sp/>//<sp/>&gt;&gt;<sp/>[<sp/>5,<sp/>1,<sp/>2<sp/>]</highlight></codeline>
<codeline lineno="682"><highlight class="comment"><sp/>*<sp/>free_uint_vector(vec)&apos;</highlight></codeline>
<codeline lineno="683"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="684"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a787fc2bba6112c4ede10d0ec14ab3825" kindref="member">push_uint_vector</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="689"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>pushes<sp/>a<sp/>scalar<sp/>long<sp/>int<sp/>value<sp/>to<sp/>a<sp/>user<sp/>defined<sp/>indice</highlight></codeline>
<codeline lineno="690"><highlight class="comment"><sp/>*<sp/>in<sp/>a<sp/>LInt<sp/>vector<sp/>struc.</highlight></codeline>
<codeline lineno="691"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="692"><highlight class="comment"><sp/>*<sp/>/param<sp/>vec<sp/>A<sp/>vector<sp/>struct<sp/>of<sp/>type<sp/>LInt</highlight></codeline>
<codeline lineno="693"><highlight class="comment"><sp/>*<sp/>/param<sp/>value<sp/>The<sp/>scalar<sp/>value<sp/>of<sp/>type<sp/>long<sp/>int</highlight></codeline>
<codeline lineno="694"><highlight class="comment"><sp/>*<sp/>/param<sp/>index<sp/>The<sp/>index<sp/>where<sp/>the<sp/>data<sp/>will<sp/>be<sp/>pushed.</highlight></codeline>
<codeline lineno="695"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="696"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="697"><highlight class="comment"><sp/>*<sp/>#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline lineno="698"><highlight class="comment"><sp/>*<sp/>#include<sp/>&quot;print.h&quot;</highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/>*<sp/>LInt<sp/>vec;</highlight></codeline>
<codeline lineno="701"><highlight class="comment"><sp/>*<sp/>init_long_vector(vec,<sp/>3);</highlight></codeline>
<codeline lineno="702"><highlight class="comment"><sp/>*<sp/>push_long_vector(vec,<sp/>1,<sp/>vec.active_length);</highlight></codeline>
<codeline lineno="703"><highlight class="comment"><sp/>*<sp/>push_long_vector(vec,<sp/>2,<sp/>vec.active_length);</highlight></codeline>
<codeline lineno="704"><highlight class="comment"><sp/>*<sp/>push_long_vector(vec,<sp/>5,<sp/>0);</highlight></codeline>
<codeline lineno="705"><highlight class="comment"><sp/>*<sp/>PRINT(vec);</highlight></codeline>
<codeline lineno="706"><highlight class="comment"><sp/>*<sp/>//<sp/>&gt;&gt;<sp/>[<sp/>5,<sp/>1,<sp/>2<sp/>]</highlight></codeline>
<codeline lineno="707"><highlight class="comment"><sp/>*<sp/>free_long_vector(vec)&apos;</highlight></codeline>
<codeline lineno="708"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="709"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a6135368684b7d740482cfc775417f255" kindref="member">push_long_vector</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="714"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>pushes<sp/>a<sp/>scalar<sp/>unsigned<sp/>long<sp/>int<sp/>value<sp/>to<sp/>a<sp/>user<sp/>defined<sp/>indice</highlight></codeline>
<codeline lineno="715"><highlight class="comment"><sp/>*<sp/>in<sp/>a<sp/>ULInt<sp/>vector<sp/>struc.</highlight></codeline>
<codeline lineno="716"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="717"><highlight class="comment"><sp/>*<sp/>/param<sp/>vec<sp/>A<sp/>vector<sp/>struct<sp/>of<sp/>type<sp/>ULInt</highlight></codeline>
<codeline lineno="718"><highlight class="comment"><sp/>*<sp/>/param<sp/>value<sp/>The<sp/>scalar<sp/>value<sp/>of<sp/>type<sp/>unsigned<sp/>long<sp/>int</highlight></codeline>
<codeline lineno="719"><highlight class="comment"><sp/>*<sp/>/param<sp/>index<sp/>The<sp/>index<sp/>where<sp/>the<sp/>data<sp/>will<sp/>be<sp/>pushed.</highlight></codeline>
<codeline lineno="720"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="721"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="722"><highlight class="comment"><sp/>*<sp/>#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline lineno="723"><highlight class="comment"><sp/>*<sp/>#include<sp/>&quot;print.h&quot;</highlight></codeline>
<codeline lineno="724"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="725"><highlight class="comment"><sp/>*<sp/>ULInt<sp/>vec;</highlight></codeline>
<codeline lineno="726"><highlight class="comment"><sp/>*<sp/>init_ulong_vector(vec,<sp/>3);</highlight></codeline>
<codeline lineno="727"><highlight class="comment"><sp/>*<sp/>push_ulong_vector(vec,<sp/>1,<sp/>vec.active_length);</highlight></codeline>
<codeline lineno="728"><highlight class="comment"><sp/>*<sp/>push_ulong_vector(vec,<sp/>2,<sp/>vec.active_length);</highlight></codeline>
<codeline lineno="729"><highlight class="comment"><sp/>*<sp/>push_ulong_vector(vec,<sp/>5,<sp/>0);</highlight></codeline>
<codeline lineno="730"><highlight class="comment"><sp/>*<sp/>PRINT(vec);</highlight></codeline>
<codeline lineno="731"><highlight class="comment"><sp/>*<sp/>//<sp/>&gt;&gt;<sp/>[<sp/>5,<sp/>1,<sp/>2<sp/>]</highlight></codeline>
<codeline lineno="732"><highlight class="comment"><sp/>*<sp/>free_ulong_vector(vec)&apos;</highlight></codeline>
<codeline lineno="733"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="734"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1aea5f95b56df2836ee553face60351e61" kindref="member">push_ulong_vector</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="739"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>pushes<sp/>a<sp/>scalar<sp/>long<sp/>long<sp/>int<sp/>value<sp/>to<sp/>a<sp/>user<sp/>defined<sp/>indice</highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/>*<sp/>in<sp/>a<sp/>LLInt<sp/>vector<sp/>struc.</highlight></codeline>
<codeline lineno="741"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="742"><highlight class="comment"><sp/>*<sp/>/param<sp/>vec<sp/>A<sp/>vector<sp/>struct<sp/>of<sp/>type<sp/>LLInt</highlight></codeline>
<codeline lineno="743"><highlight class="comment"><sp/>*<sp/>/param<sp/>value<sp/>The<sp/>scalar<sp/>value<sp/>of<sp/>type<sp/>long<sp/>long<sp/>int</highlight></codeline>
<codeline lineno="744"><highlight class="comment"><sp/>*<sp/>/param<sp/>index<sp/>The<sp/>index<sp/>where<sp/>the<sp/>data<sp/>will<sp/>be<sp/>pushed.</highlight></codeline>
<codeline lineno="745"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="746"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="747"><highlight class="comment"><sp/>*<sp/>#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline lineno="748"><highlight class="comment"><sp/>*<sp/>#include<sp/>&quot;print.h&quot;</highlight></codeline>
<codeline lineno="749"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/>*<sp/>LLInt<sp/>vec;</highlight></codeline>
<codeline lineno="751"><highlight class="comment"><sp/>*<sp/>inint_llong_vector(vec,<sp/>3);</highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/>*<sp/>push_llong_vector(vec,<sp/>1,<sp/>vec.active_length);</highlight></codeline>
<codeline lineno="753"><highlight class="comment"><sp/>*<sp/>push_llong_vector(vec,<sp/>2,<sp/>vec.active_length);</highlight></codeline>
<codeline lineno="754"><highlight class="comment"><sp/>*<sp/>push_llong_vector(vec,<sp/>5,<sp/>0);</highlight></codeline>
<codeline lineno="755"><highlight class="comment"><sp/>*<sp/>PRINT(vec);</highlight></codeline>
<codeline lineno="756"><highlight class="comment"><sp/>*<sp/>//<sp/>&gt;&gt;<sp/>[<sp/>5,<sp/>1,<sp/>2<sp/>]</highlight></codeline>
<codeline lineno="757"><highlight class="comment"><sp/>*<sp/>free_llong_vector(vec)&apos;</highlight></codeline>
<codeline lineno="758"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="759"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a93f7e28f97718d9d7c5c84df61c1466c" kindref="member">push_llong_vector</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="764"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>pushes<sp/>a<sp/>scalar<sp/>unsigned<sp/>long<sp/>long<sp/>int<sp/>value<sp/>to<sp/>a<sp/>user<sp/>defined<sp/>indice</highlight></codeline>
<codeline lineno="765"><highlight class="comment"><sp/>*<sp/>in<sp/>a<sp/>ULLInt<sp/>vector<sp/>struc.</highlight></codeline>
<codeline lineno="766"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="767"><highlight class="comment"><sp/>*<sp/>/param<sp/>vec<sp/>A<sp/>vector<sp/>struct<sp/>of<sp/>type<sp/>ULLInt</highlight></codeline>
<codeline lineno="768"><highlight class="comment"><sp/>*<sp/>/param<sp/>value<sp/>The<sp/>scalar<sp/>value<sp/>of<sp/>type<sp/>unsigned<sp/>long<sp/>long<sp/>int</highlight></codeline>
<codeline lineno="769"><highlight class="comment"><sp/>*<sp/>/param<sp/>index<sp/>The<sp/>index<sp/>where<sp/>the<sp/>data<sp/>will<sp/>be<sp/>pushed.</highlight></codeline>
<codeline lineno="770"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="771"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="772"><highlight class="comment"><sp/>*<sp/>#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline lineno="773"><highlight class="comment"><sp/>*<sp/>#include<sp/>&quot;print.h&quot;</highlight></codeline>
<codeline lineno="774"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="775"><highlight class="comment"><sp/>*<sp/>ULLInt<sp/>vec;</highlight></codeline>
<codeline lineno="776"><highlight class="comment"><sp/>*<sp/>init_ullong_vector(vec,<sp/>3);</highlight></codeline>
<codeline lineno="777"><highlight class="comment"><sp/>*<sp/>push_ullong_vector(vec,<sp/>1,<sp/>vec.active_length);</highlight></codeline>
<codeline lineno="778"><highlight class="comment"><sp/>*<sp/>push_ullong_vector(vec,<sp/>2,<sp/>vec.active_length);</highlight></codeline>
<codeline lineno="779"><highlight class="comment"><sp/>*<sp/>push_ullong_vector(vec,<sp/>5,<sp/>0);</highlight></codeline>
<codeline lineno="780"><highlight class="comment"><sp/>*<sp/>PRINT(vec);</highlight></codeline>
<codeline lineno="781"><highlight class="comment"><sp/>*<sp/>//<sp/>&gt;&gt;<sp/>[<sp/>5,<sp/>1,<sp/>2<sp/>]</highlight></codeline>
<codeline lineno="782"><highlight class="comment"><sp/>*<sp/>free_ullong_vector(vec)&apos;</highlight></codeline>
<codeline lineno="783"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="784"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a3478a298e62d85cb93f11a78f64d6f80" kindref="member">push_ullong_vector</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="789"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>pushes<sp/>a<sp/>scalar<sp/>unsigned<sp/>float<sp/>value<sp/>to<sp/>a<sp/>user<sp/>defined<sp/>indice</highlight></codeline>
<codeline lineno="790"><highlight class="comment"><sp/>*<sp/>in<sp/>a<sp/>Flt<sp/>vector<sp/>struc.</highlight></codeline>
<codeline lineno="791"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="792"><highlight class="comment"><sp/>*<sp/>/param<sp/>vec<sp/>A<sp/>vector<sp/>struct<sp/>of<sp/>type<sp/>Flt</highlight></codeline>
<codeline lineno="793"><highlight class="comment"><sp/>*<sp/>/param<sp/>value<sp/>The<sp/>scalar<sp/>value<sp/>of<sp/>type<sp/>float</highlight></codeline>
<codeline lineno="794"><highlight class="comment"><sp/>*<sp/>/param<sp/>index<sp/>The<sp/>index<sp/>where<sp/>the<sp/>data<sp/>will<sp/>be<sp/>pushed.</highlight></codeline>
<codeline lineno="795"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="796"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="797"><highlight class="comment"><sp/>*<sp/>#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline lineno="798"><highlight class="comment"><sp/>*<sp/>#include<sp/>&quot;print.h&quot;</highlight></codeline>
<codeline lineno="799"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="800"><highlight class="comment"><sp/>*<sp/>Flt<sp/>vec;</highlight></codeline>
<codeline lineno="801"><highlight class="comment"><sp/>*<sp/>init_float_vector(vec,<sp/>3);</highlight></codeline>
<codeline lineno="802"><highlight class="comment"><sp/>*<sp/>push_float_vector(vec,<sp/>1.f,<sp/>vec.active_length);</highlight></codeline>
<codeline lineno="803"><highlight class="comment"><sp/>*<sp/>push_float_vector(vec,<sp/>2.f,<sp/>vec.active_length);</highlight></codeline>
<codeline lineno="804"><highlight class="comment"><sp/>*<sp/>push_float_vector(vec,<sp/>5.f,<sp/>0);</highlight></codeline>
<codeline lineno="805"><highlight class="comment"><sp/>*<sp/>PRINT(vec);</highlight></codeline>
<codeline lineno="806"><highlight class="comment"><sp/>*<sp/>//<sp/>&gt;&gt;<sp/>[<sp/>5.000,<sp/>1.000,<sp/>2.000<sp/>]</highlight></codeline>
<codeline lineno="807"><highlight class="comment"><sp/>*<sp/>free_float_vector(vec)&apos;</highlight></codeline>
<codeline lineno="808"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="809"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a31e02f437f4f9f43d1126e017ae1cac3" kindref="member">push_float_vector</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="814"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>pushes<sp/>a<sp/>scalar<sp/>unsigned<sp/>double<sp/>value<sp/>to<sp/>a<sp/>user<sp/>defined<sp/>indice</highlight></codeline>
<codeline lineno="815"><highlight class="comment"><sp/>*<sp/>in<sp/>a<sp/>Dble<sp/>vector<sp/>struc.</highlight></codeline>
<codeline lineno="816"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="817"><highlight class="comment"><sp/>*<sp/>/param<sp/>vec<sp/>A<sp/>vector<sp/>struct<sp/>of<sp/>type<sp/>Dble</highlight></codeline>
<codeline lineno="818"><highlight class="comment"><sp/>*<sp/>/param<sp/>value<sp/>The<sp/>scalar<sp/>value<sp/>of<sp/>type<sp/>double</highlight></codeline>
<codeline lineno="819"><highlight class="comment"><sp/>*<sp/>/param<sp/>index<sp/>The<sp/>index<sp/>where<sp/>the<sp/>data<sp/>will<sp/>be<sp/>pushed.</highlight></codeline>
<codeline lineno="820"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="821"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="822"><highlight class="comment"><sp/>*<sp/>#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline lineno="823"><highlight class="comment"><sp/>*<sp/>#include<sp/>&quot;print.h&quot;</highlight></codeline>
<codeline lineno="824"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="825"><highlight class="comment"><sp/>*<sp/>Dble<sp/>vec;</highlight></codeline>
<codeline lineno="826"><highlight class="comment"><sp/>*<sp/>init_double_vector(vec,<sp/>3);</highlight></codeline>
<codeline lineno="827"><highlight class="comment"><sp/>*<sp/>push_double_vector(vec,<sp/>1.,<sp/>vec.active_length);</highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/>*<sp/>push_double_vector(vec,<sp/>2.,<sp/>vec.active_length);</highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/>*<sp/>push_double_vector(vec,<sp/>5.,<sp/>0);</highlight></codeline>
<codeline lineno="830"><highlight class="comment"><sp/>*<sp/>PRINT(vec);</highlight></codeline>
<codeline lineno="831"><highlight class="comment"><sp/>*<sp/>//<sp/>&gt;&gt;<sp/>[<sp/>5.000,<sp/>1.000,<sp/>2.000<sp/>]</highlight></codeline>
<codeline lineno="832"><highlight class="comment"><sp/>*<sp/>free_double_vector(vec)&apos;</highlight></codeline>
<codeline lineno="833"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="834"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ab312c467d82a0fccc66cbb89a6b8de5c" kindref="member">push_double_vector</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="839"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>pushes<sp/>a<sp/>scalar<sp/>unsigned<sp/>long<sp/>double<sp/>value<sp/>to<sp/>a<sp/>user<sp/>defined<sp/>indice</highlight></codeline>
<codeline lineno="840"><highlight class="comment"><sp/>*<sp/>in<sp/>a<sp/>LDble<sp/>vector<sp/>struc.</highlight></codeline>
<codeline lineno="841"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="842"><highlight class="comment"><sp/>*<sp/>/param<sp/>vec<sp/>A<sp/>vector<sp/>struct<sp/>of<sp/>type<sp/>LDble</highlight></codeline>
<codeline lineno="843"><highlight class="comment"><sp/>*<sp/>/param<sp/>value<sp/>The<sp/>scalar<sp/>value<sp/>of<sp/>type<sp/>long<sp/>double</highlight></codeline>
<codeline lineno="844"><highlight class="comment"><sp/>*<sp/>/param<sp/>index<sp/>The<sp/>index<sp/>where<sp/>the<sp/>data<sp/>will<sp/>be<sp/>pushed.</highlight></codeline>
<codeline lineno="845"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="846"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="847"><highlight class="comment"><sp/>*<sp/>#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline lineno="848"><highlight class="comment"><sp/>*<sp/>#include<sp/>&quot;print.h&quot;</highlight></codeline>
<codeline lineno="849"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="850"><highlight class="comment"><sp/>*<sp/>LDble<sp/>vec;</highlight></codeline>
<codeline lineno="851"><highlight class="comment"><sp/>*<sp/>init_ldouble_vector(vec,<sp/>3);</highlight></codeline>
<codeline lineno="852"><highlight class="comment"><sp/>*<sp/>push_ldouble_vector(vec,<sp/>1.,<sp/>vec.active_length);</highlight></codeline>
<codeline lineno="853"><highlight class="comment"><sp/>*<sp/>push_ldouble_vector(vec,<sp/>2.,<sp/>vec.active_length);</highlight></codeline>
<codeline lineno="854"><highlight class="comment"><sp/>*<sp/>push_ldouble_vector(vec,<sp/>5.,<sp/>0);</highlight></codeline>
<codeline lineno="855"><highlight class="comment"><sp/>*<sp/>PRINT(vec);</highlight></codeline>
<codeline lineno="856"><highlight class="comment"><sp/>*<sp/>//<sp/>&gt;&gt;<sp/>[<sp/>5.000,<sp/>1.000,<sp/>2.000<sp/>]</highlight></codeline>
<codeline lineno="857"><highlight class="comment"><sp/>*<sp/>free_ldouble_vector(vec)&apos;</highlight></codeline>
<codeline lineno="858"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="859"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ad001560a2793c40efb1c64532cefe2e2" kindref="member">push_ldouble_vector</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="864"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>pushes<sp/>a<sp/>scalar<sp/>char<sp/>value<sp/>to<sp/>a<sp/>user<sp/>defined<sp/>indice</highlight></codeline>
<codeline lineno="865"><highlight class="comment"><sp/>*<sp/>in<sp/>a<sp/>Char<sp/>vector<sp/>struc.</highlight></codeline>
<codeline lineno="866"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="867"><highlight class="comment"><sp/>*<sp/>/param<sp/>vec<sp/>A<sp/>vector<sp/>struct<sp/>of<sp/>type<sp/>Char</highlight></codeline>
<codeline lineno="868"><highlight class="comment"><sp/>*<sp/>/param<sp/>value<sp/>The<sp/>scalar<sp/>value<sp/>of<sp/>type<sp/>char</highlight></codeline>
<codeline lineno="869"><highlight class="comment"><sp/>*<sp/>/param<sp/>index<sp/>The<sp/>index<sp/>where<sp/>the<sp/>data<sp/>will<sp/>be<sp/>pushed.</highlight></codeline>
<codeline lineno="870"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="871"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="872"><highlight class="comment"><sp/>*<sp/>#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline lineno="873"><highlight class="comment"><sp/>*<sp/>#include<sp/>&quot;print.h&quot;</highlight></codeline>
<codeline lineno="874"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="875"><highlight class="comment"><sp/>*<sp/>Char<sp/>vec;</highlight></codeline>
<codeline lineno="876"><highlight class="comment"><sp/>*<sp/>init_char_vector(vec,<sp/>3);</highlight></codeline>
<codeline lineno="877"><highlight class="comment"><sp/>*<sp/>push_char_vector(vec,<sp/>&apos;a&apos;,<sp/>vec.active_length);</highlight></codeline>
<codeline lineno="878"><highlight class="comment"><sp/>*<sp/>push_char_vector(vec,<sp/>&apos;b&apos;,<sp/>vec.active_length);</highlight></codeline>
<codeline lineno="879"><highlight class="comment"><sp/>*<sp/>push_char_vector(vec,<sp/>&apos;c&apos;,<sp/>0);</highlight></codeline>
<codeline lineno="880"><highlight class="comment"><sp/>*<sp/>PRINT(vec);</highlight></codeline>
<codeline lineno="881"><highlight class="comment"><sp/>*<sp/>//<sp/>&gt;&gt;<sp/>[<sp/>c,<sp/>a,<sp/>b<sp/>]</highlight></codeline>
<codeline lineno="882"><highlight class="comment"><sp/>*<sp/>free_char_vector(vec)&apos;</highlight></codeline>
<codeline lineno="883"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="884"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ab4f076e9a6e7d0795c2c3a0216c5c97e" kindref="member">push_char_vector</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="889"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>pushes<sp/>a<sp/>scalar<sp/>char<sp/>value<sp/>to<sp/>a<sp/>user<sp/>defined<sp/>indice</highlight></codeline>
<codeline lineno="890"><highlight class="comment"><sp/>*<sp/>in<sp/>a<sp/>Char<sp/>vector<sp/>struc.</highlight></codeline>
<codeline lineno="891"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="892"><highlight class="comment"><sp/>*<sp/>/param<sp/>vec<sp/>A<sp/>vector<sp/>struct<sp/>of<sp/>type<sp/>Char</highlight></codeline>
<codeline lineno="893"><highlight class="comment"><sp/>*<sp/>/param<sp/>value<sp/>The<sp/>scalar<sp/>value<sp/>of<sp/>type<sp/>char</highlight></codeline>
<codeline lineno="894"><highlight class="comment"><sp/>*<sp/>/param<sp/>index<sp/>The<sp/>index<sp/>where<sp/>the<sp/>data<sp/>will<sp/>be<sp/>pushed.</highlight></codeline>
<codeline lineno="895"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="896"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="897"><highlight class="comment"><sp/>*<sp/>#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline lineno="898"><highlight class="comment"><sp/>*<sp/>#include<sp/>&quot;print.h&quot;</highlight></codeline>
<codeline lineno="899"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="900"><highlight class="comment"><sp/>*<sp/>Char<sp/>vec;</highlight></codeline>
<codeline lineno="901"><highlight class="comment"><sp/>*<sp/>init_uchar_vector(vec,<sp/>3);</highlight></codeline>
<codeline lineno="902"><highlight class="comment"><sp/>*<sp/>push_uchar_vector(vec,<sp/>&apos;a&apos;,<sp/>vec.active_length);</highlight></codeline>
<codeline lineno="903"><highlight class="comment"><sp/>*<sp/>push_uchar_vector(vec,<sp/>&apos;b&apos;,<sp/>vec.active_length);</highlight></codeline>
<codeline lineno="904"><highlight class="comment"><sp/>*<sp/>push_uchar_vector(vec,<sp/>&apos;c&apos;,<sp/>0);</highlight></codeline>
<codeline lineno="905"><highlight class="comment"><sp/>*<sp/>PRINT(vec);</highlight></codeline>
<codeline lineno="906"><highlight class="comment"><sp/>*<sp/>//<sp/>&gt;&gt;<sp/>[<sp/>c,<sp/>a,<sp/>b<sp/>]</highlight></codeline>
<codeline lineno="907"><highlight class="comment"><sp/>*<sp/>free_uchar_vector(vec)&apos;</highlight></codeline>
<codeline lineno="908"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="909"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1acc6fd3b434ba25d3473adff60160500b" kindref="member">push_uchar_vector</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a078616c26d55c1ddb2ec4c551298a4f8" kindref="member">push_string_vector</ref>(<ref refid="structString" kindref="compound">String</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="938"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>pushes<sp/>a<sp/>scalar<sp/>bool<sp/>value<sp/>to<sp/>a<sp/>user<sp/>defined<sp/>indice</highlight></codeline>
<codeline lineno="939"><highlight class="comment"><sp/>*<sp/>in<sp/>a<sp/>Bool<sp/>vector<sp/>struc.</highlight></codeline>
<codeline lineno="940"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="941"><highlight class="comment"><sp/>*<sp/>/param<sp/>vec<sp/>A<sp/>vector<sp/>struct<sp/>of<sp/>type<sp/>Bool</highlight></codeline>
<codeline lineno="942"><highlight class="comment"><sp/>*<sp/>/param<sp/>value<sp/>The<sp/>scalar<sp/>value<sp/>of<sp/>type<sp/>bool</highlight></codeline>
<codeline lineno="943"><highlight class="comment"><sp/>*<sp/>/param<sp/>index<sp/>The<sp/>index<sp/>where<sp/>the<sp/>data<sp/>will<sp/>be<sp/>pushed.</highlight></codeline>
<codeline lineno="944"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="945"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="946"><highlight class="comment"><sp/>*<sp/>#include<sp/>&quot;vector.h&quot;</highlight></codeline>
<codeline lineno="947"><highlight class="comment"><sp/>*<sp/>#include<sp/>&quot;print.h&quot;</highlight></codeline>
<codeline lineno="948"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="949"><highlight class="comment"><sp/>*<sp/>Bool<sp/>vec;</highlight></codeline>
<codeline lineno="950"><highlight class="comment"><sp/>*<sp/>init_bool_vector(vec,<sp/>3);</highlight></codeline>
<codeline lineno="951"><highlight class="comment"><sp/>*<sp/>push_bool_vector(vec,<sp/>true,<sp/>vec.active_length);</highlight></codeline>
<codeline lineno="952"><highlight class="comment"><sp/>*<sp/>push_bool_vector(vec,<sp/>true,<sp/>vec.active_length);</highlight></codeline>
<codeline lineno="953"><highlight class="comment"><sp/>*<sp/>push_bool_vector(vec,<sp/>false,<sp/>0);</highlight></codeline>
<codeline lineno="954"><highlight class="comment"><sp/>*<sp/>PRINT(vec);</highlight></codeline>
<codeline lineno="955"><highlight class="comment"><sp/>*<sp/>//<sp/>&gt;&gt;<sp/>[<sp/>true,<sp/>true,<sp/>false<sp/>]</highlight></codeline>
<codeline lineno="956"><highlight class="comment"><sp/>*<sp/>free_bool_vector(vec)&apos;</highlight></codeline>
<codeline lineno="957"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="958"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a66a1a1c291efbab607defa13421167dc" kindref="member">push_bool_vector</ref>(<ref refid="structBool" kindref="compound">Bool</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INSERT_TYPE_VECTOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a2ed595a869e30a4c834c1d2cf5b934ee" kindref="member">insert_short_vector</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*elements,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_indices,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1aa8495c3a316b6d93c8697d194c86fc2b" kindref="member">insert_ushort_vector</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*elements,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_indices,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a0acf8b86d4a95be517c7af80f8eff4ac" kindref="member">insert_int_vector</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*elements,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_indices,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ad78d40537dece17df4f506fd6ba7dc34" kindref="member">insert_uint_vector</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*elements,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_indices,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ab5d840518e5e7bbd9ed243681b7124f7" kindref="member">insert_long_vector</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*elements,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_indices,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1aa419c32bb276bfe866787e1744669b94" kindref="member">insert_ulong_vector</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*elements,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_indices,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a9817d90055331624db7529c5d74a80ad" kindref="member">insert_llong_vector</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*elements,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_indices,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1afccda80cf8e96d76846df29a256f6974" kindref="member">insert_ullong_vector</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*elements,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_indices,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a17ee89c38df38d9d1d5b0cb2e33266d1" kindref="member">insert_float_vector</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*elements,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_indices,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1af1e86e2b45b0339cc18ba5b35bf01132" kindref="member">insert_double_vector</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*elements,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_indices,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a0ec3e3b802f62c5f9cdd9b7d197bd4a1" kindref="member">insert_ldouble_vector</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*elements,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_indices,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a9e9db9d87d5a9f3bb6dae1ba5668ef12" kindref="member">insert_char_vector</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*elements,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_indices,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ae5b1c45f4d2083c6d87f217646609a2d" kindref="member">insert_uchar_vector</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*elements,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_indices,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ab344e3b36aa397f037cb2c573e1d3aff" kindref="member">insert_bool_vector</ref>(<ref refid="structBool" kindref="compound">Bool</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*elements,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_indices,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a9c92e1232117e3d2f2f9f93b700058df" kindref="member">insert_string_vector</ref>(<ref refid="structString" kindref="compound">String</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**elements,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_indices,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight><highlight class="comment">//<sp/>POP_VEC_INDEX<sp/>prototypes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a90c0d394579f3950b22adabb66f153e9" kindref="member">pop_short_vector_index</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ab5f9826948a1e75b6ffa74b2e801f8c5" kindref="member">pop_ushort_vector_index</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1af0ecebd36b313d07d43f40698bd5508f" kindref="member">pop_int_vector_index</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1aea61eee2cd7481c1d34d13ba4a27e669" kindref="member">pop_uint_vector_index</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ade7d072b4cbbed3560461122ff9bf2d1" kindref="member">pop_long_vector_index</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1aee6e8f2b009cc7205dfd8c143b8e9839" kindref="member">pop_ulong_vector_index</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a6475916b10de913b8859fbd0b8312557" kindref="member">pop_llong_vector_index</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a52f4d32e9312b40967f4c0ee3de88e7a" kindref="member">pop_ullong_vector_index</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a7f179d98deb7852196afc7e3d26ef06d" kindref="member">pop_float_vector_index</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a8d2545eb603560d67e5c481075e5d0fc" kindref="member">pop_double_vector_index</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a3964e5480d290ac44a95680e52706f9d" kindref="member">pop_ldouble_vector_index</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a4f9d1488d50bc3889fc04afc18fa9958" kindref="member">pop_char_vector_index</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a7527a193c89c32c07eba99e8abc08574" kindref="member">pop_uchar_vector_index</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1710"><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a69479bf6e334f44f372305c8b1b13bb3" kindref="member">pop_bool_vector_index</ref>(<ref refid="structBool" kindref="compound">Bool</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1735"><highlight class="normal"></highlight></codeline>
<codeline lineno="1757"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a4db2688e1c0d0d477c8a7168d811956d" kindref="member">pop_string_vector_index</ref>(<ref refid="structString" kindref="compound">String</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1760"><highlight class="normal"></highlight><highlight class="comment">//<sp/>REPLACE_TYPE_VALUES<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1761"><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a6f10b6c383f01d0f64ccdbedcbf2f9c6" kindref="member">replace_short_vector_values</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>old_value,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_value);</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a879f3876d14b47d940dbe55a1eec452e" kindref="member">replace_ushort_vector_values</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>old_value,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_value);</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1811"><highlight class="normal"></highlight></codeline>
<codeline lineno="1834"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a7670474ec5b862ec981a62daa995aa3b" kindref="member">replace_int_vector_values</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>old_value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_value);</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"></highlight></codeline>
<codeline lineno="1859"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a9d98a8399e52f97b6771d676b3919319" kindref="member">replace_uint_vector_values</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>old_value,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_value);</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a8f344f297fe759011551c5f2bb5e0161" kindref="member">replace_long_vector_values</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>old_value,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_value);</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight></codeline>
<codeline lineno="1909"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a3354495712d1e3910ca4e6a33ee1c1df" kindref="member">replace_ulong_vector_values</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>old_value,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_value);</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1911"><highlight class="normal"></highlight></codeline>
<codeline lineno="1934"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a6fbef65375cd1143dadb2045d4a4cc82" kindref="member">replace_llong_vector_values</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>old_value,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_value);</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal"></highlight></codeline>
<codeline lineno="1959"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1acdb36a4f7fabea5ff887469c25bcaac3" kindref="member">replace_ullong_vector_values</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>old_value,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_value);</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="normal"></highlight></codeline>
<codeline lineno="1984"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1aafe1e760a31236df3e8d9b5d4fedf79e" kindref="member">replace_float_vector_values</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>old_value,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>new_value);</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"></highlight></codeline>
<codeline lineno="2009"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a141f86441673f219db9af026644dee3e" kindref="member">replace_double_vector_values</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>old_value,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>new_value);</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2011"><highlight class="normal"></highlight></codeline>
<codeline lineno="2034"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a344c029c451a00a0a90e20b34569db22" kindref="member">replace_ldouble_vector_values</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>old_value,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>new_value);</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2036"><highlight class="normal"></highlight></codeline>
<codeline lineno="2059"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a8b7c3baf36c7ef6deca8011f2d622119" kindref="member">replace_char_vector_values</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>old_value,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>new_value);</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2061"><highlight class="normal"></highlight></codeline>
<codeline lineno="2084"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a8b8b55713c6eeeba3f8bb8fbbb08ad10" kindref="member">replace_uchar_vector_values</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>old_value,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>new_value);</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"></highlight></codeline>
<codeline lineno="2109"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ab345b0d10cef3cb87e552791440398e9" kindref="member">replace_bool_vector_values</ref>(<ref refid="structBool" kindref="compound">Bool</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>old_value,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>new_value);</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2111"><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a1556bb53212c3c454a2ddb3f4c2f4c8a" kindref="member">replace_string_vector_values</ref>(<ref refid="structString" kindref="compound">String</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*old_value,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*new_value);</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FREE_TYPE_VEC<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2136"><highlight class="normal"></highlight></codeline>
<codeline lineno="2145"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a8a383d2299a326d3c0ded94c19d73393" kindref="member">free_short_vector</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2147"><highlight class="normal"></highlight></codeline>
<codeline lineno="2156"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a3765cd4f6e59bada679e05ea6dacfff5" kindref="member">free_ushort_vector</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2158"><highlight class="normal"></highlight></codeline>
<codeline lineno="2167"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ab2c13b705440e4d4d53825bb16929ff6" kindref="member">free_int_vector</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2169"><highlight class="normal"></highlight></codeline>
<codeline lineno="2178"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a6195f400606be104b4461cd9876f93ce" kindref="member">free_uint_vector</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2180"><highlight class="normal"></highlight></codeline>
<codeline lineno="2189"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1af1ab528ebf7f47a278e3be3b02e9acee" kindref="member">free_long_vector</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2191"><highlight class="normal"></highlight></codeline>
<codeline lineno="2200"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a9a05407a3434648f10f4416a7874150d" kindref="member">free_ulong_vector</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"></highlight></codeline>
<codeline lineno="2211"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1af92bc034e6f34814eea1008629f41ef9" kindref="member">free_llong_vector</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2213"><highlight class="normal"></highlight></codeline>
<codeline lineno="2222"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a605f038b309fb25e53f637c9e9b6e4bd" kindref="member">free_ullong_vector</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2224"><highlight class="normal"></highlight></codeline>
<codeline lineno="2233"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1aa0efda9f361b9e9219f5afc379c7e6cc" kindref="member">free_float_vector</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2235"><highlight class="normal"></highlight></codeline>
<codeline lineno="2244"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a0d9577d0256e0e006d1c55a12ba1bffd" kindref="member">free_double_vector</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2246"><highlight class="normal"></highlight></codeline>
<codeline lineno="2255"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a89e6af78e123543fefe3333963de0e83" kindref="member">free_ldouble_vector</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2257"><highlight class="normal"></highlight></codeline>
<codeline lineno="2266"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1afef1cb622b3f54256849a3b5446a7af4" kindref="member">free_char_vector</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"></highlight></codeline>
<codeline lineno="2277"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a9f3fcb3deda563d834c9d3d13f097268" kindref="member">free_uchar_vector</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2279"><highlight class="normal"></highlight></codeline>
<codeline lineno="2288"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a5783a319298af13236def83e42f00799" kindref="member">free_bool_vector</ref>(<ref refid="structBool" kindref="compound">Bool</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2290"><highlight class="normal"></highlight></codeline>
<codeline lineno="2297"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a2975c4c7c36efebc98b926abfc4ba837" kindref="member">free_string_vector</ref>(<ref refid="structString" kindref="compound">String</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2299"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2300"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DELETE_VEC_DUPLICATES<sp/>Prototypes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2301"><highlight class="normal"></highlight></codeline>
<codeline lineno="2323"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a35b16d98a38d37826ee118f4860d680a" kindref="member">delete_short_vector_duplicates</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2325"><highlight class="normal"></highlight></codeline>
<codeline lineno="2347"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a372a58405f86fa4ef22f53af37408017" kindref="member">delete_ushort_vector_duplicates</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2349"><highlight class="normal"></highlight></codeline>
<codeline lineno="2371"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a68a325016f45777566e1eae4b15c4238" kindref="member">delete_int_vector_duplicates</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2373"><highlight class="normal"></highlight></codeline>
<codeline lineno="2395"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ab5a49e7e86d86796744395431d475f74" kindref="member">delete_uint_vector_duplicates</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2397"><highlight class="normal"></highlight></codeline>
<codeline lineno="2419"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a10ee633f27cbd6252d41ffd0761f6392" kindref="member">delete_long_vector_duplicates</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2421"><highlight class="normal"></highlight></codeline>
<codeline lineno="2443"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1aa7b0890be4e8157712930fedaf437c8a" kindref="member">delete_ulong_vector_duplicates</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2445"><highlight class="normal"></highlight></codeline>
<codeline lineno="2467"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a8f895e83e3b4e24dfdd253508da61875" kindref="member">delete_llong_vector_duplicates</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2469"><highlight class="normal"></highlight></codeline>
<codeline lineno="2491"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a91794ceff19b304073f15ca82fe38b0b" kindref="member">delete_ullong_vector_duplicates</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2493"><highlight class="normal"></highlight></codeline>
<codeline lineno="2515"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a49e7b8e0e17f4570f95875965ea8c2d6" kindref="member">delete_float_vector_duplicates</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2517"><highlight class="normal"></highlight></codeline>
<codeline lineno="2539"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a0bf0ceecb4ef742811c3b2ed8384d432" kindref="member">delete_double_vector_duplicates</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2541"><highlight class="normal"></highlight></codeline>
<codeline lineno="2563"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a915b5e5eff06f5a04ff068c94cdcffb4" kindref="member">delete_ldouble_vector_duplicates</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2565"><highlight class="normal"></highlight></codeline>
<codeline lineno="2587"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a5a01cb2f66c78b55858a0941ad9459af" kindref="member">delete_char_vector_duplicates</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2589"><highlight class="normal"></highlight></codeline>
<codeline lineno="2611"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a51740972d62e96e248d8a07eb65e48aa" kindref="member">delete_uchar_vector_duplicates</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2613"><highlight class="normal"></highlight></codeline>
<codeline lineno="2635"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a1fe7315ba2394e61b43b99bfc765bd75" kindref="member">delete_bool_vector_duplicates</ref>(<ref refid="structBool" kindref="compound">Bool</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2637"><highlight class="normal"></highlight></codeline>
<codeline lineno="2658"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a1b3482060f9c607f98dbef4845db335f" kindref="member">delete_string_vector_duplicates</ref>(<ref refid="structString" kindref="compound">String</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2660"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2661"><highlight class="normal"></highlight><highlight class="comment">//<sp/>REVERSE_TYPE_VEC<sp/>FUCNTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2662"><highlight class="normal"></highlight></codeline>
<codeline lineno="2680"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a6388f663263c0c5a219bc2da551d0584" kindref="member">reverse_short_vector</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2682"><highlight class="normal"></highlight></codeline>
<codeline lineno="2700"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a15f75e9b6b4192aa83d95635419865da" kindref="member">reverse_ushort_vector</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2702"><highlight class="normal"></highlight></codeline>
<codeline lineno="2720"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a0ee6d80508a610096b84893a0edd7e82" kindref="member">reverse_int_vector</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2722"><highlight class="normal"></highlight></codeline>
<codeline lineno="2740"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a58e127cf5386ca2152ebafcf4dbb8bbd" kindref="member">reverse_uint_vector</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2742"><highlight class="normal"></highlight></codeline>
<codeline lineno="2760"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a0d89b67e906a169f63e1bfc679df018f" kindref="member">reverse_long_vector</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2762"><highlight class="normal"></highlight></codeline>
<codeline lineno="2780"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a6196a5bfffe22d6493b2bda77a9340fb" kindref="member">reverse_ulong_vector</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2782"><highlight class="normal"></highlight></codeline>
<codeline lineno="2800"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a3247bcffd4ad7a9f75c9a2e88ff7bd81" kindref="member">reverse_llong_vector</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2802"><highlight class="normal"></highlight></codeline>
<codeline lineno="2820"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1aa77d55a8f5e4ab149edb6c75d98a94ce" kindref="member">reverse_ullong_vector</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2822"><highlight class="normal"></highlight></codeline>
<codeline lineno="2840"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a086bbd995dc83d50532944330a44c450" kindref="member">reverse_float_vector</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2842"><highlight class="normal"></highlight></codeline>
<codeline lineno="2860"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a628e48950294512d38556f8b194284d4" kindref="member">reverse_double_vector</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2862"><highlight class="normal"></highlight></codeline>
<codeline lineno="2880"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a8a72b2219830bacf2a5ec926241ed924" kindref="member">reverse_ldouble_vector</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2882"><highlight class="normal"></highlight></codeline>
<codeline lineno="2900"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a06faa32f223a79c02cb771b19cc02a07" kindref="member">reverse_char_vector</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2902"><highlight class="normal"></highlight></codeline>
<codeline lineno="2920"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a42deacd361fac959a84262a54ebddcb0" kindref="member">reverse_uchar_vector</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2922"><highlight class="normal"></highlight></codeline>
<codeline lineno="2940"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a9b58a773830487b8a8f1973221e93366" kindref="member">reverse_bool_vector</ref>(<ref refid="structBool" kindref="compound">Bool</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2942"><highlight class="normal"></highlight></codeline>
<codeline lineno="2962"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a6297710c0ac2122db93e47a260e96ad8" kindref="member">reverse_string_vector</ref>(<ref refid="structString" kindref="compound">String</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2964"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2965"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SORT_TYPE_VEC<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2966"><highlight class="normal"></highlight></codeline>
<codeline lineno="2991"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a04f50afe6c127edeea202b08ad65f36a" kindref="member">sort_short_vector</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order);</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2993"><highlight class="normal"></highlight></codeline>
<codeline lineno="3018"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a68df688dc04c74d9e826b629ef0f98c3" kindref="member">sort_ushort_vector</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order);</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3020"><highlight class="normal"></highlight></codeline>
<codeline lineno="3045"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a722d90a04d08a5ece84ba7a2b8d04d6d" kindref="member">sort_int_vector</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order);</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3047"><highlight class="normal"></highlight></codeline>
<codeline lineno="3072"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a451f6cb1a5b4b2e77c1170c85656c3c6" kindref="member">sort_uint_vector</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order);</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3074"><highlight class="normal"></highlight></codeline>
<codeline lineno="3099"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a573e6f77db28f1a05eefd8a982f850c7" kindref="member">sort_long_vector</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order);</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3101"><highlight class="normal"></highlight></codeline>
<codeline lineno="3126"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1adf53d931d4b9c3ab9d62298b6d3df5cd" kindref="member">sort_ulong_vector</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order);</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3128"><highlight class="normal"></highlight></codeline>
<codeline lineno="3153"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ab1183f9c1a6c8a6d60b4457421e3072a" kindref="member">sort_llong_vector</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order);</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3155"><highlight class="normal"></highlight></codeline>
<codeline lineno="3180"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a3d45fbf7b754bf4bad8be3cbb6241a84" kindref="member">sort_ullong_vector</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order);</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3182"><highlight class="normal"></highlight></codeline>
<codeline lineno="3207"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1aa3e927c35eb4eb79cb87d6df026e01a1" kindref="member">sort_float_vector</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order);</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3209"><highlight class="normal"></highlight></codeline>
<codeline lineno="3234"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1aa461bbfa3be53bc5dc4c56c94fb7fa62" kindref="member">sort_double_vector</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order);</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3236"><highlight class="normal"></highlight></codeline>
<codeline lineno="3261"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a3745eaf35ed1dfbae01e83d5b93e185d" kindref="member">sort_ldouble_vector</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order);</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3263"><highlight class="normal"></highlight></codeline>
<codeline lineno="3289"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a0c29cab75728310a3b5b78681af2df21" kindref="member">sort_char_vector</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order);</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3291"><highlight class="normal"></highlight></codeline>
<codeline lineno="3317"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a88af2cb1285800957b1de71e783ee93a" kindref="member">sort_uchar_vector</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order);</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3319"><highlight class="normal"></highlight></codeline>
<codeline lineno="3345"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a68744cde4b7c17a0305d9cf512494a20" kindref="member">sort_bool_vector</ref>(<ref refid="structBool" kindref="compound">Bool</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order);</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3347"><highlight class="normal"></highlight></codeline>
<codeline lineno="3370"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1aead9f94df495db661d185ef0363ec1d6" kindref="member">sort_string_vector</ref>(<ref refid="structString" kindref="compound">String</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>low,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>high,<sp/><ref refid="vector_8h_1af40f59df20b550c793c470752e457636" kindref="member">sort_order</ref><sp/>order);</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3372"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3373"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SUM_TYPE_VEC<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3374"><highlight class="normal"></highlight></codeline>
<codeline lineno="3392"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a0684e2f1aee143f1769dd8ff908c852c" kindref="member">sum_char_vector</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3394"><highlight class="normal"></highlight></codeline>
<codeline lineno="3412"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a643cb8d97c368f436a0010dacfca2401" kindref="member">sum_uchar_vector</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="3431"><highlight class="comment"></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a54d410de6d79f482b3d560bcb78fd2ff" kindref="member">sum_short_vector</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3433"><highlight class="normal"></highlight></codeline>
<codeline lineno="3451"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a67f48de636722d00447f21d5040f8d81" kindref="member">sum_ushort_vector</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3453"><highlight class="normal"></highlight></codeline>
<codeline lineno="3471"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1aaf01dd9c2caec4100d4315bd8d525a30" kindref="member">sum_int_vector</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3473"><highlight class="normal"></highlight></codeline>
<codeline lineno="3491"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a791fe9c8f9bd1d04158b01c3aa022edd" kindref="member">sum_uint_vector</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3493"><highlight class="normal"></highlight></codeline>
<codeline lineno="3511"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1af2ca62fb5fa87cccef8750d24b3979da" kindref="member">sum_long_vector</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3513"><highlight class="normal"></highlight></codeline>
<codeline lineno="3531"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a3233da20e23c20659dd5aba81307b58d" kindref="member">sum_ulong_vector</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3533"><highlight class="normal"></highlight></codeline>
<codeline lineno="3551"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a838510507e7f386e844fd1e5e3ae494a" kindref="member">sum_llong_vector</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3553"><highlight class="normal"></highlight></codeline>
<codeline lineno="3571"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1af1cc1dfd0470ab00fc1537ebcbb5c089" kindref="member">sum_ullong_vector</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3573"><highlight class="normal"></highlight></codeline>
<codeline lineno="3591"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ab9177b68251ddf43f4a245afd559e462" kindref="member">sum_float_vector</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="3592"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3593"><highlight class="normal"></highlight></codeline>
<codeline lineno="3611"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a98a70f4f173d451a1ff5357f4779289d" kindref="member">sum_double_vector</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3613"><highlight class="normal"></highlight></codeline>
<codeline lineno="3631"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1af2df2f0fe19814004ab61a91521d7b21" kindref="member">sum_ldouble_vector</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3633"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3634"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CUMSUM_TYPE_VEC<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3635"><highlight class="normal"></highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><ref refid="structChar" kindref="compound">Char</ref><sp/><ref refid="vector_8h_1a877296aab1e625bc7b103322f6b93b14" kindref="member">cumsum_char_vector</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="3655"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3656"><highlight class="normal"></highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><ref refid="structUChar" kindref="compound">UChar</ref><sp/><ref refid="vector_8h_1a2850df1b78d17fd2e45847e8bf1e51c2" kindref="member">cumsum_uchar_vector</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="3676"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="3695"><highlight class="comment"></highlight><highlight class="normal"><ref refid="structShort" kindref="compound">Short</ref><sp/><ref refid="vector_8h_1a588f2bea0a2ac3d8bf87184d873a2804" kindref="member">cumsum_short_vector</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3697"><highlight class="normal"></highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><ref refid="structUShort" kindref="compound">UShort</ref><sp/><ref refid="vector_8h_1a94f7fe260f499b1a18150332e1a0e427" kindref="member">cumsum_ushort_vector</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3718"><highlight class="normal"></highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><ref refid="structInt" kindref="compound">Int</ref><sp/><ref refid="vector_8h_1acaf8f7f369483e4dcb9a7af53e79492c" kindref="member">cumsum_int_vector</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3739"><highlight class="normal"></highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><ref refid="structUInt" kindref="compound">UInt</ref><sp/><ref refid="vector_8h_1abe44138d94c38f7d65d62f63dddf668b" kindref="member">cumsum_uint_vector</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3760"><highlight class="normal"></highlight></codeline>
<codeline lineno="3779"><highlight class="normal"><ref refid="structLInt" kindref="compound">LInt</ref><sp/><ref refid="vector_8h_1aacdbfadbd42e44ba909b315b43152012" kindref="member">cumsum_long_vector</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="3780"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3781"><highlight class="normal"></highlight></codeline>
<codeline lineno="3800"><highlight class="normal"><ref refid="structULInt" kindref="compound">ULInt</ref><sp/><ref refid="vector_8h_1ae856339059aa7e6f5db1d5bd7de43306" kindref="member">cumsum_ulong_vector</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="3801"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3802"><highlight class="normal"></highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><ref refid="structLLInt" kindref="compound">LLInt</ref><sp/><ref refid="vector_8h_1a531b30e8b67bc20cad9865cc3d8afe50" kindref="member">cumsum_llong_vector</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="3822"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3823"><highlight class="normal"></highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/><ref refid="vector_8h_1a07bde722230b2f57f1b14304054d1d6a" kindref="member">cumsum_ullong_vector</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3844"><highlight class="normal"></highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><ref refid="structFlt" kindref="compound">Flt</ref><sp/><ref refid="vector_8h_1a9ddb912a129b46a9a2f2d147b4a1ddc8" kindref="member">cumsum_float_vector</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3865"><highlight class="normal"></highlight></codeline>
<codeline lineno="3884"><highlight class="normal"><ref refid="structDble" kindref="compound">Dble</ref><sp/><ref refid="vector_8h_1ae8512eab3bf15409bda6bce1d6ec0380" kindref="member">cumsum_double_vector</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3886"><highlight class="normal"></highlight></codeline>
<codeline lineno="3905"><highlight class="normal"><ref refid="structLDble" kindref="compound">LDble</ref><sp/><ref refid="vector_8h_1ae0f64fd00879ff39b5ffbca0e80c197b" kindref="member">cumsum_ldouble_vector</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="3906"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3907"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3908"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AVERAGE_TYPE_VEC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3909"><highlight class="normal"></highlight></codeline>
<codeline lineno="3928"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a0a47e22454ec90b6c959915dbc3c87a6" kindref="member">average_char_vector</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3930"><highlight class="normal"></highlight></codeline>
<codeline lineno="3949"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ad821bfcf3659a78a11a5c9c7fd72a277" kindref="member">average_uchar_vector</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="3950"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3951"><highlight class="normal"></highlight></codeline>
<codeline lineno="3970"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a5a553d82722c04ec4b613014fa1d0688" kindref="member">average_short_vector</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="3971"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3972"><highlight class="normal"></highlight></codeline>
<codeline lineno="3991"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a96018578b7bce5eb04f4b4dbbd63b582" kindref="member">average_ushort_vector</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3993"><highlight class="normal"></highlight></codeline>
<codeline lineno="4012"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a2e384c1e58cf1f6486ae0a8bc2e46379" kindref="member">average_int_vector</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4013"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4014"><highlight class="normal"></highlight></codeline>
<codeline lineno="4033"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a35959e6bd4010b04681750611d00a7b7" kindref="member">average_uint_vector</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4034"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4035"><highlight class="normal"></highlight></codeline>
<codeline lineno="4054"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ad1feee1c2712401a20fbe6699f5c4bc7" kindref="member">average_long_vector</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4055"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4056"><highlight class="normal"></highlight></codeline>
<codeline lineno="4075"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1aa94c4a725c6ab558c748baa93b652363" kindref="member">average_ulong_vector</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4077"><highlight class="normal"></highlight></codeline>
<codeline lineno="4096"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ae3782b50d088b4488da3a8283670ffcc" kindref="member">average_llong_vector</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4097"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4098"><highlight class="normal"></highlight></codeline>
<codeline lineno="4117"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1abb879670618c44d1259b4cb689d36698" kindref="member">average_ullong_vector</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4119"><highlight class="normal"></highlight></codeline>
<codeline lineno="4138"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a95e8f18d7457adb1784ca850c7afa01e" kindref="member">average_float_vector</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4140"><highlight class="normal"></highlight></codeline>
<codeline lineno="4159"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ab0985989db7774a2f4ccf0f6bc7fd0ed" kindref="member">average_double_vector</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4160"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4161"><highlight class="normal"></highlight></codeline>
<codeline lineno="4180"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a136fac1692146b0fc1dd1f548b6a07a4" kindref="member">average_ldouble_vector</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4181"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4182"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4183"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STDEV_TYPE_VEC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4184"><highlight class="normal"></highlight></codeline>
<codeline lineno="4202"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a918b7824d676e70026969bf6af72dba7" kindref="member">stdev_char_vector</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4204"><highlight class="normal"></highlight></codeline>
<codeline lineno="4222"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a9315ed5e7e8966f095ee8d334c5e10a4" kindref="member">stdev_uchar_vector</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4223"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="4241"><highlight class="comment"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a193f4372f93ae17ab490841af7e508c3" kindref="member">stdev_short_vector</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4242"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4243"><highlight class="normal"></highlight></codeline>
<codeline lineno="4261"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ae0c29568372c468d83c1a5f33d4c60c6" kindref="member">stdev_ushort_vector</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4262"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4263"><highlight class="normal"></highlight></codeline>
<codeline lineno="4281"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1aa469dd50aa2a8cd43ad5c577016145e8" kindref="member">stdev_int_vector</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4282"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4283"><highlight class="normal"></highlight></codeline>
<codeline lineno="4301"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a2a72fa8e25403401326d07853c45c7fe" kindref="member">stdev_uint_vector</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4302"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4303"><highlight class="normal"></highlight></codeline>
<codeline lineno="4321"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ab875bc51d7595b4e6fe536770cfe62c5" kindref="member">stdev_long_vector</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4322"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4323"><highlight class="normal"></highlight></codeline>
<codeline lineno="4341"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a3cd9fa1fbe73338e380ccc9b98a6b768" kindref="member">stdev_ulong_vector</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4342"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4343"><highlight class="normal"></highlight></codeline>
<codeline lineno="4361"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a5b29dc6f20528b67a4a53208c5beefe7" kindref="member">stdev_llong_vector</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4362"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4363"><highlight class="normal"></highlight></codeline>
<codeline lineno="4381"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a9cb0b02a7bedef69397ef758fd36baa6" kindref="member">stdev_ullong_vector</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4382"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4383"><highlight class="normal"></highlight></codeline>
<codeline lineno="4401"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1abb791f292ea37822fa3c8f20749b8571" kindref="member">stdev_float_vector</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4402"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4403"><highlight class="normal"></highlight></codeline>
<codeline lineno="4421"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1aa05c06bd35f0e74c8a07ef0257a8aa67" kindref="member">stdev_double_vector</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4423"><highlight class="normal"></highlight></codeline>
<codeline lineno="4441"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1abf8b31942231ba26f9f5d4729cdd5370" kindref="member">stdev_ldouble_vector</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4442"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4443"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4444"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MAX_TYPE_VEC<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4445"><highlight class="normal"></highlight></codeline>
<codeline lineno="4463"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ac45503684793e5582c2bdac1d7d52ba3" kindref="member">max_char_vector</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4464"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4465"><highlight class="normal"></highlight></codeline>
<codeline lineno="4483"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a20c0c3f6f0baca86dd48608bbf4fb02e" kindref="member">max_uchar_vector</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4484"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4485"><highlight class="normal"></highlight></codeline>
<codeline lineno="4503"><highlight class="normal"></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a9322308e4f52e03ae336549fd42b7934" kindref="member">max_short_vector</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4504"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4505"><highlight class="normal"></highlight></codeline>
<codeline lineno="4523"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a60d805f5dc29474286fb04c939b5c509" kindref="member">max_ushort_vector</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4524"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4525"><highlight class="normal"></highlight></codeline>
<codeline lineno="4543"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a2b015405abe5287fffe31e5dc0e31808" kindref="member">max_int_vector</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4544"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4545"><highlight class="normal"></highlight></codeline>
<codeline lineno="4563"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a174988fd6cd94257cb6332b91429839d" kindref="member">max_uint_vector</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4564"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4565"><highlight class="normal"></highlight></codeline>
<codeline lineno="4583"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a3b06accf11f120a22aec6d59ed16d9db" kindref="member">max_long_vector</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4584"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4585"><highlight class="normal"></highlight></codeline>
<codeline lineno="4603"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ab73b0a00fcc4f391123628e2913a19bb" kindref="member">max_ulong_vector</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4604"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4605"><highlight class="normal"></highlight></codeline>
<codeline lineno="4623"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a812e8c27f2970204cc8460728d13c96f" kindref="member">max_llong_vector</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4624"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4625"><highlight class="normal"></highlight></codeline>
<codeline lineno="4643"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a1960c8508e6fe43960e240626c497764" kindref="member">max_ullong_vector</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4644"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4645"><highlight class="normal"></highlight></codeline>
<codeline lineno="4663"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a6a09841dc59b5a463a167ee7c2911efe" kindref="member">max_float_vector</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4664"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4665"><highlight class="normal"></highlight></codeline>
<codeline lineno="4683"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a2da642346c710d417636ad41cd99b9a9" kindref="member">max_double_vector</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4684"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4685"><highlight class="normal"></highlight></codeline>
<codeline lineno="4703"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1adcda6720fac922e691d3bf4927edb42a" kindref="member">max_ldouble_vector</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4704"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4705"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4706"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MIN_TYPE_VEC<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4707"><highlight class="normal"></highlight></codeline>
<codeline lineno="4726"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a891486b9b55a8c3ac25a1225553fb0c7" kindref="member">min_char_vector</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4727"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4728"><highlight class="normal"></highlight></codeline>
<codeline lineno="4747"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a1dbc7c797a21eb6c44d009cb497b50ae" kindref="member">min_uchar_vector</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4748"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4749"><highlight class="normal"></highlight></codeline>
<codeline lineno="4767"><highlight class="normal"></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a21be2c6c074005bfa1c33603299f3181" kindref="member">min_short_vector</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4768"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4769"><highlight class="normal"></highlight></codeline>
<codeline lineno="4787"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a3b2bb12ccbe4e256ec4da071673dd601" kindref="member">min_ushort_vector</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4788"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4789"><highlight class="normal"></highlight></codeline>
<codeline lineno="4807"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1aad99e117541f381f0c14f5620507f6e1" kindref="member">min_int_vector</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4808"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4809"><highlight class="normal"></highlight></codeline>
<codeline lineno="4827"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a449905d346deae4f4a83314c592a5b80" kindref="member">min_uint_vector</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4828"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4829"><highlight class="normal"></highlight></codeline>
<codeline lineno="4847"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1aaff52778fc2f05ace6de3570530e9068" kindref="member">min_long_vector</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4848"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4849"><highlight class="normal"></highlight></codeline>
<codeline lineno="4867"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a98b9ea464f1a6e1012f3aae9031a8a13" kindref="member">min_ulong_vector</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4868"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4869"><highlight class="normal"></highlight></codeline>
<codeline lineno="4887"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ad1a7c046cbcac65a71e5442ec5680bdc" kindref="member">min_llong_vector</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4888"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4889"><highlight class="normal"></highlight></codeline>
<codeline lineno="4907"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a10aea428d676da30abd474d11dbab300" kindref="member">min_ullong_vector</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4908"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4909"><highlight class="normal"></highlight></codeline>
<codeline lineno="4927"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a37e7749c40c9ecefb35c6f677e6e2786" kindref="member">min_float_vector</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4928"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4929"><highlight class="normal"></highlight></codeline>
<codeline lineno="4947"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ac870c654ea8b8143650fb8504880d80a" kindref="member">min_double_vector</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4948"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4949"><highlight class="normal"></highlight></codeline>
<codeline lineno="4967"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1af3eef7302375a05b37b3ae4e0d8251a8" kindref="member">min_ldouble_vector</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="4968"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4969"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4970"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RANGE_TYPE_VEC<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4971"><highlight class="normal"></highlight></codeline>
<codeline lineno="4991"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ac3589c6090a8dc24ffe4211dbb42b15f" kindref="member">range_char_vector</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>end,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>delta);</highlight></codeline>
<codeline lineno="4992"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4993"><highlight class="normal"></highlight></codeline>
<codeline lineno="5013"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a14f0626112aa000e6739a14556f761ed" kindref="member">range_uchar_vector</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>end,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>delta);</highlight></codeline>
<codeline lineno="5014"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5015"><highlight class="normal"></highlight></codeline>
<codeline lineno="5035"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1adb305706da4585539cd057cfa0ec0e2c" kindref="member">range_short_vector</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delta);</highlight></codeline>
<codeline lineno="5036"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5037"><highlight class="normal"></highlight></codeline>
<codeline lineno="5057"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a062892c86bd6a4934d91c804684cf755" kindref="member">range_ushort_vector</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end,</highlight></codeline>
<codeline lineno="5058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delta);</highlight></codeline>
<codeline lineno="5059"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5060"><highlight class="normal"></highlight></codeline>
<codeline lineno="5080"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a184898353e0603cd18372448c8a842e4" kindref="member">range_int_vector</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delta);</highlight></codeline>
<codeline lineno="5081"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5082"><highlight class="normal"></highlight></codeline>
<codeline lineno="5102"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1adce9ffbf72bc5678dbd702bf9840f363" kindref="member">range_uint_vector</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delta);</highlight></codeline>
<codeline lineno="5103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5104"><highlight class="normal"></highlight></codeline>
<codeline lineno="5124"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1aed9932998976a7d3ce615075dd5af09b" kindref="member">range_long_vector</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delta);</highlight></codeline>
<codeline lineno="5125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5126"><highlight class="normal"></highlight></codeline>
<codeline lineno="5146"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a4fe9caa2febfe85a1107394d8b42c348" kindref="member">range_ulong_vector</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end,</highlight></codeline>
<codeline lineno="5147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delta);</highlight></codeline>
<codeline lineno="5148"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5149"><highlight class="normal"></highlight></codeline>
<codeline lineno="5169"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1afa81d739815cef7056167d48361e0891" kindref="member">range_llong_vector</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end,</highlight></codeline>
<codeline lineno="5170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delta);</highlight></codeline>
<codeline lineno="5171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5172"><highlight class="normal"></highlight></codeline>
<codeline lineno="5192"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a6b8d5f1723a1e5e9a0d03da80e93b68e" kindref="member">range_ullong_vector</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,</highlight></codeline>
<codeline lineno="5193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end,</highlight></codeline>
<codeline lineno="5194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delta);</highlight></codeline>
<codeline lineno="5195"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5196"><highlight class="normal"></highlight></codeline>
<codeline lineno="5216"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a85d0392c18b7db31c0a14bc2aa13448c" kindref="member">range_float_vector</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>end,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>delta);</highlight></codeline>
<codeline lineno="5217"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5218"><highlight class="normal"></highlight></codeline>
<codeline lineno="5238"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a636afa2f2e2af7dbbd34b7cb42d11163" kindref="member">range_double_vector</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>end,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>delta);</highlight></codeline>
<codeline lineno="5239"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5240"><highlight class="normal"></highlight></codeline>
<codeline lineno="5260"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ae5505a9a69a6701bcafa4b92eb06055f" kindref="member">range_ldouble_vector</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>end,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>delta);</highlight></codeline>
<codeline lineno="5261"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5262"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5263"><highlight class="normal"></highlight><highlight class="comment">//<sp/>COPY_TYPE_VECTOR<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5264"><highlight class="normal"></highlight></codeline>
<codeline lineno="5270"><highlight class="normal"><ref refid="structShort" kindref="compound">Short</ref><sp/><ref refid="vector_8h_1ab88c9075f7ac94dd8656a8eec4a14a94" kindref="member">copy_short_vector</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="5271"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5272"><highlight class="normal"></highlight></codeline>
<codeline lineno="5278"><highlight class="normal"><ref refid="structUShort" kindref="compound">UShort</ref><sp/><ref refid="vector_8h_1af70602cee86af9597513bc67b2878244" kindref="member">copy_ushort_vector</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="5279"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5280"><highlight class="normal"></highlight></codeline>
<codeline lineno="5286"><highlight class="normal"><ref refid="structInt" kindref="compound">Int</ref><sp/><ref refid="vector_8h_1a5fd73621c9da27949814495f00a3296f" kindref="member">copy_int_vector</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="5287"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5288"><highlight class="normal"></highlight></codeline>
<codeline lineno="5294"><highlight class="normal"><ref refid="structUInt" kindref="compound">UInt</ref><sp/><ref refid="vector_8h_1a6bf7c67135858a07103fff23436b7d77" kindref="member">copy_uint_vector</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="5295"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5296"><highlight class="normal"></highlight></codeline>
<codeline lineno="5302"><highlight class="normal"><ref refid="structLInt" kindref="compound">LInt</ref><sp/><ref refid="vector_8h_1abc614587816c37e5dfd70c2a832da165" kindref="member">copy_long_vector</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="5303"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5304"><highlight class="normal"></highlight></codeline>
<codeline lineno="5310"><highlight class="normal"><ref refid="structULInt" kindref="compound">ULInt</ref><sp/><ref refid="vector_8h_1a31f85f1454385a608eebc7d150417b7c" kindref="member">copy_ulong_vector</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="5311"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5312"><highlight class="normal"></highlight></codeline>
<codeline lineno="5318"><highlight class="normal"><ref refid="structLLInt" kindref="compound">LLInt</ref><sp/><ref refid="vector_8h_1a2a8c6a77d383c5251686fc600c829005" kindref="member">copy_llong_vector</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="5319"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5320"><highlight class="normal"></highlight></codeline>
<codeline lineno="5326"><highlight class="normal"><ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/><ref refid="vector_8h_1abe7076983c8f386b305b615137dcd249" kindref="member">copy_ullong_vector</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="5327"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5328"><highlight class="normal"></highlight></codeline>
<codeline lineno="5334"><highlight class="normal"><ref refid="structFlt" kindref="compound">Flt</ref><sp/><ref refid="vector_8h_1a440353dc4ac989fb88b34e7f5649dd05" kindref="member">copy_float_vector</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="5335"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5336"><highlight class="normal"></highlight></codeline>
<codeline lineno="5342"><highlight class="normal"><ref refid="structDble" kindref="compound">Dble</ref><sp/><ref refid="vector_8h_1a2d51a8a92a5c0e73345ade59b126ff35" kindref="member">copy_double_vector</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="5343"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5344"><highlight class="normal"></highlight></codeline>
<codeline lineno="5350"><highlight class="normal"><ref refid="structLDble" kindref="compound">LDble</ref><sp/><ref refid="vector_8h_1a3fa3120b9c06e25fc840f90c7e10c5a6" kindref="member">copy_ldouble_vector</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="5351"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5352"><highlight class="normal"></highlight></codeline>
<codeline lineno="5358"><highlight class="normal"><ref refid="structChar" kindref="compound">Char</ref><sp/><ref refid="vector_8h_1a430a540aea6caac8002281b9a2ddbf7a" kindref="member">copy_char_vector</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="5359"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5360"><highlight class="normal"></highlight></codeline>
<codeline lineno="5366"><highlight class="normal"><ref refid="structUChar" kindref="compound">UChar</ref><sp/><ref refid="vector_8h_1ac3e7f4298d195586bfc0cf8b0fc1a053" kindref="member">copy_uchar_vector</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="5367"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5368"><highlight class="normal"></highlight></codeline>
<codeline lineno="5374"><highlight class="normal"><ref refid="structBool" kindref="compound">Bool</ref><sp/><ref refid="vector_8h_1a2e6c2d82128d66d5fe6800ee6ad9d277" kindref="member">copy_bool_vector</ref>(<ref refid="structBool" kindref="compound">Bool</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="5375"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5376"><highlight class="normal"></highlight></codeline>
<codeline lineno="5382"><highlight class="normal"><ref refid="structString" kindref="compound">String</ref><sp/><ref refid="vector_8h_1a2cb84d3851679202a04f76066bc80a6e" kindref="member">copy_string_vector</ref>(<ref refid="structString" kindref="compound">String</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="5383"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5384"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5385"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TYPE_VECTOR_DATA<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5386"><highlight class="normal"></highlight></codeline>
<codeline lineno="5405"><highlight class="normal"></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a88653cd8b508937a9efe184fe04ed2fd" kindref="member">short_vector_data</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="5406"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5407"><highlight class="normal"></highlight></codeline>
<codeline lineno="5426"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ae64308782a33a82a606c6463d0511a19" kindref="member">ushort_vector_data</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="5427"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5428"><highlight class="normal"></highlight></codeline>
<codeline lineno="5447"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a3804e8951d833849ea5c7333b832bf1e" kindref="member">int_vector_data</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="5448"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5449"><highlight class="normal"></highlight></codeline>
<codeline lineno="5468"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ac6172e0e9433875fa34c0faaf8647c6c" kindref="member">uint_vector_data</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="5469"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5470"><highlight class="normal"></highlight></codeline>
<codeline lineno="5489"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a78c08d70ca4769c5fa2e4d87bcd35f4e" kindref="member">long_vector_data</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="5490"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5491"><highlight class="normal"></highlight></codeline>
<codeline lineno="5510"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ae7aed886f0e33fc044d7d7bafcea088b" kindref="member">ulong_vector_data</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="5511"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5512"><highlight class="normal"></highlight></codeline>
<codeline lineno="5531"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ac368c61f3aceee6f22f7fdfd9c6866bc" kindref="member">llong_vector_data</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="5532"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5533"><highlight class="normal"></highlight></codeline>
<codeline lineno="5552"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a401a9795be5292f8c20fb032218c4b1a" kindref="member">ullong_vector_data</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="5553"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5554"><highlight class="normal"></highlight></codeline>
<codeline lineno="5573"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a84fbf5e526da1adcad6858a643df2462" kindref="member">float_vector_data</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="5574"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5575"><highlight class="normal"></highlight></codeline>
<codeline lineno="5594"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a1c5e11f6eff0482afd6666532c1c150f" kindref="member">double_vector_data</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="5595"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5596"><highlight class="normal"></highlight></codeline>
<codeline lineno="5615"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a4ff7d557d90612b873092b0b9dd82b15" kindref="member">ldouble_vector_data</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="5616"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5617"><highlight class="normal"></highlight></codeline>
<codeline lineno="5636"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1aa99d3902c062bd4e5e31b85ccd8867bb" kindref="member">char_vector_data</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="5637"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5638"><highlight class="normal"></highlight></codeline>
<codeline lineno="5657"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a5ec8248dfe94805dce29484cf23b9db5" kindref="member">uchar_vector_data</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="5658"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5659"><highlight class="normal"></highlight></codeline>
<codeline lineno="5678"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ab8ec8940661d127593fab26f02d3961a" kindref="member">bool_vector_data</ref>(<ref refid="structBool" kindref="compound">Bool</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="5679"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5680"><highlight class="normal"></highlight></codeline>
<codeline lineno="5700"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="vector_8h_1a1cb0a8bfe346307c5d842d15ffacbc0c" kindref="member">string_vector_data</ref>(<ref refid="structString" kindref="compound">String</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="5701"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5702"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5703"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TRIM_TYPE_VECTOR<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5704"><highlight class="normal"></highlight></codeline>
<codeline lineno="5711"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1aeec337d3614f9c62cd652fee528e8f10" kindref="member">trim_short_vector</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="5712"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5713"><highlight class="normal"></highlight></codeline>
<codeline lineno="5720"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a394639166d53eacb53725cf548f596db" kindref="member">trim_ushort_vector</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="5721"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5722"><highlight class="normal"></highlight></codeline>
<codeline lineno="5729"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a1365d9e27b0080e8e48d9809987e0824" kindref="member">trim_int_vector</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="5730"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5731"><highlight class="normal"></highlight></codeline>
<codeline lineno="5738"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1aafc05a4201bf2e5129655a7d4db8819c" kindref="member">trim_uint_vector</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="5739"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5740"><highlight class="normal"></highlight></codeline>
<codeline lineno="5747"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a8e0993c9b72acdbb4eec8bdea1687fd2" kindref="member">trim_long_vector</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="5748"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5749"><highlight class="normal"></highlight></codeline>
<codeline lineno="5756"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a2b44394f88268b15dfaf3640cb70f42f" kindref="member">trim_ulong_vector</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="5757"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5758"><highlight class="normal"></highlight></codeline>
<codeline lineno="5765"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ad500a258d2da444ab4d9a0315a241ab9" kindref="member">trim_llong_vector</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="5766"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5767"><highlight class="normal"></highlight></codeline>
<codeline lineno="5774"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1aa2e26e5c689daa0f13844939ead1e484" kindref="member">trim_ullong_vector</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="5775"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5776"><highlight class="normal"></highlight></codeline>
<codeline lineno="5783"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a78d86f1a5dc7e8f980fecfb2f8d12395" kindref="member">trim_float_vector</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="5784"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5785"><highlight class="normal"></highlight></codeline>
<codeline lineno="5792"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a4a91fca62c49f8628e3efdc3713be344" kindref="member">trim_double_vector</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="5793"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5794"><highlight class="normal"></highlight></codeline>
<codeline lineno="5801"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a7a50f85d6a874afbfdf345ba35b8a62e" kindref="member">trim_ldouble_vector</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="5802"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5803"><highlight class="normal"></highlight></codeline>
<codeline lineno="5810"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a4e9cace11cfb849b013d15d09053b0bb" kindref="member">trim_char_vector</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="5811"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5812"><highlight class="normal"></highlight></codeline>
<codeline lineno="5819"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a03a2814037d5194b5c291edca0155ae9" kindref="member">trim_uchar_vector</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="5820"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5821"><highlight class="normal"></highlight></codeline>
<codeline lineno="5828"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ae838be1f19558e27f1c9ee40b7f0f368" kindref="member">trim_bool_vector</ref>(<ref refid="structBool" kindref="compound">Bool</ref><sp/>*vec);</highlight></codeline>
<codeline lineno="5829"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5830"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5831"><highlight class="normal"></highlight></codeline>
<codeline lineno="5837" refid="vector_8h_1ae7ea4c14f63edfd4d7c039a02ae1a65e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TRIM(T)<sp/>_Generic(<sp/>(T),<sp/>Short:<sp/>trim_short_vector,<sp/>\</highlight></codeline>
<codeline lineno="5838"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UShort:<sp/>trim_ushort_vector,<sp/>\</highlight></codeline>
<codeline lineno="5839"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Int:<sp/>trim_int_vector,<sp/>\</highlight></codeline>
<codeline lineno="5840"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UInt:<sp/>trim_uint_vector,<sp/>\</highlight></codeline>
<codeline lineno="5841"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LInt:<sp/>trim_long_vector,<sp/>\</highlight></codeline>
<codeline lineno="5842"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ULInt:<sp/>trim_ulong_vector,<sp/>\</highlight></codeline>
<codeline lineno="5843"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LLInt:<sp/>trim_llong_vector,<sp/>\</highlight></codeline>
<codeline lineno="5844"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ULLInt:<sp/>trim_ullong_vector,<sp/>\</highlight></codeline>
<codeline lineno="5845"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Flt:<sp/>trim_float_vector,<sp/>\</highlight></codeline>
<codeline lineno="5846"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dble:<sp/>trim_double_vector,<sp/>\</highlight></codeline>
<codeline lineno="5847"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LDble:<sp/>trim_ldouble_vector,<sp/>\</highlight></codeline>
<codeline lineno="5848"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Char:<sp/>trim_char_vector,<sp/>\</highlight></codeline>
<codeline lineno="5849"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UChar:<sp/>trim_uchar_vector,<sp/>\</highlight></codeline>
<codeline lineno="5850"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bool:<sp/>trim_bool_vector)(&amp;T)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5851"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5852"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5853"><highlight class="normal"></highlight><highlight class="comment">//<sp/>REPLACE_TYPE_VECTOR_INDEX<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5854"><highlight class="normal"></highlight></codeline>
<codeline lineno="5875"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ab1de3c266f8b9ed02a1d6ce573da1f9a" kindref="member">replace_short_vector_index</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="5876"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5877"><highlight class="normal"></highlight></codeline>
<codeline lineno="5898"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a7bcc2cf2fbaf836342d35f0afa29eb74" kindref="member">replace_ushort_vector_index</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="5899"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5900"><highlight class="normal"></highlight></codeline>
<codeline lineno="5921"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a0e1744a0448c4e5dd1131593efb609b8" kindref="member">replace_int_vector_index</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="5922"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5923"><highlight class="normal"></highlight></codeline>
<codeline lineno="5944"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1aa1fc20f1e5fbd217726f0fd27b8b6ed7" kindref="member">replace_uint_vector_index</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="5945"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5946"><highlight class="normal"></highlight></codeline>
<codeline lineno="5967"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a4ea2e9f2401e9cd4d1cbdbec1e149aba" kindref="member">replace_long_vector_index</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="5968"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5969"><highlight class="normal"></highlight></codeline>
<codeline lineno="5990"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1abc7605a0d1c96745f5a21cde7850d646" kindref="member">replace_ulong_vector_index</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="5991"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5992"><highlight class="normal"></highlight></codeline>
<codeline lineno="6013"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a3743c4611f8d5bc6f7b50d138349e419" kindref="member">replace_llong_vector_index</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="6014"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6015"><highlight class="normal"></highlight></codeline>
<codeline lineno="6036"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1aec90d973d5ddfd94b2be73686077c4cb" kindref="member">replace_ullong_vector_index</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="6037"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6038"><highlight class="normal"></highlight></codeline>
<codeline lineno="6059"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a9a562517abca96c42b1b9fe69469915f" kindref="member">replace_float_vector_index</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>new_value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="6060"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6061"><highlight class="normal"></highlight></codeline>
<codeline lineno="6082"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a25c9a8f29ce2515cf260c9a50745fc69" kindref="member">replace_double_vector_index</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>new_value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="6083"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6084"><highlight class="normal"></highlight></codeline>
<codeline lineno="6105"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a81d619ab6affe5d8ffa3e79c099c9bb8" kindref="member">replace_ldouble_vector_index</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>new_value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="6106"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6107"><highlight class="normal"></highlight></codeline>
<codeline lineno="6128"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1aadfbe9f5e5b78204f55c342826be1cd5" kindref="member">replace_bool_vector_index</ref>(<ref refid="structBool" kindref="compound">Bool</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>new_value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="6129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6130"><highlight class="normal"></highlight></codeline>
<codeline lineno="6153"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a011a6f61257e9d5cc3296475ae8845ed" kindref="member">replace_string_vector_index</ref>(<ref refid="structString" kindref="compound">String</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*new_value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="6154"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6155"><highlight class="normal"></highlight></codeline>
<codeline lineno="6176"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a5f8e0b70e42100f1ef36d8ba5f9115bf" kindref="member">replace_char_vector_index</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>new_value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="6177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6178"><highlight class="normal"></highlight></codeline>
<codeline lineno="6199"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a9eaf5407b4c3a2f3db66ea179836beac" kindref="member">replace_uchar_vector_index</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>new_value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="6200"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6201"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6202"><highlight class="normal"></highlight><highlight class="comment">//<sp/>REPEAT_TYPE_VECTOR<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6203"><highlight class="normal"></highlight></codeline>
<codeline lineno="6221"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a1fbfbfeed7892cd604ac2175048a1ff3" kindref="member">repeat_short_vector</ref>(<ref refid="structShort" kindref="compound">Short</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num);</highlight></codeline>
<codeline lineno="6222"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6223"><highlight class="normal"></highlight></codeline>
<codeline lineno="6241"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a87921615a6088f8e15e74f796abd294e" kindref="member">repeat_ushort_vector</ref>(<ref refid="structUShort" kindref="compound">UShort</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num);</highlight></codeline>
<codeline lineno="6242"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6243"><highlight class="normal"></highlight></codeline>
<codeline lineno="6261"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1aeb26b3546bef2bb8e5afc6a8c93d23a1" kindref="member">repeat_int_vector</ref>(<ref refid="structInt" kindref="compound">Int</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num);</highlight></codeline>
<codeline lineno="6262"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6263"><highlight class="normal"></highlight></codeline>
<codeline lineno="6281"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a1aa1df7f7e77404e77862ca75666165c" kindref="member">repeat_uint_vector</ref>(<ref refid="structUInt" kindref="compound">UInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num);</highlight></codeline>
<codeline lineno="6282"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6283"><highlight class="normal"></highlight></codeline>
<codeline lineno="6301"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a1f0914c2c37de3b81b706c77be31e57a" kindref="member">repeat_long_vector</ref>(<ref refid="structLInt" kindref="compound">LInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num);</highlight></codeline>
<codeline lineno="6302"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6303"><highlight class="normal"></highlight></codeline>
<codeline lineno="6321"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a8c9c95f3e41bcaa00e99db959130c509" kindref="member">repeat_ulong_vector</ref>(<ref refid="structULInt" kindref="compound">ULInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num);</highlight></codeline>
<codeline lineno="6322"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6323"><highlight class="normal"></highlight></codeline>
<codeline lineno="6341"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a7c24fd593c9332ba1779b780b85cc893" kindref="member">repeat_llong_vector</ref>(<ref refid="structLLInt" kindref="compound">LLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num);</highlight></codeline>
<codeline lineno="6342"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6343"><highlight class="normal"></highlight></codeline>
<codeline lineno="6361"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a6f8e17e6a8930bf7bf0f7422d65eeab5" kindref="member">repeat_ullong_vector</ref>(<ref refid="structULLInt" kindref="compound">ULLInt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num);</highlight></codeline>
<codeline lineno="6362"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6363"><highlight class="normal"></highlight></codeline>
<codeline lineno="6381"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a58a085c7febff1b1bd9e6ec90510b36a" kindref="member">repeat_float_vector</ref>(<ref refid="structFlt" kindref="compound">Flt</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num);</highlight></codeline>
<codeline lineno="6382"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6383"><highlight class="normal"></highlight></codeline>
<codeline lineno="6401"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1ac2a03364dd0dc653854b1f70101514c6" kindref="member">repeat_double_vector</ref>(<ref refid="structDble" kindref="compound">Dble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num);</highlight></codeline>
<codeline lineno="6402"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6403"><highlight class="normal"></highlight></codeline>
<codeline lineno="6421"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a34a56cde6bc6f420f8b9063bf87232e1" kindref="member">repeat_ldouble_vector</ref>(<ref refid="structLDble" kindref="compound">LDble</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num);</highlight></codeline>
<codeline lineno="6422"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6423"><highlight class="normal"></highlight></codeline>
<codeline lineno="6441"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a10df883121d1f71d331ae6ba273357f1" kindref="member">repeat_bool_vector</ref>(<ref refid="structBool" kindref="compound">Bool</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num);</highlight></codeline>
<codeline lineno="6442"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6443"><highlight class="normal"></highlight></codeline>
<codeline lineno="6461"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1a9f6bd7ebba53e2d4eb0b8e3d8931029c" kindref="member">repeat_string_vector</ref>(<ref refid="structString" kindref="compound">String</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num);</highlight></codeline>
<codeline lineno="6462"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6463"><highlight class="normal"></highlight></codeline>
<codeline lineno="6481"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1aece15dcc8e9d3cf0fa0cb65c0b7a05f2" kindref="member">repeat_char_vector</ref>(<ref refid="structChar" kindref="compound">Char</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num);</highlight></codeline>
<codeline lineno="6482"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6483"><highlight class="normal"></highlight></codeline>
<codeline lineno="6501"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="vector_8h_1aa03b84f9a537aa95ab335f38448051a0" kindref="member">repeat_uchar_vector</ref>(<ref refid="structUChar" kindref="compound">UChar</ref><sp/>*vec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num);</highlight></codeline>
<codeline lineno="6502"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6503"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6504"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>vector_H<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6505"><highlight class="normal"></highlight><highlight class="comment">//<sp/>eof</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/jonwebb/Code_Dev/C/c_libs/c_libs/include/vector.h"/>
  </compounddef>
</doxygen>
